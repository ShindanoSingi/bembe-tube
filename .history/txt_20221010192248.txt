.welcomePage {
	/* background-image: url("https://imgur.com/a/1HaueMU"); */
	background-image: url("../Components/Images/HomePage.png");
	background-position: center;
	height: 100vh;
	max-width: 100vw;
	background-size: 100%;
	background-repeat: no-repeat;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	display: flex;
}

.top-text {
	font-size: 30px;
	text-align: center;
	position: absolute;
	top: 3vh;
	color: #f70606
}

.go-button {
	position: absolute;
	top: 27vh;
	left: -4vw;
	text-decoration: none;
}




@media screen and (max-width: 1200px) {
	.welcomePage {
		/* background-image: url("https://imgur.com/a/1HaueMU"); */
		background-image: url("../Components/Images/HomePage.png");
		background-position: center;
		height: 100vh;
		background-size: 100%;
		background-repeat: no-repeat;
		align-items: center;
		justify-content: center;
		flex-direction: column;
		display: flex;
	}

	.top-text {
		font-size: 30px;
		text-align: center;
		position: absolute;
		top: 3vh;
		color: #0612f7
	}

	.go-button {
		position: absolute;
		top: 17vh;
		left: -4vw;
		text-decoration: none;
	}

}

@media screen and (max-width: 1024px) {
	.welcomePage {
		/* background-image: url("https://imgur.com/a/1HaueMU"); */
		background-image: url("../Components/Images/HomePage.png");
		background-position: center;
		height: 100vh;
		background-size: 100%;
		background-repeat: no-repeat;
		align-items: center;
		justify-content: center;
		flex-direction: column;
		display: flex;
	}

	.top-text {
		font-size: 30px;
		text-align: center;
		position: absolute;
		top: 8.5vh;
		color: #0612f7
	}

	.go-button {
		position: absolute;
		top: 45vh;
		text-decoration: none;
	}

}


@media screen and (max-width: 900px) {
	.welcomePage {
		/* background-image: url("https://imgur.com/a/1HaueMU"); */
		background-image: url("../Components/Images/HomePage.png");
		background-position: center;
		height: 100vh;
		background-size: 100%;
		background-repeat: no-repeat;
		align-items: center;
		justify-content: center;
		flex-direction: column;
		display: flex;
	}

	.top-text {
		font-size: 30px;
		text-align: center;
		position: absolute;
		top: 13vh;
		color: #0612f7
	}

	.go-button {
		position: absolute;
		top: 42vh;
		text-decoration: none;
	}

}


@media screen and (max-width: 820px) {
	.welcomePage {
		/* background-image: url("https://imgur.com/a/1HaueMU"); */
		background-image: url("../Components/Images/HomePage.png");
		background-position: center;
		height: 100vh;
		background-size: 100%;
		background-repeat: no-repeat;
		align-items: center;
		justify-content: center;
		flex-direction: column;
		display: flex;
	}

	.top-text {
		font-size: 30px;
		text-align: center;
		position: absolute;
		top: 5vh;
	}

	.go-button {
		position: absolute;
		top: 35vh;
		text-decoration: none;
	}

}


@media screen and (max-width: 414px) {
	.welcomePage {
		/* background-image: url("https://imgur.com/a/1HaueMU"); */
		background-image: url("../Components/Images/HomePage.png");
		background-position: center;
		height: 100vh;
		background-size: 100%;
		background-repeat: no-repeat;
		align-items: center;
		justify-content: center;
		flex-direction: column;
		display: flex;
	}

	.top-text {
		text-align: center;
		position: absolute;
		top: 19vh;
	}

	.go-button {
		position: absolute;
		top: 25vh;
		text-decoration: none;
	}
}



@media screen and (max-width: 390px) {
	.welcomePage {
		/* background-image: url("https://imgur.com/a/1HaueMU"); */
		background-image: url("../Components/Images/HomePage.png");
		background-position: center;
		height: 100vh;
		width: 100vw;
		background-repeat: no-repeat;
		align-items: center;
		justify-content: center;
		flex-direction: column;
		display: flex;
	}

	.top-text {
		text-align: center;
		position: absolute;
		top: 16vh;
	}

	.go-button {
		position: absolute;
		top: 25vh;
		text-decoration: none;
	}
}





 "scripts": {
    "start": "npm run build:css && react-scripts start",
    "build": "tailwindcss -i style.css -o css/style.css --watch",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "build:css": "postcss src/styles/tailwind.css -o src/styles/main.css"
  },



  [{
  // Controls whether the editor shows CodeLens.
  "diffEditor.codeLens": false,

  // When enabled, the diff editor ignores changes in leading or trailing whitespace.
  "diffEditor.ignoreTrimWhitespace": true,

  // Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
  "diffEditor.maxComputationTime": 5000,

  // Maximum file size in MB for which to compute diffs. Use 0 for no limit.
  "diffEditor.maxFileSize": 50,

  // Controls whether the diff editor shows +/- indicators for added/removed changes.
  "diffEditor.renderIndicators": true,

  // When enabled, the diff editor shows arrows in its glyph margin to revert changes.
  "diffEditor.renderMarginRevertIcon": true,

  // Controls whether the diff editor shows the diff side by side or inline.
  "diffEditor.renderSideBySide": true,

  //
  //  - off: Lines will never wrap.
  //  - on: Lines will wrap at the viewport width.
  //  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
  "diffEditor.wordWrap": "inherit",

  // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`; `) can be a commit character that accepts a suggestion and types that character.
  "editor.acceptSuggestionOnCommitCharacter": true,

  // Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
  //  - on
  //  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
  //  - off
  "editor.acceptSuggestionOnEnter": "on",

  // Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.
  "editor.accessibilityPageSize": 10,

  // Controls whether the editor should run in a mode where it is optimized for screen readers. Setting to on will disable word wrapping.
  //  - auto: The editor will use platform APIs to detect when a Screen Reader is attached.
  //  - on: The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled.
  //  - off: The editor will never be optimized for usage with a Screen Reader.
  "editor.accessibilitySupport": "auto",

  // Controls whether the editor should automatically close brackets after the user adds an opening bracket.
  //  - always
  //  - languageDefined: Use language configurations to determine when to autoclose brackets.
  //  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingBrackets": "languageDefined",

  // Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
  //  - always
  //  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
  //  - never
  "editor.autoClosingDelete": "auto",

  // Controls whether the editor should type over closing quotes or brackets.
  //  - always
  //  - auto: Type over closing quotes or brackets only if they were automatically inserted.
  //  - never
  "editor.autoClosingOvertype": "auto",

  // Controls whether the editor should automatically close quotes after the user adds an opening quote.
  //  - always
  //  - languageDefined: Use language configurations to determine when to autoclose quotes.
  //  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingQuotes": "languageDefined",

  // Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
  //  - none: The editor will not insert indentation automatically.
  //  - keep: The editor will keep the current line's indentation.
  //  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
  //  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
  //  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
  "editor.autoIndent": "full",

  // Controls whether the editor should automatically surround selections when typing quotes or brackets.
  //  - languageDefined: Use language configurations to determine when to automatically surround selections.
  //  - quotes: Surround with quotes but not brackets.
  //  - brackets: Surround with brackets but not quotes.
  //  - never
  "editor.autoSurround": "languageDefined",

  // Controls whether bracket pair colorization is enabled or not. Use `workbench.colorCustomizations` to override the bracket highlight colors.
  "editor.bracketPairColorization.enabled": true,

  // Controls whether each bracket type has its own independent color pool.
  "editor.bracketPairColorization.independentColorPoolPerBracketType": false,

  // Code action kinds to be run on save.
  "editor.codeActionsOnSave": {},

  // Controls whether the editor shows CodeLens.
  "editor.codeLens": true,

  // Controls the font family for CodeLens.
  "editor.codeLensFontFamily": "",

  // Controls the font size in pixels for CodeLens. When set to `0`, 90% of `editor.fontSize` is used.
  "editor.codeLensFontSize": 0,

  // Controls whether the editor should render the inline color decorators and color picker.
  "editor.colorDecorators": true,

  // Enable that the selection with the mouse and keys is doing column selection.
  "editor.columnSelection": false,

  // Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
  "editor.comments.ignoreEmptyLines": true,

  // Controls whether a space character is inserted when commenting.
  "editor.comments.insertSpace": true,

  // Controls whether syntax highlighting should be copied into the clipboard.
  "editor.copyWithSyntaxHighlighting": true,

  // Control the cursor animation style.
  "editor.cursorBlinking": "blink",

  // Controls whether the smooth caret animation should be enabled.
  "editor.cursorSmoothCaretAnimation": false,

  // Controls the cursor style.
  "editor.cursorStyle": "line",

  // Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
  "editor.cursorSurroundingLines": 0,

  // Controls when `cursorSurroundingLines` should be enforced.
  //  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
  //  - all: `cursorSurroundingLines` is enforced always.
  "editor.cursorSurroundingLinesStyle": "default",

  // Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
  "editor.cursorWidth": 0,

  // Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
  //  - null: None
  //  - aliariff.auto-add-brackets: Automatically add complete brackets when writing interpolated string
  //  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
  //  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
  //  - randrade23.beautify-json: Beautify JSON effortlessly.
  //  - aaron-bond.better-comments: Improve your code commenting by annotating with alert, informational, TODOs, and more!
  //  - michelemelluso.code-beautifier: Beautify css, sass and less code (extension for Visual Studio Code)
  //  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML
  //  - paulmolluzzo.convert-css-in-js: CSS-in-JS autocomplete and conversion
  //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
  //  - shamanu4.django-intellisense: Full autocomplete support for django magic methods
  //  - oouo-diogo-perdigao.docthis: Automatically generates detailed JSDoc comments in TypeScript and JavaScript files.
  //  - j69.ejs-beautify: A formatter extension for EJS files for VS Code. 'js-beautify' is used as the format engine.
  //  - evolution-gaming.evolution-gaming--vscode-eslint: Integrates ESLint JavaScript into VS Code. The plugin is a fork of "vscode-eslint", with added ability to specify a set of rules to autofix on save. See https://github.com/microsoft/vscode-eslint/issues/767 and https://github.com/microsoft/vscode-eslint/issues/208 for more details.
  //  - ClemensPeters.format-json: Convert file to file type json and format content.
  //  - RandomFractalsInc.geo-data-viewer: 🗺️ Geo Data Viewer w/0 Py 🐍 || pyWidgets || pandas 🐼 ||  @reactjs  ⚛️ required to gen. some snazzy maps 🗺️ with keplerGL ...
  //  - AndersEAndersen.html-class-suggestions: Adds code completion suggestions to HTML class attributes based on the CSS files in your workspace.
  //  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
  //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
  //  - solnurkarim.html-to-css-autocompletion: Provides completion suggestions for classes and ids from markup documents to stylesheets.
  //  - mkaufman.HTMLHint: VS Code integration for HTMLHint - A Static Code Analysis Tool for HTML
  //  - varharrie.import-beautify: VSCode extension to help grouping and beautify import statments.
  //  - mgesbert.indent-nested-dictionary: This extension will try its best to indent JSONs and Python dictionary, even incomplete.
  //  - colton.inline-html: IntelliSense, Emmet and Syntax Highlighting for html/css inside ES6 Template Strings.
  //  - pushqrdx.inline-html: IntelliSense, Emmet and Syntax Highlighting for html/css inside ES6 Template Strings.
  //  - vscode.json-language-features: Provides rich language support for JSON files.
  //  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
  //  - kiteco.kite: AI code completions for all languages, intellisense, code snippets, code signatures, and cursor-following documentation for VS Code. Kite supports .js .jsx .vue .tsx .ts .css .html .less .c .cc .cpp .cs .h .hpp .m .scala .java .kt .py .go .php .rb and .sh filetypes.
  //  - bierner.lit-html: Syntax highlighting and IntelliSense for html inside of JavaScript and TypeScript tagged template strings
  //  - vscode.markdown-language-features: Provides rich language support for Markdown.
  //  - devlikeyou.mongodb-dly: It is a quickly administrator of mongodb databases. Create, update and find your data.
  //  - mongodb.mongodb-vscode: Connect to MongoDB and Atlas directly from your VS Code environment, navigate your databases and collections, inspect your schema and use playgrounds to prototype queries and aggregations.
  //  - ms-mssql.mssql: Develop Microsoft SQL Server, Azure SQL Database and SQL Data Warehouse everywhere
  //  - MEngRBatinov.mssql-scripts: MSSQL administration, definition and data modification scripts to ease your coding. Automate tasks. Execute your query faster.
  //  - vscode.php-language-features: Provides rich language support for PHP files.
  //  - svipas.prettier-plus: Prettier (code formatter) for the VS Code.
  //  - bysabi.prettier-vscode-standard: prettier or prettier + standard --fix
  //  - mblode.pretty-formatter: VS Code extension to format your code using Pretty Diff
  //  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
  //  - donjayamanne.python-environment-manager: View and manage Python environments & packages.
  //  - mgesbert.python-path: Python imports utils.
  //  - dongli.python-preview: Provide Preview for Python Execution.
  //  - OfHumanBondage.react-proptypes-intellisense: PropTypes intellisense for React components
  //  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
  //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
  //  - oboki.sql-styler: Format your SQL code pretty and readable.
  //  - mtxr.sqltools: Database management done right. Connection explorer, query runner, intellisense, bookmarks, query history. Feel like a database hero!
  //  - mtxr.sqltools-driver-pg: SQLTools PostgreSQL/Cockroach/Redshift Driver
  //  - TabNine.tabnine-vscode: JavaScript, Python, Java, Typescript & all other languages - AI Code completion plugin. Tabnine makes developers more productive by auto-completing their code.
  //  - l7ssha.tag-inserter: Insert HTML tag within text in line or selection
  //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
  //  - KevinRose.vsc-python-indent: Correct Python indentation
  //  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
  //  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
  //  - ecmel.vscode-html-css: CSS Intellisense for HTML
  //  - mohd-akram.vscode-html-format: Format HTML documents.
  //  - jemc.vscode-implicit-indent: When the cursor moves to an empty line, automatically indent to the correct level.
  //  - cweijan.vscode-myssql-client2: Supports manager databases for MySQL/MariaDB, PostgreSQL, SQLite, Redis and ElasticSearch.
  //  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
  //  - njqdev.vscode-python-typehint: Type hint completion for Python.
  //  - mrmlnc.vscode-scss: Advanced autocompletion and refactoring support for SCSS
  //  - clarkyu.vscode-sql-beautify: More Powerful extension that beautifies SQL/一键美化你的SQL
  //  - lea21st.vscode-sql-formatter: Format sql files using the sql-formatter npm package
  //  - frigus02.vscode-sql-tagged-template-literals: Syntax highlighting, validation and type checking for PostgreSQL in template literals tagged with `sql` function
  //  - stylelint.vscode-stylelint: Official Stylelint extension for Visual Studio Code
  //  - n23.vscode-stylesheet-beautify: formating stylesheet (sass|scss|less|css)
  //  - Atishay-Jain.All-Autocomplete: Create autocomplete items from open files in VSCode.
  //  - AllenLawrence.auto-mongodb: One click to run MongoDB without installation or configuration
  //  - mcright.auto-save: Auto-Save files by switching between windows.
  //  - serjrd.coffeescript-indent: Auto indent on press enter after keywords like if, else if, else, switch, when, default, ()-> ..
  //  - stackbreak.comment-divider: Divide your code by sections with styled separators.
  //  - Compulim.compulim-vscode-closetag: Quickly close last opened HTML/XML tag
  //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
  //  - GitHub.copilot: Your AI pair programmer
  //  - Chukwuamaka.csvtojson-converter: Convert documents between CSV and JSON file formats.
  //  - ms-mssql.data-workspace-vscode: Additional common functionality for database projects
  //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
  //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
  //  - vscode.emmet: Emmet support for VS Code
  //  - DmitryDorofeev.empty-indent: Removes indentation in empty lines on save
  //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
  //  - xpol.extra-markdown-plugins: Adds extra markdown features support to VS Code's built-in markdown preview.
  //  - yandeu.five-server: A better Live Server with instant updates, highlights and PHP support.
  //  - Janne252.fontawesome-autocomplete: Autocomplete & preview Font Awesome icons in any language.
  //  - adrianwilczynski.format-selection-as-html: Format selected text as HTML using js-beautify or Prettier. Useful for code embedded in strings or templating languages without formatting support (like Razor).
  //  - GrapeCity.gc-excelviewer: Edit Excel spreadsheets and CSV files in Visual Studio Code and VS Code for the Web.
  //  - vscode.git: Git SCM Integration
  //  - vscode.git-base: Git static contributions and pickers.
  //  - vscode.github: GitHub features for VS Code
  //  - vscode.github-authentication: GitHub Authentication Provider
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
  //  - heybourn.headwind: An opinionated class sorter for Tailwind CSS
  //  - hwencc.html-tag-wrapper: wrap selected html tag by press ctrl+i, you can change the wrapper tag name simply too
  //  - TobiasHansson.html-validate-vscode: In-editor view of html-validate rules for your project.
  //  - AvishekPatra.htmlBoilerPlate: Create Html, CSS, JS template
  //  - bianxianyang.htmlplay: html/js/css playground
  //  - bradgashler.htmltagwrap: Wraps selected code with HTML tags
  //  - vscode.image-preview: Provides VS Code's built-in image preview
  //  - usernamehw.indent-one-space: Move code to left or right with a distance of one whitespace
  //  - oderwat.indent-rainbow: Makes indentation easier to read
  //  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
  //  - k--kato.intellij-idea-keybindings: Port of IntelliJ IDEA Keybindings, including for WebStorm, PyCharm, PHP Storm, etc.
  //  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
  //  - vscode.jake: Extension to add Jake capabilities to VS Code.
  //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - khaeransori.json2csv: Convert JSON to CSV, and CSV to JSON.
  //  - GregorBiswanger.json2ts: Convert a JSON from clipboard to TypeScript interfaces. (Ctrl+Alt+V)
  //  - gogocrow.jsx-beautify: I am still working on it. So please do not download!!
  //  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
  //  - ritwickdey.live-sass: Compile Sass or Scss to CSS at realtime with live browser reload.
  //  - negokaz.live-server-preview: Preview your HTML file with localhost server live-reloading enabled
  //  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
  //  - xyz.local-history: Save files into local history
  //  - vscode.markdown-math: Adds math support to Markdown in notebooks.
  //  - zhuangtongfa.material-theme: Atom‘s iconic One Dark theme for Visual Studio Code
  //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
  //  - vscode.microsoft-authentication: Microsoft authentication provider
  //  - HookyQR.minify: Minify for VS Code.
  // Minify with command, and (optionally) re-minify on save.
  //  - bagonaut.mongogo: Integrates mongo shell into vs code.
  //  - stringham.move-ts: extension for moving typescript files and folders and updating relative imports in your workspace
  //  - leizongmin.node-module-intellisense: Autocompletes Node.js modules in import statements
  //  - vscode.npm: Extension to add task support for npm scripts.
  //  - christian-kohler.npm-intellisense: Visual Studio Code plugin that autocompletes npm modules in import statements
  //  - lesgrieve.paste-indent: Paste text following indent of current line.
  //  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
  //  - mohsen1.prettify-json: Visual Studio Code Prettify JSON Extension
  //  - tht13.python: Python language extension for vscode
  //  - 076923.python-image-preview: Numpy, Pillow, OpenCV, Matplotlib, Plotly, ImageIO, Scikit Image, Tensorflow, Pytorch Image Preview
  //  - 2gua.rainbow-brackets: A rainbow brackets extension for VS Code.
  //  - voldemortensen.rainbow-tags: Rainbow Tags
  //  - jeremyrajan.react-component: Create react component using ES6
  //  - Vaisrav.samplext: Starter template for HTML boilerplate.
  //  - jasonnutter.search-node-modules: Quickly search the node_modules folder.
  //  - vscode.simple-browser: A very basic built-in webview for displaying web content.
  //  - burkeholland.simple-react-snippets: Dead simple React snippets you will actually use
  //  - cmoog.sqlnotebook: View SQL files as notebooks. Execute cells and view query output.
  //  - yeannylam.tab-out-or-reindent: Tab jump out pair or reindent selection.
  //  - TakumiI.tabspace: Convert tab to space.
  //  - austenc.tailwind-docs: Easily access the Tailwind CSS documentation from within Code
  //  - mrmlnc.vscode-attrs-sorter: Sorting of the tag attributes in the specified order
  //  - pranaygp.vscode-css-peek: Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.
  //  - be5invis.vscode-custom-css: Custom CSS and JS for Visual Studio Code
  //  - mrmlnc.vscode-doiuse: Lint CSS for browser support against caniuse database.
  //  - P-de-Jong.vscode-html-scss: SCSS support for HTML documents
  //  - vscode-icons-team.vscode-icons: Icons for Visual Studio Code
  //  - sandipchitale.vscode-indent-line: VS Code extention to indent line to correct level.
  //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
  //  - mrmlnc.vscode-less: Advanced autocompletion and refactoring support for Less
  //  - eg2.vscode-npm-script: npm support for VS Code
  //  - jaspernorth.vscode-pigments: Previews colors used inside the editor
  //  - planbcoding.vscode-react-refactor: Recompose your overgrown JSX without worrying about the given data.
  //  - sensourceinc.vscode-sql-beautify: VS Code extension that beautifies SQL using vkbeautify module
  //  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
  //  - PeterMekhaeil.vscode-tailwindcss-explorer: Explore the classes available in your project's tailwind setup.
  //  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
  //  - ms-vsliveshare.vsliveshare: Real-time collaborative development from the comfort of your favorite tools.
  //  - ms-vsliveshare.vsliveshare-audio: Adds audio calling capabilities to Visual Studio Live Share
  //  - Swellaby.workspace-config-plus: VS Code extension for improved workspace configuration
  "editor.defaultFormatter": null,

  // Controls whether the Go to Definition mouse gesture always opens the peek widget.
  "editor.definitionLinkOpensInPeek": false,

  // Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
  "editor.detectIndentation": true,

  // Controls whether the editor should allow moving selections via drag and drop.
  "editor.dragAndDrop": true,

  // Controls whether you can drag and drop a file into a text editor by holding down `shift` (instead of opening the file in an editor).
  "editor.dropIntoEditor.enabled": true,

  // Controls whether copying without a selection copies the current line.
  "editor.emptySelectionClipboard": true,

  // Enable/disable running edits from extensions on paste.
  "editor.experimental.pasteActions.enabled": false,

  // Shows the nested current scopes during the scroll at the top of the editor.
  "editor.experimental.stickyScroll.enabled": false,

  // Enabling this adjusts how the code action menu is rendered.
  "editor.experimental.useCustomCodeActionMenu": false,

  // Scrolling speed multiplier when pressing `Alt`.
  "editor.fastScrollSensitivity": 5,

  // Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
  "editor.find.addExtraSpaceOnTop": true,

  // Controls the condition for turning on Find in Selection automatically.
  //  - never: Never turn on Find in Selection automatically (default).
  //  - always: Always turn on Find in Selection automatically.
  //  - multiline: Turn on Find in Selection automatically when multiple lines of content are selected.
  "editor.find.autoFindInSelection": "never",

  // Controls whether the cursor should jump to find matches while typing.
  "editor.find.cursorMoveOnType": true,

  // Controls whether the Find Widget should read or modify the shared find clipboard on macOS.
  "editor.find.globalFindClipboard": false,

  // Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
  "editor.find.loop": true,

  // Controls whether the search string in the Find Widget is seeded from the editor selection.
  //  - never: Never seed search string from the editor selection.
  //  - always: Always seed search string from the editor selection, including word at cursor position.
  //  - selection: Only seed search string from the editor selection.
  "editor.find.seedSearchStringFromSelection": "always",

  // Controls whether the editor has code folding enabled.
  "editor.folding": true,

  // Controls whether the editor should highlight folded ranges.
  "editor.foldingHighlight": true,

  // Controls whether the editor automatically collapses import ranges.
  "editor.foldingImportsByDefault": false,

  // The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.
  "editor.foldingMaximumRegions": 5000,

  // Controls the strategy for computing folding ranges.
  //  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
  //  - indentation: Use the indentation-based folding strategy.
  "editor.foldingStrategy": "auto",

  // Controls the font family.
  "editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",

  // Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
  "editor.fontLigatures": false,

  // Controls the font size in pixels.
  "editor.fontSize": 12,

  // Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
  "editor.fontWeight": "normal",

  // Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
  "editor.formatOnPaste": false,

  // Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
  "editor.formatOnSave": false,

  // Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
  //  - file: Format the whole file.
  //  - modifications: Format modifications (requires source control).
  //  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
  "editor.formatOnSaveMode": "file",

  // Controls whether the editor should automatically format the line after typing.
  "editor.formatOnType": false,

  // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
  "editor.glyphMargin": true,

  // Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
  "editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

  // Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
  "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

  // Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
  "editor.gotoLocation.alternativeImplementationCommand": "",

  // Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
  "editor.gotoLocation.alternativeReferenceCommand": "",

  // Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
  "editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

  // This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
  //
  "editor.gotoLocation.multiple": null,

  // Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
  //  - peek: Show peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a peek view
  //  - goto: Go to the primary result and enable peek-less navigation to others
  "editor.gotoLocation.multipleDeclarations": "peek",

  // Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
  //  - peek: Show peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a peek view
  //  - goto: Go to the primary result and enable peek-less navigation to others
  "editor.gotoLocation.multipleDefinitions": "peek",

  // Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
  //  - peek: Show peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a peek view
  //  - goto: Go to the primary result and enable peek-less navigation to others
  "editor.gotoLocation.multipleImplementations": "peek",

  // Controls the behavior the 'Go to References'-command when multiple target locations exist.
  //  - peek: Show peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a peek view
  //  - goto: Go to the primary result and enable peek-less navigation to others
  "editor.gotoLocation.multipleReferences": "peek",

  // Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
  //  - peek: Show peek view of the results (default)
  //  - gotoAndPeek: Go to the primary result and show a peek view
  //  - goto: Go to the primary result and enable peek-less navigation to others
  "editor.gotoLocation.multipleTypeDefinitions": "peek",

  // Controls whether bracket pair guides are enabled or not.
  //  - true: Enables bracket pair guides.
  //  - active: Enables bracket pair guides only for the active bracket pair.
  //  - false: Disables bracket pair guides.
  "editor.guides.bracketPairs": false,

  // Controls whether horizontal bracket pair guides are enabled or not.
  //  - true: Enables horizontal guides as addition to vertical bracket pair guides.
  //  - active: Enables horizontal guides only for the active bracket pair.
  //  - false: Disables horizontal bracket pair guides.
  "editor.guides.bracketPairsHorizontal": "active",

  // Controls whether the editor should highlight the active bracket pair.
  "editor.guides.highlightActiveBracketPair": true,

  // Controls whether the editor should highlight the active indent guide.
  //  - true: Highlights the active indent guide.
  //  - always: Highlights the active indent guide even if bracket guides are highlighted.
  //  - false: Do not highlight the active indent guide.
  "editor.guides.highlightActiveIndentation": true,

  // Controls whether the editor should render indent guides.
  "editor.guides.indentation": true,

  // Controls whether the cursor should be hidden in the overview ruler.
  "editor.hideCursorInOverviewRuler": false,

  // Prefer showing hovers above the line, if there's space.
  "editor.hover.above": true,

  // Controls the delay in milliseconds after which the hover is shown.
  "editor.hover.delay": 300,

  // Controls whether the hover is shown.
  "editor.hover.enabled": true,

  // Controls whether the hover should remain visible when mouse is moved over it.
  "editor.hover.sticky": true,

  // Enables the inlay hints in the editor.
  //  - on: Inlay hints are enabled
  //  - onUnlessPressed: Inlay hints are showing by default and hide when holding `Ctrl+Alt`
  //  - offUnlessPressed: Inlay hints are hidden by default and show when holding `Ctrl+Alt`
  //  - off: Inlay hints are disabled
  "editor.inlayHints.enabled": "on",

  // Controls font family of inlay hints in the editor. When set to empty, the `editor.fontFamily` is used.
  "editor.inlayHints.fontFamily": "",

  // Controls font size of inlay hints in the editor. As default the `editor.fontSize` is used when the configured value is less than `5` or greater than the editor font size.
  "editor.inlayHints.fontSize": 0,

  // Enables the padding around the inlay hints in the editor.
  "editor.inlayHints.padding": false,

  // Controls whether to automatically show inline suggestions in the editor.
  "editor.inlineSuggest.enabled": true,

  // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.insertSpaces": true,

  // Defines the bracket symbols that increase or decrease the indentation.
  "editor.language.brackets": null,

  // Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.
  "editor.language.colorizedBracketPairs": null,

  // Special handling for large files to disable certain memory intensive features.
  "editor.largeFileOptimizations": true,

  // Controls the letter spacing in pixels.
  "editor.letterSpacing": 0,

  // Enables the code action lightbulb in the editor.
  "editor.lightbulb.enabled": true,

  // Controls the line height.
  //  - Use 0 to automatically compute the line height from the font size.
  //  - Values between 0 and 8 will be used as a multiplier with the font size.
  //  - Values greater than or equal to 8 will be used as effective values.
  "editor.lineHeight": 0,

  // Controls the display of line numbers.
  //  - off: Line numbers are not rendered.
  //  - on: Line numbers are rendered as absolute number.
  //  - relative: Line numbers are rendered as distance in lines to cursor position.
  //  - interval: Line numbers are rendered every 10 lines.
  "editor.lineNumbers": "on",

  // Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.
  "editor.linkedEditing": false,

  // Controls whether the editor should detect links and make them clickable.
  "editor.links": true,

  // Highlight matching brackets.
  "editor.matchBrackets": "always",

  // Lines above this length will not be tokenized for performance reasons
  "editor.maxTokenizationLineLength": 20000,

  // Controls whether the minimap is hidden automatically.
  "editor.minimap.autohide": false,

  // Controls whether the minimap is shown.
  "editor.minimap.enabled": true,

  // Limit the width of the minimap to render at most a certain number of columns.
  "editor.minimap.maxColumn": 120,

  // Render the actual characters on a line as opposed to color blocks.
  "editor.minimap.renderCharacters": true,

  // Scale of content drawn in the minimap: 1, 2 or 3.
  "editor.minimap.scale": 1,

  // Controls when the minimap slider is shown.
  "editor.minimap.showSlider": "mouseover",

  // Controls the side where to render the minimap.
  "editor.minimap.side": "right",

  // Controls the size of the minimap.
  //  - proportional: The minimap has the same size as the editor contents (and might scroll).
  //  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
  //  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
  "editor.minimap.size": "proportional",

  // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
  "editor.mouseWheelScrollSensitivity": 1,

  // Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
  "editor.mouseWheelZoom": false,

  // Merge multiple cursors when they are overlapping.
  "editor.multiCursorMergeOverlapping": true,

  // The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
  //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
  //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
  "editor.multiCursorModifier": "alt",

  // Controls pasting when the line count of the pasted text matches the cursor count.
  //  - spread: Each cursor pastes a single line of the text.
  //  - full: Each cursor pastes the full text.
  "editor.multiCursorPaste": "spread",

  // Controls whether the editor should highlight semantic symbol occurrences.
  "editor.occurrencesHighlight": true,

  // Controls whether a border should be drawn around the overview ruler.
  "editor.overviewRulerBorder": true,

  // Controls the amount of space between the bottom edge of the editor and the last line.
  "editor.padding.bottom": 0,

  // Controls the amount of space between the top edge of the editor and the first line.
  "editor.padding.top": 0,

  // Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
  "editor.parameterHints.cycle": false,

  // Enables a pop-up that shows parameter documentation and type information as you type.
  "editor.parameterHints.enabled": true,

  // Controls whether to focus the inline editor or the tree in the peek widget.
  //  - tree: Focus the tree when opening peek
  //  - editor: Focus the editor when opening peek
  "editor.peekWidgetDefaultFocus": "tree",

  // Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the '#editor.suggestOnTriggerCharacters#'-setting which controls if suggestions are triggered by special characters.
  "editor.quickSuggestions": {
    "other": "on",
    "comments": "off",
    "strings": "off"
  },

  // Controls the delay in milliseconds after which quick suggestions will show up.
  "editor.quickSuggestionsDelay": 10,

  // Enable/disable the ability to preview changes before renaming
  "editor.rename.enablePreview": true,

  // Deprecated, use `editor.linkedEditing` instead.
  // Controls whether the editor auto renames on type.
  "editor.renameOnType": false,

  // Controls whether the editor should render control characters.
  "editor.renderControlCharacters": true,

  // Render last line number when the file ends with a newline.
  "editor.renderFinalNewline": true,

  // Controls how the editor should render the current line highlight.
  //  - none
  //  - gutter
  //  - line
  //  - all: Highlights both the gutter and the current line.
  "editor.renderLineHighlight": "line",

  // Controls if the editor should render the current line highlight only when the editor is focused.
  "editor.renderLineHighlightOnlyWhenFocus": false,

  // Controls how the editor should render whitespace characters.
  //  - none
  //  - boundary: Render whitespace characters except for single spaces between words.
  //  - selection: Render whitespace characters only on selected text.
  //  - trailing: Render only trailing whitespace characters.
  //  - all
  "editor.renderWhitespace": "selection",

  // Controls whether selections should have rounded corners.
  "editor.roundedSelection": true,

  // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
  "editor.rulers": [],

  // Controls the visibility of the horizontal scrollbar.
  //  - auto: The horizontal scrollbar will be visible only when necessary.
  //  - visible: The horizontal scrollbar will always be visible.
  //  - hidden: The horizontal scrollbar will always be hidden.
  "editor.scrollbar.horizontal": "auto",

  // The height of the horizontal scrollbar.
  "editor.scrollbar.horizontalScrollbarSize": 12,

  // Controls whether clicks scroll by page or jump to click position.
  "editor.scrollbar.scrollByPage": false,

  // Controls the visibility of the vertical scrollbar.
  //  - auto: The vertical scrollbar will be visible only when necessary.
  //  - visible: The vertical scrollbar will always be visible.
  //  - hidden: The vertical scrollbar will always be hidden.
  "editor.scrollbar.vertical": "auto",

  // The width of the vertical scrollbar.
  "editor.scrollbar.verticalScrollbarSize": 14,

  // Controls the number of extra characters beyond which the editor will scroll horizontally.
  "editor.scrollBeyondLastColumn": 4,

  // Controls whether the editor will scroll beyond the last line.
  "editor.scrollBeyondLastLine": true,

  // Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
  "editor.scrollPredominantAxis": true,

  // Controls whether the editor should highlight matches similar to the selection.
  "editor.selectionHighlight": true,

  // Controls whether the semanticHighlighting is shown for the languages that support it.
  //  - true: Semantic highlighting enabled for all color themes.
  //  - false: Semantic highlighting disabled for all color themes.
  //  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
  "editor.semanticHighlighting.enabled": "configuredByTheme",

  // Overrides editor semantic token color and styles from the currently selected color theme.
  "editor.semanticTokenColorCustomizations": {},

  // Controls strikethrough deprecated variables.
  "editor.showDeprecated": true,

  // Controls when the folding controls on the gutter are shown.
  //  - always: Always show the folding controls.
  //  - never: Never show the folding controls and reduce the gutter size.
  //  - mouseover: Only show the folding controls when the mouse is over the gutter.
  "editor.showFoldingControls": "mouseover",

  // Controls fading out of unused code.
  "editor.showUnused": true,

  // Whether leading and trailing whitespace should always be selected.
  "editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

  // Controls whether the editor will scroll using an animation.
  "editor.smoothScrolling": false,

  // Controls if surround-with-snippets or file template snippets show as code actions.
  "editor.snippets.codeActions.enabled": true,

  // Controls whether snippets are shown with other suggestions and how they are sorted.
  //  - top: Show snippet suggestions on top of other suggestions.
  //  - bottom: Show snippet suggestions below other suggestions.
  //  - inline: Show snippets suggestions with other suggestions.
  //  - none: Do not show snippet suggestions.
  "editor.snippetSuggestions": "inline",

  // Keep peek editors open even when double clicking their content or when hitting `Escape`.
  "editor.stablePeek": false,

  // Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
  "editor.stickyTabStops": false,

  // This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
  //
  "editor.suggest.filteredTypes": {},

  // Controls whether filtering and sorting suggestions accounts for small typos.
  "editor.suggest.filterGraceful": true,

  // Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
  //  - insert: Insert suggestion without overwriting text right of the cursor.
  //  - replace: Insert suggestion and overwrite text right of the cursor.
  "editor.suggest.insertMode": "insert",

  // Controls whether sorting favors words that appear close to the cursor.
  "editor.suggest.localityBonus": false,

  // This setting is deprecated. The suggest widget can now be resized.
  //
  "editor.suggest.maxVisibleSuggestions": 0,

  // Controls whether to preview the suggestion outcome in the editor.
  "editor.suggest.preview": false,

  // Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
  "editor.suggest.shareSuggestSelections": false,

  // When enabled IntelliSense shows `class`-suggestions.
  "editor.suggest.showClasses": true,

  // When enabled IntelliSense shows `color`-suggestions.
  "editor.suggest.showColors": true,

  // When enabled IntelliSense shows `constant`-suggestions.
  "editor.suggest.showConstants": true,

  // When enabled IntelliSense shows `constructor`-suggestions.
  "editor.suggest.showConstructors": true,

  // When enabled IntelliSense shows `customcolor`-suggestions.
  "editor.suggest.showCustomcolors": true,

  // When enabled IntelliSense shows `deprecated`-suggestions.
  "editor.suggest.showDeprecated": true,

  // When enabled IntelliSense shows `enumMember`-suggestions.
  "editor.suggest.showEnumMembers": true,

  // When enabled IntelliSense shows `enum`-suggestions.
  "editor.suggest.showEnums": true,

  // When enabled IntelliSense shows `event`-suggestions.
  "editor.suggest.showEvents": true,

  // When enabled IntelliSense shows `field`-suggestions.
  "editor.suggest.showFields": true,

  // When enabled IntelliSense shows `file`-suggestions.
  "editor.suggest.showFiles": true,

  // When enabled IntelliSense shows `folder`-suggestions.
  "editor.suggest.showFolders": true,

  // When enabled IntelliSense shows `function`-suggestions.
  "editor.suggest.showFunctions": true,

  // Controls whether to show or hide icons in suggestions.
  "editor.suggest.showIcons": true,

  // Controls whether suggest details show inline with the label or only in the details widget
  "editor.suggest.showInlineDetails": true,

  // When enabled IntelliSense shows `interface`-suggestions.
  "editor.suggest.showInterfaces": true,

  // When enabled IntelliSense shows `issues`-suggestions.
  "editor.suggest.showIssues": true,

  // When enabled IntelliSense shows `keyword`-suggestions.
  "editor.suggest.showKeywords": true,

  // When enabled IntelliSense shows `method`-suggestions.
  "editor.suggest.showMethods": true,

  // When enabled IntelliSense shows `module`-suggestions.
  "editor.suggest.showModules": true,

  // When enabled IntelliSense shows `operator`-suggestions.
  "editor.suggest.showOperators": true,

  // When enabled IntelliSense shows `property`-suggestions.
  "editor.suggest.showProperties": true,

  // When enabled IntelliSense shows `reference`-suggestions.
  "editor.suggest.showReferences": true,

  // When enabled IntelliSense shows `snippet`-suggestions.
  "editor.suggest.showSnippets": true,

  // Controls the visibility of the status bar at the bottom of the suggest widget.
  "editor.suggest.showStatusBar": false,

  // When enabled IntelliSense shows `struct`-suggestions.
  "editor.suggest.showStructs": true,

  // When enabled IntelliSense shows `typeParameter`-suggestions.
  "editor.suggest.showTypeParameters": true,

  // When enabled IntelliSense shows `unit`-suggestions.
  "editor.suggest.showUnits": true,

  // When enabled IntelliSense shows `user`-suggestions.
  "editor.suggest.showUsers": true,

  // When enabled IntelliSense shows `value`-suggestions.
  "editor.suggest.showValues": true,

  // When enabled IntelliSense shows `variable`-suggestions.
  "editor.suggest.showVariables": true,

  // When enabled IntelliSense shows `text`-suggestions.
  "editor.suggest.showWords": true,

  // Controls whether an active snippet prevents quick suggestions.
  "editor.suggest.snippetsPreventQuickSuggestions": true,

  // Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
  "editor.suggestFontSize": 0,

  // Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
  "editor.suggestLineHeight": 0,

  // Controls whether suggestions should automatically show up when typing trigger characters.
  "editor.suggestOnTriggerCharacters": true,

  // Controls how suggestions are pre-selected when showing the suggest list.
  //  - first: Always select the first suggestion.
  //  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
  //  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
  "editor.suggestSelection": "first",

  // Enables tab completions.
  //  - on: Tab complete will insert the best matching suggestion when pressing tab.
  //  - off: Disable tab completions.
  //  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
  "editor.tabCompletion": "off",

  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 4,

  // Overrides editor syntax colors and font style from the currently selected color theme.
  "editor.tokenColorCustomizations": {},

  // Remove trailing auto inserted whitespace.
  "editor.trimAutoWhitespace": true,

  // Controls whether clicking on the empty content after a folded line will unfold the line.
  "editor.unfoldOnClickAfterEndOfLine": false,

  // Defines allowed characters that are not being highlighted.
  "editor.unicodeHighlight.allowedCharacters": {},

  // Unicode characters that are common in allowed locales are not being highlighted.
  "editor.unicodeHighlight.allowedLocales": {
    "_os": true,
    "_vscode": true
  },

  // Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.
  "editor.unicodeHighlight.ambiguousCharacters": true,

  // Controls whether characters in comments should also be subject to unicode highlighting.
  "editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",

  // Controls whether characters in strings should also be subject to unicode highlighting.
  "editor.unicodeHighlight.includeStrings": true,

  // Controls whether characters that just reserve space or have no width at all are highlighted.
  "editor.unicodeHighlight.invisibleCharacters": true,

  // Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.
  "editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",

  // Remove unusual line terminators that might cause problems.
  //  - auto: Unusual line terminators are automatically removed.
  //  - off: Unusual line terminators are ignored.
  //  - prompt: Unusual line terminators prompt to be removed.
  "editor.unusualLineTerminators": "prompt",

  // Inserting and deleting whitespace follows tab stops.
  "editor.useTabStops": true,

  // Controls whether completions should be computed based on words in the document.
  "editor.wordBasedSuggestions": true,

  // Controls from which documents word based completions are computed.
  //  - currentDocument: Only suggest words from the active document.
  //  - matchingDocuments: Suggest words from all open documents of the same language.
  //  - allDocuments: Suggest words from all open documents.
  "editor.wordBasedSuggestionsMode": "matchingDocuments",

  // Characters that will be used as word separators when doing word related navigations or operations.
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

  // Controls how lines should wrap.
  //  - off: Lines will never wrap.
  //  - on: Lines will wrap at the viewport width.
  //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
  //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
  "editor.wordWrap": "off",

  // Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
  "editor.wordWrapColumn": 80,

  // Controls the indentation of wrapped lines.
  //  - none: No indentation. Wrapped lines begin at column 1.
  //  - same: Wrapped lines get the same indentation as the parent.
  //  - indent: Wrapped lines get +1 indentation toward the parent.
  //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
  "editor.wrappingIndent": "same",

  // Controls the algorithm that computes wrapping points.
  //  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
  //  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
  "editor.wrappingStrategy": "simple"

},
{
  // Controls whether inline actions are always visible in the Source Control view.
  "scm.alwaysShowActions": false,

  // Controls whether repositories should always be visible in the Source Control view.
  "scm.alwaysShowRepositories": false,

  // Controls whether the Source Control view should automatically reveal and select files when opening them.
  "scm.autoReveal": true,

  // Controls the count badge on the Source Control icon on the Activity Bar.
  //  - all: Show the sum of all Source Control Provider count badges.
  //  - focused: Show the count badge of the focused Source Control Provider.
  //  - off: Disable the Source Control count badge.
  "scm.countBadge": "all",

  // Controls the default Source Control repository view mode.
  //  - tree: Show the repository changes as a tree.
  //  - list: Show the repository changes as a list.
  "scm.defaultViewMode": "list",

  // Controls the default Source Control repository changes sort order when viewed as a list.
  //  - name: Sort the repository changes by file name.
  //  - path: Sort the repository changes by path.
  //  - status: Sort the repository changes by Source Control status.
  "scm.defaultViewSortKey": "path",

  // Controls diff decorations in the editor.
  //  - all: Show the diff decorations in all available locations.
  //  - gutter: Show the diff decorations only in the editor gutter.
  //  - overview: Show the diff decorations only in the overview ruler.
  //  - minimap: Show the diff decorations only in the minimap.
  //  - none: Do not show the diff decorations.
  "scm.diffDecorations": "all",

  // Controls the behavior of Source Control diff gutter decorations.
  //  - diff: Show the inline diff peek view on click.
  //  - none: Do nothing.
  "scm.diffDecorationsGutterAction": "diff",

  // Controls whether a pattern is used for the diff decorations in gutter.
  "scm.diffDecorationsGutterPattern": {
    "added": false,
    "modified": true
  },

  // Controls the visibility of the Source Control diff decorator in the gutter.
  //  - always: Show the diff decorator in the gutter at all times.
  //  - hover: Show the diff decorator in the gutter only on hover.
  "scm.diffDecorationsGutterVisibility": "always",

  // Controls the width(px) of diff decorations in gutter (added & modified).
  "scm.diffDecorationsGutterWidth": 3,

  // Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations.
  //  - true: Ignore leading and trailing whitespace.
  //  - false: Do not ignore leading and trailing whitespace.
  //  - inherit: Inherit from `diffEditor.ignoreTrimWhitespace`.
  "scm.diffDecorationsIgnoreTrimWhitespace": "false",

  // Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
  "scm.inputFontFamily": "default",

  // Controls the font size for the input message in pixels.
  "scm.inputFontSize": 13,

  // Controls the count badges on Source Control Provider headers. These headers only appear when there is more than one provider.
  //  - hidden: Hide Source Control Provider count badges.
  //  - auto: Only show count badge for Source Control Provider when non-zero.
  //  - visible: Show Source Control Provider count badges.
  "scm.providerCountBadge": "hidden",

  // Controls the sort order of the repositories in the source control repositories view.
  //  - discovery time: Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected.
  //  - name: Repositories in the Source Control Repositories and Source Control views are sorted by repository name.
  //  - path: Repositories in the Source Control Repositories and Source Control views are sorted by repository path.
  "scm.repositories.sortOrder": "discovery time",

  // Controls how many repositories are visible in the Source Control Repositories section. Set to `0` to be able to manually resize the view.
  "scm.repositories.visible": 10,

  // Controls whether an action button can be shown in the Source Control view.
  "scm.showActionButton": true

},
{
  // Controls when the restricted mode banner is shown.
  //  - always: Show the banner every time an untrusted workspace is open.
  //  - untilDismissed: Show the banner when an untrusted workspace is opened until dismissed.
  //  - never: Do not show the banner when an untrusted workspace is open.
  "security.workspace.trust.banner": "untilDismissed",

  // Controls whether or not the empty window is trusted by default within VS Code. When used with `security.workspace.trust.untrustedFiles`, you can enable the full functionality of VS Code without prompting in an empty window.
  "security.workspace.trust.emptyWindow": true,

  // Controls whether or not workspace trust is enabled within VS Code.
  "security.workspace.trust.enabled": true,

  // Controls when the startup prompt to trust a workspace is shown.
  //  - always: Ask for trust every time an untrusted workspace is opened.
  //  - once: Ask for trust the first time an untrusted workspace is opened.
  //  - never: Do not ask for trust when an untrusted workspace is opened.
  "security.workspace.trust.startupPrompt": "once",

  // Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `security.workspace.trust.emptyWindow`.
  //  - prompt: Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again.
  //  - open: Always allow untrusted files to be introduced to a trusted workspace without prompting.
  //  - newWindow: Always open untrusted files in a separate window in restricted mode without prompting.
  "security.workspace.trust.untrustedFiles": "prompt"

},
{
  // Controls the behavior of clicking an activity bar icon in the workbench.
  //  - toggle: Hide the side bar if the clicked item is already visible.
  //  - focus: Focus side bar if the clicked item is already visible.
  "workbench.activityBar.iconClickBehavior": "toggle",

  // Controls the visibility of the activity bar in the workbench.
  "workbench.activityBar.visible": true,

  // Overrides colors from the currently selected color theme.
  "workbench.colorCustomizations": {},

  // Specifies the color theme used in the workbench.
  "workbench.colorTheme": "Default Dark+",

  // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
  "workbench.commandPalette.history": 50,

  // Controls whether the last typed input to the command palette should be restored when opening it the next time.
  "workbench.commandPalette.preserveInput": false,

  // If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by user gesture (e.g. drag and drop), but not by default. Consequently the active editor in a locked group is less likely to be replaced accidentally with a different editor.
  "workbench.editor.autoLockGroups": {
    "default": false,
    "mergeEditor.Input": false,
    "imagePreview.previewEditor": false,
    "vscode.markdown.preview.editor": false,
    "jsProfileVisualizer.cpuprofile.table": false,
    "jsProfileVisualizer.heapprofile.table": false,
    "gc-excelviewer-csv-editor": false,
    "gc-excelviewer-excel-editor": false,
    "terminalEditor": true,
    "workbench.editorinputs.searchEditorInput": false,
    "vscode-interactive-input": false,
    "interactive": false,
    "workbench.editorinputs.sidebysideEditorInput": false,
    "jupyter-notebook": false,
    "sql-notebook": false,
    "mainThreadWebview-markdown.preview": false
  },

  // Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
  "workbench.editor.centeredLayoutAutoResize": true,

  // Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
  "workbench.editor.closeEmptyGroups": true,

  // Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.
  "workbench.editor.closeOnFileDelete": false,

  // Controls whether editor file decorations should use badges.
  "workbench.editor.decorations.badges": true,

  // Controls whether editor file decorations should use colors.
  "workbench.editor.decorations.colors": true,

  // The default editor for files detected as binary. If undefined the user will be presented with a picker.
  "workbench.editor.defaultBinaryEditor": "",

  // Controls whether opened editors show as preview editors. Preview editors do not stay open, are reused until explicitly set to be kept open (e.g. via double click or editing), and show file names in italics.
  "workbench.editor.enablePreview": true,

  // Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
  "workbench.editor.enablePreviewFromCodeNavigation": false,

  // Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
  "workbench.editor.enablePreviewFromQuickOpen": false,

  // Controls whether tabs are closed in most recently used order or from left to right.
  "workbench.editor.focusRecentEditorAfterClose": true,

  // Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `workbench.editor.showTabs` is disabled.
  "workbench.editor.highlightModifiedTabs": false,

  // Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs.
  "workbench.editor.historyBasedLanguageDetection": true,

  // Controls the format of the label for an editor.
  //  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
  //  - short: Show the name of the file followed by its directory name.
  //  - medium: Show the name of the file followed by its path relative to the workspace folder.
  //  - long: Show the name of the file followed by its absolute path.
  "workbench.editor.labelFormat": "default",

  // Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
  "workbench.editor.languageDetection": true,

  // When enabled, shows a status bar quick fix when the editor language doesn't match detected content language.
  "workbench.editor.languageDetectionHints": {
    "untitledEditors": true,
    "notebookEditors": true
  },

  // Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
  "workbench.editor.limit.enabled": false,

  // Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit.
  "workbench.editor.limit.excludeDirty": false,

  // Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
  "workbench.editor.limit.perEditorGroup": false,

  // Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
  "workbench.editor.limit.value": 10,

  // Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'.
  "workbench.editor.mouseBackForwardToNavigate": true,

  // Controls the scope of history navigation in editors for commands such as 'Go Back' and 'Go Forward'.
  //  - default: Navigate across all opened editors and editor groups.
  //  - editorGroup: Navigate only in editors of the active editor group.
  //  - editor: Navigate only in the active editor.
  "workbench.editor.navigationScope": "default",

  // Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
  "workbench.editor.openPositioning": "right",

  // Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
  "workbench.editor.openSideBySideDirection": "right",

  // Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is disabled.
  //  - normal: A pinned tab inherits the look of non pinned tabs.
  //  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
  //  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
  "workbench.editor.pinnedTabSizing": "normal",

  // When enabled, a language detection model that takes into account editor history will be given higher precedence.
  "workbench.editor.preferHistoryBasedLanguageDetection": true,

  // Restores the last editor view state (e.g. scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `workbench.editor.sharedViewState` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.
  "workbench.editor.restoreViewState": true,

  // Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
  "workbench.editor.revealIfOpen": false,

  // Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is disabled.
  "workbench.editor.scrollToSwitchTabs": false,

  // Preserves the most recent editor view state (e.g. scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.
  "workbench.editor.sharedViewState": false,

  // Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
  "workbench.editor.showIcons": true,

  // Controls whether opened editors should show in tabs or not.
  "workbench.editor.showTabs": true,

  // Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
  //  - vertical: Editors are positioned from top to bottom.
  //  - horizontal: Editors are positioned from left to right.
  "workbench.editor.splitInGroupLayout": "horizontal",

  // Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
  "workbench.editor.splitOnDragAndDrop": true,

  // Controls the sizing of editor groups when splitting them.
  //  - distribute: Splits all the editor groups to equal parts.
  //  - split: Splits the active editor group to equal parts.
  "workbench.editor.splitSizing": "distribute",

  // Controls the position of the editor's tabs close buttons, or disables them when set to 'off'. This value is ignored when `workbench.editor.showTabs` is disabled.
  "workbench.editor.tabCloseButton": "right",

  // Controls the sizing of editor tabs. This value is ignored when `workbench.editor.showTabs` is disabled.
  //  - fit: Always keep tabs large enough to show the full editor label.
  //  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
  "workbench.editor.tabSizing": "fit",

  // Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
  //  - default: The default size.
  //  - large: Increases the size, so it can be grabbed more easily with the mouse.
  "workbench.editor.titleScrollbarSizing": "default",

  // Controls if the untitled text hint should be visible in the editor.
  "workbench.editor.untitled.hint": "text",

  // Controls the format of the label for an untitled editor.
  //  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
  //  - name: The name of the untitled file is not derived from the contents of the file.
  "workbench.editor.untitled.labelFormat": "content",

  // Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is disabled.
  "workbench.editor.wrapTabs": false,

  // Configure glob patterns to editors (e.g. `"*.hex": "hexEditor.hexEdit"`). These have precedence over the default behavior.
  "workbench.editorAssociations": {},

  // Fetches experiments to run from a Microsoft online service.
  "workbench.enableExperiments": true,

  // Controls whether to display cloud-enabled actions to store and resume uncommitted changes when switching between web, desktop, or devices.
  "workbench.experimental.editSessions.enabled": false,

  // This setting has been deprecated in favor of `workbench.layoutControl.enabled`
  // Controls whether the layout controls in the custom title bar is enabled via `window.titleBarStyle`.
  "workbench.experimental.layoutControl.enabled": false,

  // This setting has been deprecated in favor of `workbench.layoutControl.type`
  // Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.
  //  - menu: Shows a single button with a dropdown of layout options.
  //  - toggles: Shows several buttons for toggling the visibility of the panels and side bar.
  //  - both: Shows both the dropdown and toggle buttons.
  "workbench.experimental.layoutControl.type": "both",

  // Configure the opener to use for external URIs (http, https).
  "workbench.externalUriOpeners": {},

  // Controls font aliasing method in the workbench.
  //  - default: Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text.
  //  - antialiased: Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall.
  //  - none: Disables font smoothing. Text will show with jagged sharp edges.
  //  - auto: Applies `default` or `antialiased` automatically based on the DPI of displays.
  "workbench.fontAliasing": "default",

  // Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
  "workbench.hover.delay": 1500,

  // Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
  //  - null: No file icons
  //  - vs-minimal
  //  - vs-seti
  //  - ayu
  //  - vscode-icons
  "workbench.iconTheme": "vs-seti",

  // Controls whether the layout controls in the custom title bar is enabled via `window.titleBarStyle`.
  "workbench.layoutControl.enabled": true,

  // Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.
  //  - menu: Shows a single button with a dropdown of layout options.
  //  - toggles: Shows several buttons for toggling the visibility of the panels and side bar.
  //  - both: Shows both the dropdown and toggle buttons.
  "workbench.layoutControl.type": "both",

  // Controls the default find mode for lists and trees in the workbench.
  //  - highlight: Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.
  //  - filter: Filter elements when searching.
  "workbench.list.defaultFindMode": "highlight",

  // Scrolling speed multiplier when pressing `Alt`.
  "workbench.list.fastScrollSensitivity": 5,

  // Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
  "workbench.list.horizontalScrolling": false,

  // Please use 'workbench.list.defaultFindMode' instead.
  // Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
  //  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
  //  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
  //  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
  "workbench.list.keyboardNavigation": "highlight",

  // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
  "workbench.list.mouseWheelScrollSensitivity": 1,

  // The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
  //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
  //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
  "workbench.list.multiSelectModifier": "ctrlCmd",

  // Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
  "workbench.list.openMode": "singleClick",

  // Controls whether lists and trees have smooth scrolling.
  "workbench.list.smoothScrolling": false,

  // Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.enabled": true,

  // Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files from the local file history. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.exclude": {},

  // Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded.
  "workbench.localHistory.maxFileEntries": 50,

  // Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.maxFileSize": 256,

  // Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.mergeWindow": 10,

  // Controls the default location of the panel (terminal, debug console, output, problems) in a new workspace. It can either show at the bottom, right, or left of the editor area.
  "workbench.panel.defaultLocation": "bottom",

  // Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
  //  - always: Always maximize the panel when opening it.
  //  - never: Never maximize the panel when opening it. The panel will open un-maximized.
  //  - preserve: Open the panel to the state that it was in, before it was closed.
  "workbench.panel.opensMaximized": "preserve",

  // Specifies the preferred color theme for dark OS appearance when `window.autoDetectColorScheme` is enabled.
  "workbench.preferredDarkColorTheme": "Default Dark+",

  // Specifies the preferred color theme used in high contrast dark mode when `window.autoDetectHighContrast` is enabled.
  "workbench.preferredHighContrastColorTheme": "Default High Contrast",

  // Specifies the preferred color theme used in high contrast light mode when `window.autoDetectHighContrast` is enabled.
  "workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",

  // Specifies the preferred color theme for light OS appearance when `window.autoDetectColorScheme` is enabled.
  "workbench.preferredLightColorTheme": "Default Light+",

  // Specifies the product icon theme used.
  //  - Default: Default
  "workbench.productIconTheme": "Default",

  // Controls whether Quick Open should close automatically once it loses focus.
  "workbench.quickOpen.closeOnFocusLost": true,

  // Controls whether the last typed input to Quick Open should be restored when opening it the next time.
  "workbench.quickOpen.preserveInput": false,

  // Controls whether the workbench should render with fewer animations.
  //  - on: Always render with reduced motion.
  //  - off: Do not render with reduced motion
  //  - auto: Render with reduced motion based on OS configuration.
  "workbench.reduceMotion": "auto",

  // Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
  "workbench.sash.hoverDelay": 300,

  // Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
  "workbench.sash.size": 4,

  // Determines which settings editor to use by default.
  //  - ui: Use the settings UI editor.
  //  - json: Use the JSON file editor.
  "workbench.settings.editor": "ui",

  // Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
  "workbench.settings.enableNaturalLanguageSearch": true,

  // Controls whether opening keybinding settings also opens an editor showing all default keybindings.
  "workbench.settings.openDefaultKeybindings": false,

  // Controls whether opening settings also opens an editor showing all default settings.
  "workbench.settings.openDefaultSettings": false,

  // Controls the behavior of the settings editor Table of Contents while searching.
  //  - hide: Hide the Table of Contents while searching.
  //  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
  "workbench.settings.settingsSearchTocBehavior": "filter",

  // Controls whether to use the split JSON editor when editing settings as JSON.
  "workbench.settings.useSplitJSON": false,

  // Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench.
  "workbench.sideBar.location": "left",

  // Controls which editor is shown at startup, if none are restored from the previous session.
  //  - none: Start without an editor.
  //  - welcomePage: Open the Welcome page, with content to aid in getting started with VS Code and extensions.
  //  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.
  //  - newUntitledFile: Open a new untitled file (only applies when opening an empty window).
  //  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
  "workbench.startupEditor": "welcomePage",

  // Controls the visibility of the status bar at the bottom of the workbench.
  "workbench.statusBar.visible": true,

  // When enabled, will show the watermark tips when no editor is open.
  "workbench.tips.enabled": true,

  // Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
  "workbench.tree.expandMode": "singleClick",

  // Controls tree indentation in pixels.
  "workbench.tree.indent": 8,

  // Controls whether the tree should render indent guides.
  "workbench.tree.renderIndentGuides": "onHover",

  // When enabled, trusted domain prompts will appear when opening links in trusted workspaces.
  "workbench.trustedDomains.promptInTrustedWorkspace": false,

  // Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
  "workbench.view.alwaysShowHeaderActions": false,

  // When enabled, the get started page has additional links to video tutorials.
  "workbench.welcomePage.experimental.videoTutorials": "off",

  // Deprecated, use the global `workbench.reduceMotion`.
  // When enabled, reduce motion in welcome page.
  "workbench.welcomePage.preferReducedMotion": false,

  // When enabled, an extension's walkthrough will open upon install of the extension.
  "workbench.welcomePage.walkthroughs.openOnInstall": true

},
{
  // If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at `workbench.preferredDarkColorTheme#` is used, for light `#workbench.preferredLightColorTheme`.
  "window.autoDetectColorScheme": false,

  // If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `workbench.preferredHighContrastColorTheme#` and `#workbench.preferredHighContrastLightColorTheme`
  "window.autoDetectHighContrast": true,

  // If enabled, clicking on an inactive window will both activate the window and trigger the element under the mouse if it is clickable. If disabled, clicking anywhere on an inactive window will activate it only and a second click is required on the element.
  "window.clickThroughInactive": true,

  // Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
  "window.closeWhenEmpty": false,

  // Show command launcher together with the window title. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
  "window.commandCenter": false,

  // Controls whether to show a confirmation dialog before closing the window or quitting the application.
  //  - always: Always ask for confirmation.
  //  - keyboardOnly: Only ask for confirmation if a keybinding was used.
  //  - never: Never explicitly ask for confirmation.
  "window.confirmBeforeClose": "never",

  // Adjust the appearance of dialog windows.
  "window.dialogStyle": "native",

  // If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
  "window.doubleClickIconToClose": false,

  // Experimental: When enabled, the window will have sandbox mode enabled via Electron API.
  "window.experimental.useSandbox": false,

  // Controls if native full-screen should be used on macOS. Disable this option to prevent macOS from creating a new space when going full-screen.
  "window.nativeFullScreen": true,

  // Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured.
  "window.nativeTabs": false,

  // Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
  //  - default: Open new windows in the center of the screen.
  //  - inherit: Open new windows with same dimension as last active one.
  //  - offset: Open new windows with same dimension as last active one with an offset position.
  //  - maximized: Open new windows maximized.
  //  - fullscreen: Open new windows in full screen mode.
  "window.newWindowDimensions": "default",

  // Controls whether files should open in a new window when using a command line or file dialog.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Files will open in a new window.
  //  - off: Files will open in the window with the files' folder open or the last active window.
  //  - default: Files will open in the window with the files' folder open or the last active window unless opened via the Dock or from Finder.
  "window.openFilesInNewWindow": "off",

  // Controls whether folders should open in a new window or replace the last active window.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Folders will open in a new window.
  //  - off: Folders will replace the last active window.
  //  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
  "window.openFoldersInNewWindow": "default",

  // Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
  // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
  //  - on: Open a new empty window.
  //  - off: Focus the last active running instance.
  "window.openWithoutArgumentsInNewWindow": "off",

  // Controls whether a window should restore to full screen mode if it was exited in full screen mode.
  "window.restoreFullscreen": false,

  // Controls how windows are being reopened after starting for the first time. This setting has no effect when the application is already running.
  //  - preserve: Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows.
  //  - all: Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line).
  //  - folders: Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line).
  //  - one: Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line).
  //  - none: Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.
  "window.restoreWindows": "all",

  // Controls the window title based on the active editor. Variables are substituted based on the context:
  // - `${activeEditorShort}`: the file name (e.g. myFile.txt).
  // - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
  // - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
  // - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
  // - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
  // - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
  // - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
  // - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
  // - `${rootName}`: name of the opened workspace or folder (e.g. myFolder or myWorkspace).
  // - `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).
  // - `${appName}`: e.g. VS Code.
  // - `${remoteName}`: e.g. SSH
  // - `${dirty}`: an indicator for when the active editor has unsaved changes.
  // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
  "window.title": "${activeEditorShort}${separator}${rootName}",

  // Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.
  "window.titleBarStyle": "custom",

  // Separator used by `window.title`.
  "window.titleSeparator": " — ",

  // Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
  "window.zoomLevel": 0

},
{
  // Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
  "files.associations": {},

  // When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `files.encoding` is respected.
  "files.autoGuessEncoding": false,

  // Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.
  //  - off: An editor with changes is never automatically saved.
  //  - afterDelay: An editor with changes is automatically saved after the configured `files.autoSaveDelay`.
  //  - onFocusChange: An editor with changes is automatically saved when the editor loses focus.
  //  - onWindowChange: An editor with changes is automatically saved when the window loses focus.
  "files.autoSave": "off",

  // Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
  "files.autoSaveDelay": 1000,

  // The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any.
  "files.defaultLanguage": "",

  // Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
  "files.enableTrash": true,

  // The default character set encoding to use when reading and writing files. This setting can also be configured per language.
  //  - utf8: UTF-8
  //  - utf8bom: UTF-8 with BOM
  //  - utf16le: UTF-16 LE
  //  - utf16be: UTF-16 BE
  //  - windows1252: Western (Windows 1252)
  //  - iso88591: Western (ISO 8859-1)
  //  - iso88593: Western (ISO 8859-3)
  //  - iso885915: Western (ISO 8859-15)
  //  - macroman: Western (Mac Roman)
  //  - cp437: DOS (CP 437)
  //  - windows1256: Arabic (Windows 1256)
  //  - iso88596: Arabic (ISO 8859-6)
  //  - windows1257: Baltic (Windows 1257)
  //  - iso88594: Baltic (ISO 8859-4)
  //  - iso885914: Celtic (ISO 8859-14)
  //  - windows1250: Central European (Windows 1250)
  //  - iso88592: Central European (ISO 8859-2)
  //  - cp852: Central European (CP 852)
  //  - windows1251: Cyrillic (Windows 1251)
  //  - cp866: Cyrillic (CP 866)
  //  - iso88595: Cyrillic (ISO 8859-5)
  //  - koi8r: Cyrillic (KOI8-R)
  //  - koi8u: Cyrillic (KOI8-U)
  //  - iso885913: Estonian (ISO 8859-13)
  //  - windows1253: Greek (Windows 1253)
  //  - iso88597: Greek (ISO 8859-7)
  //  - windows1255: Hebrew (Windows 1255)
  //  - iso88598: Hebrew (ISO 8859-8)
  //  - iso885910: Nordic (ISO 8859-10)
  //  - iso885916: Romanian (ISO 8859-16)
  //  - windows1254: Turkish (Windows 1254)
  //  - iso88599: Turkish (ISO 8859-9)
  //  - windows1258: Vietnamese (Windows 1258)
  //  - gbk: Simplified Chinese (GBK)
  //  - gb18030: Simplified Chinese (GB18030)
  //  - cp950: Traditional Chinese (Big5)
  //  - big5hkscs: Traditional Chinese (Big5-HKSCS)
  //  - shiftjis: Japanese (Shift JIS)
  //  - eucjp: Japanese (EUC-JP)
  //  - euckr: Korean (EUC-KR)
  //  - windows874: Thai (Windows 874)
  //  - iso885911: Latin/Thai (ISO 8859-11)
  //  - koi8ru: Cyrillic (KOI8-RU)
  //  - koi8t: Tajik (KOI8-T)
  //  - gb2312: Simplified Chinese (GB 2312)
  //  - cp865: Nordic DOS (CP 865)
  //  - cp850: Western European DOS (CP 850)
  "files.encoding": "utf8",

  // The default end of line character.
  //  - \n: LF
  //  - \r\n: CRLF
  //  - auto: Uses operating system specific end of line character.
  "files.eol": "auto",

  // Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders. For example, the file explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude` setting to define search-specific excludes.
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true,
    "**/Thumbs.db": true
  },

  // Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
  //  - off: Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.
  //  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
  //  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
  "files.hotExit": "onExit",

  // When enabled, insert a final new line at the end of the file when saving it.
  "files.insertFinalNewline": false,

  // Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.
  "files.maxMemoryForLargeFilesMB": 4096,

  // Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
  "files.participants.timeout": 60000,

  // Controls if files that were part of a refactoring are saved automatically
  "files.refactoring.autoSave": true,

  // Restore the undo stack when a file is reopened.
  "files.restoreUndoStack": true,

  // A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
  //  - askUser: Will refuse to save and ask for resolving the save conflict manually.
  //  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
  "files.saveConflictResolution": "askUser",

  // Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled.
  "files.simpleDialog.enable": false,

  // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
  "files.trimFinalNewlines": false,

  // When enabled, will trim trailing whitespace when saving a file.
  "files.trimTrailingWhitespace": false,

  // Configure paths or glob patterns to exclude from file watching. Paths or basic glob patterns that are relative (for example `build/output` or `*.js`) will be resolved to an absolute path using the currently opened workspace. Complex glob patterns must match on absolute paths (i.e. prefix with `**/` or the full path and suffix with `/**` to match files within a path) to match properly (for example `**/build/output/**` or `/Users/name/workspaces/project/build/output/**`). When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/*/**": true,
    "**/.hg/store/**": true
  },

  // Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.
  "files.watcherInclude": []

},
{
  // Controls the font size (in pixels) of the screencast mode keyboard.
  "screencastMode.fontSize": 56,

  // Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
  "screencastMode.keyboardOverlayTimeout": 800,

  // Controls what is displayed in the keyboard overlay when showing shortcuts.
  //  - keys: Keys.
  //  - command: Command title.
  //  - commandWithGroup: Command title prefixed by its group.
  //  - commandAndKeys: Command title and keys.
  //  - commandWithGroupAndKeys: Command title and keys, with the command prefixed by its group.
  "screencastMode.keyboardShortcutsFormat": "commandAndKeys",

  // Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.
  "screencastMode.mouseIndicatorColor": "#FF0000",

  // Controls the size (in pixels) of the mouse indicator in screencast mode.
  "screencastMode.mouseIndicatorSize": 20,

  // Only show keyboard shortcuts in screencast mode.
  "screencastMode.onlyKeyboardShortcuts": false,

  // Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
  "screencastMode.verticalOffset": 20

},
{
  // Controls whether turning on Zen Mode also centers the layout.
  "zenMode.centerLayout": true,

  // Controls whether turning on Zen Mode also puts the workbench into full screen mode.
  "zenMode.fullScreen": true,

  // Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.
  "zenMode.hideActivityBar": true,

  // Controls whether turning on Zen Mode also hides the editor line numbers.
  "zenMode.hideLineNumbers": true,

  // Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
  "zenMode.hideStatusBar": true,

  // Controls whether turning on Zen Mode also hides workbench tabs.
  "zenMode.hideTabs": true,

  // Controls whether a window should restore to zen mode if it was exited in zen mode.
  "zenMode.restore": true,

  // Controls whether notifications do not disturb mode should be enabled while in zen mode. If true, only error notifications will pop out.
  "zenMode.silentNotifications": true

},
{
  // Controls whether the explorer should automatically reveal and select files when opening them.
  //  - true: Files will be revealed and selected.
  //  - false: Files will not be revealed and selected.
  //  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
  "explorer.autoReveal": true,

  // Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
  "explorer.compactFolders": true,

  // Controls whether the explorer should ask for confirmation when deleting a file via the trash.
  "explorer.confirmDelete": true,

  // Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
  "explorer.confirmDragAndDrop": true,

  // Controls whether the explorer should ask for confirmation when undoing.
  //  - verbose: Explorer will prompt before all undo operations.
  //  - default: Explorer will prompt before destructive undo operations.
  //  - light: Explorer will not prompt before undo operations when focused.
  "explorer.confirmUndo": "default",

  // The path separation character used when copying relative file paths.
  //  - /: Use slash as path separation character.
  //  - \: Use backslash as path separation character.
  //  - auto: Uses operating system specific path separation character.
  "explorer.copyRelativePathSeparator": "auto",

  // Controls whether file decorations should use badges.
  "explorer.decorations.badges": true,

  // Controls whether file decorations should use colors.
  "explorer.decorations.colors": true,

  // Controls whether the explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the explorer.
  "explorer.enableDragAndDrop": true,

  // Controls whether the explorer should support undoing file and folder operations.
  "explorer.enableUndo": true,

  // Controls whether entries in .gitignore should be parsed and excluded from the explorer. Similar to `files.exclude`.
  "explorer.excludeGitIgnore": false,

  // Controls whether the explorer should expand multi-root workspaces containing only one folder during initialization
  "explorer.expandSingleFolderWorkspaces": true,

  // Controls whether file nesting is enabled in the explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file.
  "explorer.fileNesting.enabled": false,

  // Controls whether file nests are automatically expanded. `explorer.fileNesting.enabled` must be set for this to take effect.
  "explorer.fileNesting.expand": true,

  // Controls nesting of files in the explorer. Each __Item__ represents a parent pattern and may contain a single `*` character that matches any string. Each __Value__ represents a comma separated list of the child patterns that should be shown nested under a given parent. Child patterns may contain several special tokens:
  // - `${capture}`: Matches the resolved value of the `*` from the parent pattern
  // - `${basename}`: Matches the parent file's basename, the `file` in `file.ts`
  // - `${extname}`: Matches the parent file's extension, the `ts` in `file.ts`
  // - `${dirname}`: Matches the parent file's directory name, the `src` in `src/file.ts`
  // - `*`:  Matches any string, may only be used once per child pattern
  "explorer.fileNesting.patterns": {
    "*.ts": "${capture}.js",
    "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
    "*.jsx": "${capture}.js",
    "*.tsx": "${capture}.ts",
    "tsconfig.json": "tsconfig.*.json",
    "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml"
  },

  // Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste.
  //  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number
  //  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number
  "explorer.incrementalNaming": "simple",

  // The minimum number of editor slots shown in the Open Editors pane. If set to 0 the Open Editors pane will dynamically resize based on the number of editors.
  "explorer.openEditors.minVisible": 0,

  // Controls the sorting order of editors in the Open Editors pane.
  //  - editorOrder: Editors are ordered in the same order editor tabs are shown.
  //  - alphabetical: Editors are ordered alphabetically by tab name inside each editor group.
  //  - fullPath: Editors are ordered alphabetically by full path inside each editor group.
  "explorer.openEditors.sortOrder": "editorOrder",

  // The maximum number of editors shown in the Open Editors pane. Setting this to 0 hides the Open Editors pane.
  "explorer.openEditors.visible": 9,

  // Controls the property-based sorting of files and folders in the explorer. When `explorer.fileNesting.enabled` is enabled, also controls sorting of nested files.
  //  - default: Files and folders are sorted by their names. Folders are displayed before files.
  //  - mixed: Files and folders are sorted by their names. Files are interwoven with folders.
  //  - filesFirst: Files and folders are sorted by their names. Files are displayed before folders.
  //  - type: Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.
  //  - modified: Files and folders are sorted by last modified date in descending order. Folders are displayed before  files.
  //  - foldersNestsFiles: Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.
  "explorer.sortOrder": "default",

  // Controls the lexicographic sorting of file and folder names in the Explorer.
  //  - default: Uppercase and lowercase names are mixed together.
  //  - upper: Uppercase names are grouped together before lowercase names.
  //  - lower: Lowercase names are grouped together before uppercase names.
  //  - unicode: Names are sorted in unicode order.
  "explorer.sortOrderLexicographicOptions": "default"

},
{
  // Controls the positioning of the actionbar on rows in the search view.
  //  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
  //  - right: Always position the actionbar to the right.
  "search.actionsPosition": "right",

  // Controls whether the search results will be collapsed or expanded.
  //  - auto: Files with less than 10 results are expanded. Others are collapsed.
  //  - alwaysCollapse
  //  - alwaysExpand
  "search.collapseResults": "alwaysExpand",

  // Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `files.exclude` setting.
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true,
    "**/*.code-search": true
  },

  // Controls whether to follow symlinks while searching.
  "search.followSymlinks": true,

  // Controls whether the search view should read or modify the shared find clipboard on macOS.
  "search.globalFindClipboard": false,

  // This setting is deprecated. You can drag the search icon to a new location instead.
  // Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
  "search.location": "sidebar",

  // The search cache is kept in the extension host which never shuts down, so this setting is no longer needed.
  // When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
  "search.maintainFileSearchCache": false,

  // Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.
  "search.maxResults": 20000,

  // Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the search view, or in a search editor
  //  - view: Search in the search view, either in the panel or side bars.
  //  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
  //  - newEditor: Search in a new search editor.
  "search.mode": "view",

  // Controls sorting order of editor history in quick open when filtering.
  //  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
  //  - recency: History entries are sorted by recency. More recently opened entries appear first.
  "search.quickOpen.history.filterSortOrder": "default",

  // Whether to include results from recently opened files in the file results for Quick Open.
  "search.quickOpen.includeHistory": true,

  // Whether to include results from a global symbol search in the file results for Quick Open.
  "search.quickOpen.includeSymbols": false,

  // The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
  "search.searchEditor.defaultNumberOfContextLines": 1,

  // Configure effect of double clicking a result in a search editor.
  //  - selectWord: Double clicking selects the word under the cursor.
  //  - goToLocation: Double clicking opens the result in the active editor group.
  //  - openLocationToSide: Double clicking opens the result in the editor group to the side, creating one if it does not yet exist.
  "search.searchEditor.doubleClickBehaviour": "goToLocation",

  // When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
  "search.searchEditor.reusePriorSearchConfiguration": false,

  // Search all files as you type.
  "search.searchOnType": true,

  // When `search.searchOnType#` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `#search.searchOnType` is disabled.
  "search.searchOnTypeDebouncePeriod": 300,

  // Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
  "search.seedOnFocus": false,

  // Enable seeding search from the word nearest the cursor when the active editor has no selection.
  "search.seedWithNearestWord": false,

  // Controls whether to show line numbers for search results.
  "search.showLineNumbers": false,

  // Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
  "search.smartCase": false,

  // Controls sorting order of search results.
  //  - default: Results are sorted by folder and file names, in alphabetical order.
  //  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
  //  - type: Results are sorted by file extensions, in alphabetical order.
  //  - modified: Results are sorted by file last modified date, in descending order.
  //  - countDescending: Results are sorted by count per file, in descending order.
  //  - countAscending: Results are sorted by count per file, in ascending order.
  "search.sortOrder": "default",

  // Controls whether to use global `.gitignore` and `.ignore` files when searching for files. Requires `search.useIgnoreFiles` to be enabled.
  "search.useGlobalIgnoreFiles": false,

  // Controls whether to use `.gitignore` and `.ignore` files when searching for files.
  "search.useIgnoreFiles": true,

  // Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `search.useIgnoreFiles` to be enabled.
  "search.useParentIgnoreFiles": false,

  // Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
  // Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
  "search.usePCRE2": false,

  // Controls whether to open Replace Preview when selecting or replacing a match.
  "search.useReplacePreview": true,

  // Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
  // This setting is deprecated and now falls back on "search.usePCRE2".
  "search.useRipgrep": true

},
{
  // The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.
  "http.proxy": "",

  // The value to send as the `Proxy-Authorization` header for every network request.
  "http.proxyAuthorization": null,

  // Controls whether the proxy server certificate should be verified against the list of supplied CAs.
  "http.proxyStrictSSL": true,

  // Use the proxy support for extensions.
  //  - off: Disable proxy support for extensions.
  //  - on: Enable proxy support for extensions.
  //  - fallback: Enable proxy support for extensions, fall back to request options, when no proxy found.
  //  - override: Enable proxy support for extensions, override request options.
  "http.proxySupport": "override",

  // Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)
  "http.systemCertificates": true

},
{
  // Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.
  "keyboard.dispatch": "code",

  // Enables the macOS touchbar buttons on the keyboard if available.
  "keyboard.touchbar.enabled": true,

  // A set of identifiers for entries in the touchbar that should not show up (for example `workbench.action.navigateBack`).
  "keyboard.touchbar.ignored": []

},
{
  // This setting is deprecated, please use 'update.mode' instead.
  // Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
  "update.channel": "default",

  // Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
  //  - none: Disable updates.
  //  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
  //  - start: Check for updates only on startup. Disable automatic background update checks.
  //  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
  "update.mode": "default",

  // Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
  "update.showReleaseNotes": true

},
{
  // This setting is deprecated in favor of `comments.openView`.
  // Controls when the comments panel should open.
  "comments.openPanel": "openOnSessionStartWithComments",

  // Controls when the comments view should open.
  //  - never: The comments view will never be opened.
  //  - file: The comments view will open when a file with comments is active.
  //  - firstFile: If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active.
  "comments.openView": "firstFile",

  // Determines if relative time will be used in comment timestamps (ex. '1 day ago').
  "comments.useRelativeTime": true

},
{
  // Allow setting breakpoints in any file.
  "debug.allowBreakpointsEverywhere": false,

  // Automatically show values for variables that are lazily resolved by the debugger, such as getters.
  "debug.autoExpandLazyVariables": false,

  // Controls whether to confirm when the window closes if there are active debug sessions.
  //  - never: Never confirm.
  //  - always: Always confirm if there are debug sessions.
  "debug.confirmOnExit": "never",

  // Controls whether suggestions should be accepted on enter in the debug console. enter is also used to evaluate whatever is typed in the debug console.
  "debug.console.acceptSuggestionOnEnter": "off",

  // Controls if the debug console should be automatically closed when the debug session ends.
  "debug.console.closeOnEnd": false,

  // Controls if the debug console should collapse identical lines and show a number of occurrences with a badge.
  "debug.console.collapseIdenticalLines": true,

  // Controls the font family in the debug console.
  "debug.console.fontFamily": "default",

  // Controls the font size in pixels in the debug console.
  "debug.console.fontSize": 12,

  // Controls if the debug console should suggest previously typed input.
  "debug.console.historySuggestions": true,

  // Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.
  "debug.console.lineHeight": 0,

  // Controls if the lines should wrap in the debug console.
  "debug.console.wordWrap": true,

  // Show Source Code in Disassembly View.
  "debug.disassemblyView.showSourceCode": true,

  // Controls whether the editor should be focused when the debugger breaks.
  "debug.focusEditorOnBreak": true,

  // Controls whether the workbench window should be focused when the debugger breaks.
  "debug.focusWindowOnBreak": true,

  // Show variable values inline in editor while debugging.
  //  - on: Always show variable values inline in editor while debugging.
  //  - off: Never show variable values inline in editor while debugging.
  //  - auto: Show variable values inline in editor while debugging when the language supports inline value locations.
  "debug.inlineValues": "auto",

  // Controls when the internal debug console should open.
  "debug.internalConsoleOptions": "openOnFirstSessionStart",

  // Controls what to do when errors are encountered after running a preLaunchTask.
  //  - debugAnyway: Ignore task errors and start debugging.
  //  - showErrors: Show the Problems view and do not start debugging.
  //  - prompt: Prompt user.
  //  - abort: Cancel debugging.
  "debug.onTaskErrors": "prompt",

  // Controls when the debug view should open.
  "debug.openDebug": "openOnDebugBreak",

  // Automatically open the explorer view at the end of a debug session.
  "debug.openExplorerOnEnd": false,

  // Controls what editors to save before starting a debug session.
  //  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.
  //  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.
  //  - none: Don't save any editors before starting a debug session.
  "debug.saveBeforeStart": "allEditorsInActiveGroup",

  // Controls whether breakpoints should be shown in the overview ruler.
  "debug.showBreakpointsInOverviewRuler": false,

  // Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
  "debug.showInlineBreakpointCandidates": true,

  // Controls when the debug status bar should be visible.
  //  - never: Never show debug in status bar
  //  - always: Always show debug in status bar
  //  - onFirstSessionStart: Show debug in status bar only after debug was started for the first time
  "debug.showInStatusBar": "onFirstSessionStart",

  // Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
  "debug.showSubSessionsInToolBar": false,

  // Before starting a new debug session in an integrated or external terminal, clear the terminal.
  "debug.terminal.clearBeforeReusing": false,

  // Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.
  "debug.toolBarLocation": "floating",

  // Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
  "launch": {
    "configurations": [],
    "compounds": []
  }

},
{
  // Enable/disable autoclosing of HTML tags.
  "html.autoClosingTags": true,

  // Enable/disable auto creation of quotes for HTML attribute assignment. The type of quotes can be configured by `html.completion.attributeDefaultValue`.
  "html.autoCreateQuotes": true,

  // Controls the default value for attributes when completion is accepted.
  //  - doublequotes: Attribute value is set to "".
  //  - singlequotes: Attribute value is set to ''.
  //  - empty: Attribute value is not set.
  "html.completion.attributeDefaultValue": "doublequotes",

  // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
  //
  // VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
  //
  // The file paths are relative to workspace and only workspace folder settings are considered.
  "html.customData": [],

  // List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
  "html.format.contentUnformatted": "pre,code,textarea",

  // Enable/disable default HTML formatter.
  "html.format.enable": true,

  // List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
  "html.format.extraLiners": "head, body, /html",

  // Format and indent `{{#foo}}` and `{{/foo}}`.
  "html.format.indentHandlebars": false,

  // Indent `<head>` and `<body>` sections.
  "html.format.indentInnerHtml": false,

  // Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
  "html.format.maxPreserveNewLines": null,

  // Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
  "html.format.preserveNewLines": true,

  // Honor django, erb, handlebars and php templating language tags.
  "html.format.templating": false,

  // List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
  "html.format.unformatted": "wbr",

  // Keep text content together between this string.
  "html.format.unformattedContentDelimiter": "",

  // Wrap attributes.
  //  - auto: Wrap attributes only when line length is exceeded.
  //  - force: Wrap each attribute except first.
  //  - force-aligned: Wrap each attribute except first and keep aligned.
  //  - force-expand-multiline: Wrap each attribute.
  //  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
  //  - preserve: Preserve wrapping of attributes.
  //  - preserve-aligned: Preserve wrapping of attributes but align.
  "html.format.wrapAttributes": "auto",

  // Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `html.format.wrapAttributes` is set to 'aligned'.
  "html.format.wrapAttributesIndentSize": null,

  // Maximum amount of characters per line (0 = disable).
  "html.format.wrapLineLength": 120,

  // Show tag and attribute documentation in hover.
  "html.hover.documentation": true,

  // Show references to MDN in hover.
  "html.hover.references": true,

  // Deprecated in favor of `editor.linkedEditing`
  // Enable/disable mirroring cursor on matching HTML tag.
  "html.mirrorCursorOnMatchingTag": false,

  // Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
  "html.suggest.html5": true,

  // Traces the communication between VS Code and the HTML language server.
  "html.trace.server": "off",

  // Controls whether the built-in HTML language support validates embedded scripts.
  "html.validate.scripts": true,

  // Controls whether the built-in HTML language support validates embedded styles.
  "html.validate.styles": true

},
{
  // The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
  // Enables or disables color decorators
  "json.colorDecorators.enable": true,

  // Enable/disable default JSON formatter
  "json.format.enable": true,

  // Keep all existing new lines when formatting.
  "json.format.keepLines": false,

  // The maximum number of outline symbols and folding regions computed (limited for performance reasons).
  "json.maxItemsComputed": 5000,

  // When enabled, JSON schemas can be fetched from http and https locations.
  "json.schemaDownload.enable": true,

  // Associate schemas to JSON files in the current project.
  "json.schemas": [],

  // Traces the communication between VS Code and the JSON language server.
  "json.trace.server": "off",

  // Enable/disable JSON validation.
  "json.validate.enable": true

},
{
  // Enable/disable dropping into the markdown editor to insert shift. Requires enabling `editor.dropIntoEditor.enabled`.
  "markdown.editor.drop.enabled": true,

  // Enable/disable pasting files into a Markdown editor inserts Markdown links. Requires enabling `editor.experimental.pasteActions.enabled`.
  "markdown.experimental.editor.pasteLinks.enabled": true,

  // Enable/disable all error reporting in Markdown files.
  "markdown.experimental.validate.enabled": false,

  // Validate links to other files in Markdown files, e.g. `[link](/path/to/file.md)`. This checks that the target files exists. Requires enabling `markdown.experimental.validate.enabled`.
  "markdown.experimental.validate.fileLinks.enabled": "warning",

  // Validate the fragment part of links to headers in other files in Markdown files, e.g. `[link](/path/to/file.md#header)`. Inherits the setting value from `markdown.experimental.validate.fragmentLinks.enabled` by default.
  "markdown.experimental.validate.fileLinks.markdownFragmentLinks": "ignore",

  // Validate fragment links to headers in the current Markdown file, e.g. `[link](#header)`. Requires enabling `markdown.experimental.validate.enabled`.
  "markdown.experimental.validate.fragmentLinks.enabled": "warning",

  // Configure links that should not be validated. For example `/about` would not validate the link `[about](/about)`, while the glob `/assets/**/*.svg` would let you skip validation for any link to `.svg` files under the `assets` directory.
  "markdown.experimental.validate.ignoreLinks": [],

  // Validate reference links in Markdown files, e.g. `[link][ref]`.  Requires enabling `markdown.experimental.validate.enabled`.
  "markdown.experimental.validate.referenceLinks.enabled": "warning",

  // Controls where links in Markdown files should be opened.
  //  - currentGroup: Open links in the active editor group.
  //  - beside: Open links beside the active editor.
  "markdown.links.openLocation": "currentGroup",

  // Sets how line-breaks are rendered in the Markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.
  "markdown.preview.breaks": false,

  // Double click in the Markdown preview to switch to the editor.
  "markdown.preview.doubleClickToSwitchToEditor": true,

  // Controls the font family used in the Markdown preview.
  "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

  // Controls the font size in pixels used in the Markdown preview.
  "markdown.preview.fontSize": 14,

  // Controls the line height used in the Markdown preview. This number is relative to the font size.
  "markdown.preview.lineHeight": 1.6,

  // Enable or disable conversion of URL-like text to links in the Markdown preview.
  "markdown.preview.linkify": true,

  // Mark the current editor selection in the Markdown preview.
  "markdown.preview.markEditorSelection": true,

  // Controls how links to other Markdown files in the Markdown preview should be opened.
  //  - inPreview: Try to open links in the Markdown preview.
  //  - inEditor: Try to open links in the editor.
  "markdown.preview.openMarkdownLinks": "inPreview",

  // When a Markdown preview is scrolled, update the view of the editor.
  "markdown.preview.scrollEditorWithPreview": true,

  // When a Markdown editor is scrolled, update the view of the preview.
  "markdown.preview.scrollPreviewWithEditor": true,

  // Enable or disable some language-neutral replacement and quotes beautification in the Markdown preview.
  "markdown.preview.typographer": false,

  // A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
  "markdown.styles": [],

  // Enable/disable path suggestions for markdown links
  "markdown.suggest.paths.enabled": true,

  // Enable debug logging for the Markdown extension.
  "markdown.trace.extension": "off",

  // Traces the communication between VS Code and the Markdown language server.
  "markdown.trace.server": "off"

},
{
  // Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
  "php.suggest.basic": true,

  // Enable/disable built-in PHP validation.
  "php.validate.enable": true,

  // Points to the PHP executable.
  "php.validate.executablePath": null,

  // Whether the linter is run on save or on type.
  "php.validate.run": "onSave"

},
{
  // Enable/disable automatic closing of JSX tags.
  "javascript.autoClosingTags": true,

  // Enable/disable default JavaScript formatter.
  "javascript.format.enable": true,

  // Defines space handling after a comma delimiter.
  "javascript.format.insertSpaceAfterCommaDelimiter": true,

  // Defines space handling after the constructor keyword.
  "javascript.format.insertSpaceAfterConstructor": false,

  // Defines space handling after function keyword for anonymous functions.
  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Defines space handling after keywords in a control flow statement.
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Defines space handling after opening and before closing empty braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

  // Defines space handling after opening and before closing JSX expression braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Defines space handling after opening and before closing non-empty braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Defines space handling after opening and before closing non-empty brackets.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Defines space handling after opening and before closing non-empty parenthesis.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Defines space handling after opening and before closing template string braces.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // Defines space handling after a semicolon in a for statement.
  "javascript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Defines space handling after a binary operator.
  "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Defines space handling before function argument parentheses.
  "javascript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Defines whether an open brace is put onto a new line for control blocks or not.
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Defines whether an open brace is put onto a new line for functions or not.
  "javascript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
  //  - ignore: Don't insert or remove any semicolons.
  //  - insert: Insert semicolons at statement ends.
  //  - remove: Remove unnecessary semicolons.
  "javascript.format.semicolons": "ignore",

  // This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.
  // Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "javascript.implicitProjectConfig.checkJs": false,

  // This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.
  // Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "javascript.implicitProjectConfig.experimentalDecorators": false,

  // Enable/disable inlay hints for member values in enum declarations:
  // ```typescript
  //
  // enum MyValue {
  // 	A /* = 0 */;
  // 	B /* = 1 */;
  // }
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  "javascript.inlayHints.enumMemberValues.enabled": false,

  // Enable/disable inlay hints for implicit return types on function signatures:
  // ```typescript
  //
  // function foo() /* :number */ {
  // 	return Date.now();
  // }
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  "javascript.inlayHints.functionLikeReturnTypes.enabled": false,

  // Enable/disable inlay hints for parameter names:
  // ```typescript
  //
  // parseInt(/* str: */ '123', /* radix: */ 8)
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  //  - none: Disable parameter name hints.
  //  - literals: Enable parameter name hints only for literal arguments.
  //  - all: Enable parameter name hints for literal and non-literal arguments.
  "javascript.inlayHints.parameterNames.enabled": "none",

  // Suppress parameter name hints on arguments whose text is identical to the parameter name.
  "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

  // Enable/disable inlay hints for implicit parameter types:
  // ```typescript
  //
  // el.addEventListener('click', e /* :MouseEvent */ => ...)
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  "javascript.inlayHints.parameterTypes.enabled": false,

  // Enable/disable inlay hints for implicit types on property declarations:
  // ```typescript
  //
  // class Foo {
  // 	prop /* :number */ = Date.now();
  // }
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  "javascript.inlayHints.propertyDeclarationTypes.enabled": false,

  // Enable/disable inlay hints for implicit variable types:
  // ```typescript
  //
  // const foo /* :number */ = Date.now();
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  "javascript.inlayHints.variableTypes.enabled": false,

  // Suppress type hints on variables whose name is identical to the type name. Requires using TypeScript 4.8+ in the workspace.
  "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

  // Specify glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.
  "javascript.preferences.autoImportFileExcludePatterns": [],

  // Preferred path style for auto imports.
  //  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
  //  - relative: Prefers a relative path to the imported file location.
  //  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
  //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
  "javascript.preferences.importModuleSpecifier": "shortest",

  // Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.
  //  - auto: Use project settings to select a default.
  //  - minimal: Shorten `./component/index.js` to `./component`.
  //  - index: Shorten `./component/index.js` to `./component/index`.
  //  - js: Do not shorten path endings; include the `.js` extension.
  "javascript.preferences.importModuleSpecifierEnding": "auto",

  // Preferred style for JSX attribute completions.
  //  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.
  //  - braces: Insert `={}` after attribute names.
  //  - none: Only insert attribute names.
  "javascript.preferences.jsxAttributeCompletionStyle": "auto",

  // Preferred quote style to use for quick fixes.
  //  - auto: Infer quote type from existing code
  //  - single: Always use single quotes: `'`
  //  - double: Always use double quotes: `"`
  "javascript.preferences.quoteStyle": "auto",

  // The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
  // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
  "javascript.preferences.renameShorthandProperties": true,

  // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
  "javascript.preferences.useAliasesForRenames": true,

  // Enable/disable references CodeLens in JavaScript files.
  "javascript.referencesCodeLens.enabled": false,

  // Enable/disable references CodeLens on all functions in JavaScript files.
  "javascript.referencesCodeLens.showOnAllFunctions": false,

  // Enable/disable auto import suggestions.
  "javascript.suggest.autoImports": true,

  // Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace
  "javascript.suggest.classMemberSnippets.enabled": true,

  // Complete functions with their parameter signature.
  "javascript.suggest.completeFunctionCalls": false,

  // Enable/disable suggestion to complete JSDoc comments.
  "javascript.suggest.completeJSDocs": true,

  // Enabled/disable autocomplete suggestions.
  "javascript.suggest.enabled": true,

  // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
  "javascript.suggest.includeAutomaticOptionalChainCompletions": true,

  // Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.
  "javascript.suggest.includeCompletionsForImportStatements": true,

  // Enable/disable generating `@returns` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
  "javascript.suggest.jsdoc.generateReturns": true,

  // Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
  "javascript.suggest.names": true,

  // Enable/disable suggestions for paths in import statements and require calls.
  "javascript.suggest.paths": true,

  // Enable/disable suggestion diagnostics for JavaScript files in the editor.
  "javascript.suggestionActions.enabled": true,

  // Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
  //  - prompt: Prompt on each rename.
  //  - always: Always update paths automatically.
  //  - never: Never rename paths and don't prompt.
  "javascript.updateImportsOnFileMove.enabled": "prompt",

  // Enable/disable JavaScript validation.
  "javascript.validate.enable": true,

  // Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.checkJs": false,

  // Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.experimentalDecorators": false,

  // Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.
  "js/ts.implicitProjectConfig.module": "ESNext",

  // Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.strictFunctionTypes": true,

  // Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  "js/ts.implicitProjectConfig.strictNullChecks": true,

  // Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.
  "js/ts.implicitProjectConfig.target": "ES2020",

  // Enable/disable automatic closing of JSX tags.
  "typescript.autoClosingTags": true,

  // Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
  "typescript.check.npmIsInstalled": true,

  // Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
  "typescript.disableAutomaticTypeAcquisition": false,

  // Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
  "typescript.enablePromptUseWorkspaceTsdk": false,

  // Enable/disable default TypeScript formatter.
  "typescript.format.enable": true,

  // Defines space handling after a comma delimiter.
  "typescript.format.insertSpaceAfterCommaDelimiter": true,

  // Defines space handling after the constructor keyword.
  "typescript.format.insertSpaceAfterConstructor": false,

  // Defines space handling after function keyword for anonymous functions.
  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Defines space handling after keywords in a control flow statement.
  "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Defines space handling after opening and before closing empty braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

  // Defines space handling after opening and before closing JSX expression braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Defines space handling after opening and before closing non-empty braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Defines space handling after opening and before closing non-empty brackets.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Defines space handling after opening and before closing non-empty parenthesis.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Defines space handling after opening and before closing template string braces.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // Defines space handling after a semicolon in a for statement.
  "typescript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Defines space handling after type assertions in TypeScript.
  "typescript.format.insertSpaceAfterTypeAssertion": false,

  // Defines space handling after a binary operator.
  "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Defines space handling before function argument parentheses.
  "typescript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Defines whether an open brace is put onto a new line for control blocks or not.
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Defines whether an open brace is put onto a new line for functions or not.
  "typescript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
  //  - ignore: Don't insert or remove any semicolons.
  //  - insert: Insert semicolons at statement ends.
  //  - remove: Remove unnecessary semicolons.
  "typescript.format.semicolons": "ignore",

  // Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
  "typescript.implementationsCodeLens.enabled": false,

  // Enable/disable inlay hints for member values in enum declarations:
  // ```typescript
  //
  // enum MyValue {
  // 	A /* = 0 */;
  // 	B /* = 1 */;
  // }
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  "typescript.inlayHints.enumMemberValues.enabled": false,

  // Enable/disable inlay hints for implicit return types on function signatures:
  // ```typescript
  //
  // function foo() /* :number */ {
  // 	return Date.now();
  // }
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  "typescript.inlayHints.functionLikeReturnTypes.enabled": false,

  // Enable/disable inlay hints for parameter names:
  // ```typescript
  //
  // parseInt(/* str: */ '123', /* radix: */ 8)
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  //  - none: Disable parameter name hints.
  //  - literals: Enable parameter name hints only for literal arguments.
  //  - all: Enable parameter name hints for literal and non-literal arguments.
  "typescript.inlayHints.parameterNames.enabled": "none",

  // Suppress parameter name hints on arguments whose text is identical to the parameter name.
  "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

  // Enable/disable inlay hints for implicit parameter types:
  // ```typescript
  //
  // el.addEventListener('click', e /* :MouseEvent */ => ...)
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  "typescript.inlayHints.parameterTypes.enabled": false,

  // Enable/disable inlay hints for implicit types on property declarations:
  // ```typescript
  //
  // class Foo {
  // 	prop /* :number */ = Date.now();
  // }
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  "typescript.inlayHints.propertyDeclarationTypes.enabled": false,

  // Enable/disable inlay hints for implicit variable types:
  // ```typescript
  //
  // const foo /* :number */ = Date.now();
  //
  // ```
  // Requires using TypeScript 4.4+ in the workspace.
  "typescript.inlayHints.variableTypes.enabled": false,

  // Suppress type hints on variables whose name is identical to the type name. Requires using TypeScript 4.8+ in the workspace.
  "typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

  // Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
  "typescript.locale": "auto",

  // Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
  "typescript.npm": "",

  // Specify glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.
  "typescript.preferences.autoImportFileExcludePatterns": [],

  // Preferred path style for auto imports.
  //  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
  //  - relative: Prefers a relative path to the imported file location.
  //  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
  //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
  "typescript.preferences.importModuleSpecifier": "shortest",

  // Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.
  //  - auto: Use project settings to select a default.
  //  - minimal: Shorten `./component/index.js` to `./component`.
  //  - index: Shorten `./component/index.js` to `./component/index`.
  //  - js: Do not shorten path endings; include the `.js` extension.
  "typescript.preferences.importModuleSpecifierEnding": "auto",

  // Enable/disable searching `package.json` dependencies for available auto imports.
  //  - auto: Search dependencies based on estimated performance impact.
  //  - on: Always search dependencies.
  //  - off: Never search dependencies.
  "typescript.preferences.includePackageJsonAutoImports": "auto",

  // Preferred style for JSX attribute completions.
  //  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `typescript.preferences.quoteStyle` to control the type of quotes used for string attributes.
  //  - braces: Insert `={}` after attribute names.
  //  - none: Only insert attribute names.
  "typescript.preferences.jsxAttributeCompletionStyle": "auto",

  // Preferred quote style to use for quick fixes.
  //  - auto: Infer quote type from existing code
  //  - single: Always use single quotes: `'`
  //  - double: Always use double quotes: `"`
  "typescript.preferences.quoteStyle": "auto",

  // The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
  // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
  "typescript.preferences.renameShorthandProperties": true,

  // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
  "typescript.preferences.useAliasesForRenames": true,

  // Enable/disable references CodeLens in TypeScript files.
  "typescript.referencesCodeLens.enabled": false,

  // Enable/disable references CodeLens on all functions in TypeScript files.
  "typescript.referencesCodeLens.showOnAllFunctions": false,

  // Report style checks as warnings.
  "typescript.reportStyleChecksAsWarnings": true,

  // Enable/disable auto import suggestions.
  "typescript.suggest.autoImports": true,

  // Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace
  "typescript.suggest.classMemberSnippets.enabled": true,

  // Complete functions with their parameter signature.
  "typescript.suggest.completeFunctionCalls": false,

  // Enable/disable suggestion to complete JSDoc comments.
  "typescript.suggest.completeJSDocs": true,

  // Enabled/disable autocomplete suggestions.
  "typescript.suggest.enabled": true,

  // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
  "typescript.suggest.includeAutomaticOptionalChainCompletions": true,

  // Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.
  "typescript.suggest.includeCompletionsForImportStatements": true,

  // Enable/disable snippet completions from TS Server. Requires using TypeScript 4.3+ in the workspace.
  "typescript.suggest.includeCompletionsWithSnippetText": true,

  // Enable/disable generating `@returns` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
  "typescript.suggest.jsdoc.generateReturns": true,

  // Enable/disable snippet completions for methods in object literals. Requires using TypeScript 4.7+ in the workspace
  "typescript.suggest.objectLiteralMethodSnippets.enabled": true,

  // Enable/disable suggestions for paths in import statements and require calls.
  "typescript.suggest.paths": true,

  // Enable/disable suggestion diagnostics for TypeScript files in the editor.
  "typescript.suggestionActions.enabled": true,

  // Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
  "typescript.surveys.enabled": true,

  // Controls auto detection of tsc tasks.
  //  - on: Create both build and watch tasks.
  //  - off: Disable this feature.
  //  - build: Only create single run compile tasks.
  //  - watch: Only create compile and watch tasks.
  "typescript.tsc.autoDetect": "on",

  // Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
  //
  // - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
  // - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
  //
  // See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
  "typescript.tsdk": "",

  // Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.enableTracing": false,

  // (Experimental) Enables project wide error reporting.
  "typescript.tsserver.experimental.enableProjectDiagnostics": false,

  // Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.log": "off",

  // The maximum amount of memory (in MB) to allocate to the TypeScript server process.
  "typescript.tsserver.maxTsServerMemory": 3072,

  // Additional paths to discover TypeScript Language Service plugins.
  "typescript.tsserver.pluginPaths": [],

  // Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.trace": "off",

  // This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.
  // Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.
  "typescript.tsserver.useSeparateSyntaxServer": true,

  // Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.
  //  - always: Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.
  //  - never: Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.
  //  - auto: Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.
  "typescript.tsserver.useSyntaxServer": "auto",

  // Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.
  "typescript.tsserver.watchOptions": {},

  // Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
  //  - prompt: Prompt on each rename.
  //  - always: Always update paths automatically.
  //  - never: Never rename paths and don't prompt.
  "typescript.updateImportsOnFileMove.enabled": "prompt",

  // Enable/disable TypeScript validation.
  "typescript.validate.enable": true,

  // Controls which files are searched by [go to symbol in workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
  //  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols. Requires using TypeScript 3.9 or newer in the workspace.
  //  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
  "typescript.workspaceSymbols.scope": "allOpenProjects"

},
{
  // Always reveal the executed test when `testing.followRunningTest` is on. If this setting is turned off, only failed tests will be revealed.
  "testing.alwaysRevealTestOnStateChange": false,

  // Configures when the error peek view is automatically opened.
  //  - failureAnywhere: Open automatically no matter where the failure is.
  //  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
  //  - never: Never automatically open.
  "testing.automaticallyOpenPeekView": "failureInVisibleDocument",

  // Controls whether to automatically open the peek view during auto-run mode.
  "testing.automaticallyOpenPeekViewDuringAutoRun": false,

  // How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.
  "testing.autoRun.delay": 1000,

  // Controls which tests are automatically run.
  //  - all: Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed.
  //  - rerun: Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed.
  "testing.autoRun.mode": "all",

  // Controls the action to take when left-clicking on a test decoration in the gutter.
  //  - run: Run the test.
  //  - debug: Debug the test.
  //  - contextMenu: Open the context menu for more options.
  "testing.defaultGutterClickAction": "run",

  // Controls whether the running test should be followed in the test explorer view
  "testing.followRunningTest": true,

  // Controls whether test decorations are shown in the editor gutter.
  "testing.gutterEnabled": true,

  // Controls when the testing view should open.
  //  - neverOpen: Never automatically open the testing view
  //  - openOnTestStart: Open the testing view when tests start
  //  - openOnTestFailure: Open the testing view on any test failure
  "testing.openTesting": "openOnTestStart",

  // Control whether save all dirty editors before running a test.
  "testing.saveBeforeTest": true

},
{
  // Insert semicolon at end of line when completing CSS properties.
  "css.completion.completePropertyWithSemicolon": true,

  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "css.completion.triggerPropertyValueCompletion": true,

  // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
  //
  // VS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.
  //
  // The file paths are relative to workspace and only workspace folder settings are considered.
  "css.customData": [],

  // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
  "css.format.braceStyle": "collapse",

  // Enable/disable default CSS formatter.
  "css.format.enable": true,

  // Maximum number of line breaks to be preserved in one chunk, when `css.format.preserveNewLines` is enabled.
  "css.format.maxPreserveNewLines": null,

  // Separate rulesets by a blank line.
  "css.format.newlineBetweenRules": true,

  // Separate selectors with a new line.
  "css.format.newlineBetweenSelectors": true,

  // Whether existing line breaks before elements should be preserved.
  "css.format.preserveNewLines": true,

  // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
  "css.format.spaceAroundSelectorSeparator": false,

  // Show tag and attribute documentation in CSS hovers.
  "css.hover.documentation": true,

  // Show references to MDN in CSS hovers.
  "css.hover.references": true,

  // Invalid number of parameters.
  "css.lint.argumentsInColorFunction": "error",

  // Do not use `width` or `height` when using `padding` or `border`.
  "css.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "css.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions.
  "css.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets.
  "css.lint.emptyRules": "warning",

  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "css.lint.float": "ignore",

  // `@font-face` rule must define `src` and `font-family` properties.
  "css.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers.
  "css.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "css.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older.
  "css.lint.ieHack": "ignore",

  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "css.lint.important": "ignore",

  // Import statements do not load in parallel.
  "css.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "css.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (`*`) is known to be slow.
  "css.lint.universalSelector": "ignore",

  // Unknown at-rule.
  "css.lint.unknownAtRules": "warning",

  // Unknown property.
  "css.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "css.lint.unknownVendorSpecificProperties": "ignore",

  // A list of properties that are not validated against the `unknownProperties` rule.
  "css.lint.validProperties": [],

  // When using a vendor-specific prefix, also include the standard property.
  "css.lint.vendorPrefix": "warning",

  // No unit for zero needed.
  "css.lint.zeroUnits": "ignore",

  // Traces the communication between VS Code and the CSS language server.
  "css.trace.server": "off",

  // Enables or disables all validations.
  "css.validate": true

},
{
  // Insert semicolon at end of line when completing CSS properties.
  "less.completion.completePropertyWithSemicolon": true,

  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "less.completion.triggerPropertyValueCompletion": true,

  // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
  "less.format.braceStyle": "collapse",

  // Enable/disable default LESS formatter.
  "less.format.enable": true,

  // Maximum number of line breaks to be preserved in one chunk, when `less.format.preserveNewLines` is enabled.
  "less.format.maxPreserveNewLines": null,

  // Separate rulesets by a blank line.
  "less.format.newlineBetweenRules": true,

  // Separate selectors with a new line.
  "less.format.newlineBetweenSelectors": true,

  // Whether existing line breaks before elements should be preserved.
  "less.format.preserveNewLines": true,

  // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
  "less.format.spaceAroundSelectorSeparator": false,

  // Show tag and attribute documentation in LESS hovers.
  "less.hover.documentation": true,

  // Show references to MDN in LESS hovers.
  "less.hover.references": true,

  // Invalid number of parameters.
  "less.lint.argumentsInColorFunction": "error",

  // Do not use `width` or `height` when using `padding` or `border`.
  "less.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "less.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions.
  "less.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets.
  "less.lint.emptyRules": "warning",

  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "less.lint.float": "ignore",

  // `@font-face` rule must define `src` and `font-family` properties.
  "less.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers.
  "less.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "less.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older.
  "less.lint.ieHack": "ignore",

  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "less.lint.important": "ignore",

  // Import statements do not load in parallel.
  "less.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "less.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (`*`) is known to be slow.
  "less.lint.universalSelector": "ignore",

  // Unknown at-rule.
  "less.lint.unknownAtRules": "warning",

  // Unknown property.
  "less.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "less.lint.unknownVendorSpecificProperties": "ignore",

  // A list of properties that are not validated against the `unknownProperties` rule.
  "less.lint.validProperties": [],

  // When using a vendor-specific prefix, also include the standard property.
  "less.lint.vendorPrefix": "warning",

  // No unit for zero needed.
  "less.lint.zeroUnits": "ignore",

  // Enables or disables all validations.
  "less.validate": true

},
{
  // Insert semicolon at end of line when completing CSS properties.
  "scss.completion.completePropertyWithSemicolon": true,

  // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
  "scss.completion.triggerPropertyValueCompletion": true,

  // Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
  "scss.format.braceStyle": "collapse",

  // Enable/disable default SCSS formatter.
  "scss.format.enable": true,

  // Maximum number of line breaks to be preserved in one chunk, when `scss.format.preserveNewLines` is enabled.
  "scss.format.maxPreserveNewLines": null,

  // Separate rulesets by a blank line.
  "scss.format.newlineBetweenRules": true,

  // Separate selectors with a new line.
  "scss.format.newlineBetweenSelectors": true,

  // Whether existing line breaks before elements should be preserved.
  "scss.format.preserveNewLines": true,

  // Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
  "scss.format.spaceAroundSelectorSeparator": false,

  // Show tag and attribute documentation in SCSS hovers.
  "scss.hover.documentation": true,

  // Show references to MDN in SCSS hovers.
  "scss.hover.references": true,

  // Invalid number of parameters.
  "scss.lint.argumentsInColorFunction": "error",

  // Do not use `width` or `height` when using `padding` or `border`.
  "scss.lint.boxModel": "ignore",

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
  "scss.lint.compatibleVendorPrefixes": "ignore",

  // Do not use duplicate style definitions.
  "scss.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets.
  "scss.lint.emptyRules": "warning",

  // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "scss.lint.float": "ignore",

  // `@font-face` rule must define `src` and `font-family` properties.
  "scss.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers.
  "scss.lint.hexColorLength": "error",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "scss.lint.idSelector": "ignore",

  // IE hacks are only necessary when supporting IE7 and older.
  "scss.lint.ieHack": "ignore",

  // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "scss.lint.important": "ignore",

  // Import statements do not load in parallel.
  "scss.lint.importStatement": "ignore",

  // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
  "scss.lint.propertyIgnoredDueToDisplay": "warning",

  // The universal selector (`*`) is known to be slow.
  "scss.lint.universalSelector": "ignore",

  // Unknown at-rule.
  "scss.lint.unknownAtRules": "warning",

  // Unknown property.
  "scss.lint.unknownProperties": "warning",

  // Unknown vendor specific property.
  "scss.lint.unknownVendorSpecificProperties": "ignore",

  // A list of properties that are not validated against the `unknownProperties` rule.
  "scss.lint.validProperties": [],

  // When using a vendor-specific prefix, also include the standard property.
  "scss.lint.vendorPrefix": "warning",

  // No unit for zero needed.
  "scss.lint.zeroUnits": "ignore",

  // Enables or disables all validations.
  "scss.validate": true

},
{
  // When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
  "extensions.autoCheckUpdates": true,

  // Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service.
  //  - true: Download and install updates automatically for all extensions.
  //  - onlyEnabledExtensions: Download and install updates automatically only for enabled extensions. Disabled extensions will not be updated automatically.
  //  - false: Extensions are not automatically updated.
  "extensions.autoUpdate": true,

  // When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
  "extensions.closeExtensionDetailsOnViewChange": false,

  // When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
  "extensions.confirmedUriHandlerExtensionIds": [],

  // Configure an extension to execute in a different extension host process.
  "extensions.experimental.affinity": {},

  // When enabled, the extension host will be launched using the new UtilityProcess Electron API.
  "extensions.experimental.useUtilityProcess": false,

  // When enabled, the notifications for extension recommendations will not be shown.
  "extensions.ignoreRecommendations": false,

  // This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.
  //
  "extensions.showRecommendationsOnlyOnDemand": false,

  // Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted.
  "extensions.supportUntrustedWorkspaces": {},

  // Override the virtual workspaces support of an extension.
  "extensions.supportVirtualWorkspaces": {},

  // Enable web worker extension host.
  //  - true: The Web Worker Extension Host will always be launched.
  //  - false: The Web Worker Extension Host will never be launched.
  //  - auto: The Web Worker Extension Host will be launched when a web extension needs it.
  "extensions.webWorker": "auto"

},
{
  // Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
  "output.smartScroll.enabled": true

},
{
  // List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`.
  "settingsSync.ignoredExtensions": [],

  // Configure settings to be ignored while synchronizing.
  "settingsSync.ignoredSettings": [],

  // Synchronize keybindings for each platform.
  "settingsSync.keybindingsPerPlatform": true

},
{
  // Controls whether code cells in the interactive window are collapsed by default.
  "interactiveWindow.collapseCellInputCode": "fromEditor",

  // When enabled notebook breadcrumbs contain code cells.
  "notebook.breadcrumbs.showCodeCells": true,

  // Controls where the focus indicator is rendered, either along the cell borders or on the left gutter
  "notebook.cellFocusIndicator": "gutter",

  // Where the cell toolbar should be shown, or whether it should be hidden.
  "notebook.cellToolbarLocation": {
    "default": "right"
  },

  // Whether the cell toolbar should appear on hover or click.
  "notebook.cellToolbarVisibility": "click",

  // Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.
  "notebook.compactView": true,

  // Control whether outputs action should be rendered in the output toolbar.
  "notebook.consolidatedOutputButton": true,

  // Control whether extra actions are shown in a dropdown next to the run button.
  "notebook.consolidatedRunButton": false,

  // Whether to use the enhanced text diff editor for notebook.
  "notebook.diff.enablePreview": true,

  // Hide Metadata Differences
  "notebook.diff.ignoreMetadata": false,

  // Hide Outputs Differences
  "notebook.diff.ignoreOutputs": false,

  // Priority list for output mime types
  "notebook.displayOrder": [],

  // Control whether the notebook editor should allow moving cells through drag and drop.
  "notebook.dragAndDropEnabled": true,

  // Settings for code editors used in notebooks. This can be used to customize most editor.* settings.
  "notebook.editorOptionsCustomizations": {},

  // Control whether to render a global toolbar inside the notebook editor.
  "notebook.globalToolbar": true,

  // Control whether the actions on the notebook toolbar should render label or not.
  "notebook.globalToolbarShowLabel": "always",

  // Control where the insert cell actions should appear.
  //  - betweenCells: A toolbar that appears on hover between cells.
  //  - notebookToolbar: The toolbar at the top of the notebook editor.
  //  - both: Both toolbars.
  //  - hidden: The insert actions don't appear anywhere.
  "notebook.insertToolbarLocation": "both",

  // Controls the display of line numbers in the cell editor.
  "notebook.lineNumbers": "off",

  // Controls the font size in pixels of rendered markup in notebooks. When set to `0`, 120% of `editor.fontSize` is used.
  "notebook.markup.fontSize": 0,

  // When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.
  "notebook.navigation.allowNavigateToSurroundingCells": true,

  // When enabled notebook outline shows code cells.
  "notebook.outline.showCodeCells": false,

  // Control how many lines of text in a text output is rendered.
  "notebook.output.textLineLimit": 30,

  // The font family for the output text for notebook cells. When set to empty, the `editor.fontFamily` is used.
  "notebook.outputFontFamily": "",

  // Font size for the output text for notebook cells. When set to `0`, `editor.fontSize` is used.
  "notebook.outputFontSize": 0,

  // Line height of the output text for notebook cells.
  //  - Values between 0 and 8 will be used as a multiplier with the font size.
  //  - Values greater than or equal to 8 will be used as effective values.
  "notebook.outputLineHeight": 22,

  // Whether the cell status bar should be shown.
  //  - hidden: The cell Status bar is always hidden.
  //  - visible: The cell Status bar is always visible.
  //  - visibleAfterExecute: The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.
  "notebook.showCellStatusBar": "visible",

  // Controls when the Markdown header folding arrow is shown.
  //  - always: The folding controls are always visible.
  //  - never: Never show the folding controls and reduce the gutter size.
  //  - mouseover: The folding controls are visible only on mouseover.
  "notebook.showFoldingControls": "mouseover",

  // Whether to use separate undo/redo stack for each cell.
  "notebook.undoRedoPerCell": true

},
{
  // Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to.
  "interactiveWindow.alwaysScrollOnNewCell": true,

  // Controls whether the Interactive Window sessions/history should be restored across window reloads. Whether the state of controllers used in Interactive Windows is persisted across window reloads are controlled by extensions contributing controllers.
  "interactiveWindow.restore": false

},
{
  // When opening a file from the explorer in a terminal, determines what kind of terminal will be launched
  //  - integrated: Use VS Code's integrated terminal.
  //  - external: Use the configured external terminal.
  "terminal.explorerKind": "integrated",

  // Customizes which terminal to run on Linux.
  "terminal.external.linuxExec": "xterm",

  // Customizes which terminal application to run on macOS.
  "terminal.external.osxExec": "Terminal.app",

  // Customizes which terminal to run on Windows.
  "terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe"

},
{
  // Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
  "terminal.integrated.allowChords": true,

  // Whether to allow menubar mnemonics (eg. alt+f) to trigger the open the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
  "terminal.integrated.allowMnemonics": false,

  // If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
  "terminal.integrated.altClickMovesCursor": true,

  // The terminal profile to use on Linux for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.linux` is set.
  "terminal.integrated.automationProfile.linux": null,

  // The terminal profile to use on macOS for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.osx` is set.
  "terminal.integrated.automationProfile.osx": null,

  // The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if `terminal.integrated.automationShell.windows` is set.
  "terminal.integrated.automationProfile.windows": null,

  // This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.linux`. This will currently take priority over the new automation profile settings but that will change in the future.
  // A path that when set will override `terminal.integrated.shell.linux` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
  "terminal.integrated.automationShell.linux": null,

  // This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.osx`. This will currently take priority over the new automation profile settings but that will change in the future.
  // A path that when set will override `terminal.integrated.shell.osx` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
  "terminal.integrated.automationShell.osx": null,

  // This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.windows`. This will currently take priority over the new automation profile settings but that will change in the future.
  // A path that when set will override `terminal.integrated.shell.windows` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
  "terminal.integrated.automationShell.windows": null,

  // A set of messages that when encountered in the terminal will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.
  //
  // Remarks:
  //
  // - Use `"Terminate batch job (Y/N)": "Y\r"` to automatically respond to the terminate batch job prompt on Windows.
  // - The message includes escape sequences so the reply might not happen with styled text.
  // - Each reply can only happen once every second.
  // - Use `"\r"` in the reply to mean the enter key.
  // - To unset a default key, set the value to null.
  // - Restart VS Code if new don't apply.
  "terminal.integrated.autoReplies": {},

  // The number of milliseconds to show the bell within a terminal tab when triggered.
  "terminal.integrated.bellDuration": 1000,

  // A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
  //
  // &nbsp;
  //
  // Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
  //
  // &nbsp;
  //
  // The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
  //
  // &nbsp;
  //
  // Default Skipped Commands:
  //
  // - editor.action.toggleTabFocusMode
  // - notifications.hideList
  // - notifications.hideToasts
  // - workbench.action.debug.continue
  // - workbench.action.debug.pause
  // - workbench.action.debug.restart
  // - workbench.action.debug.run
  // - workbench.action.debug.start
  // - workbench.action.debug.stepInto
  // - workbench.action.debug.stepOut
  // - workbench.action.debug.stepOver
  // - workbench.action.debug.stop
  // - workbench.action.firstEditorInGroup
  // - workbench.action.focusActiveEditorGroup
  // - workbench.action.focusEighthEditorGroup
  // - workbench.action.focusFifthEditorGroup
  // - workbench.action.focusFirstEditorGroup
  // - workbench.action.focusFourthEditorGroup
  // - workbench.action.focusLastEditorGroup
  // - workbench.action.focusNextPart
  // - workbench.action.focusPreviousPart
  // - workbench.action.focusSecondEditorGroup
  // - workbench.action.focusSeventhEditorGroup
  // - workbench.action.focusSixthEditorGroup
  // - workbench.action.focusThirdEditorGroup
  // - workbench.action.lastEditorInGroup
  // - workbench.action.navigateDown
  // - workbench.action.navigateLeft
  // - workbench.action.navigateRight
  // - workbench.action.navigateUp
  // - workbench.action.nextEditor
  // - workbench.action.nextEditorInGroup
  // - workbench.action.nextPanelView
  // - workbench.action.nextSideBarView
  // - workbench.action.openNextRecentlyUsedEditor
  // - workbench.action.openNextRecentlyUsedEditorInGroup
  // - workbench.action.openPreviousRecentlyUsedEditor
  // - workbench.action.openPreviousRecentlyUsedEditorInGroup
  // - workbench.action.previousEditor
  // - workbench.action.previousEditorInGroup
  // - workbench.action.previousPanelView
  // - workbench.action.previousSideBarView
  // - workbench.action.quickOpen
  // - workbench.action.quickOpenLeastRecentlyUsedEditor
  // - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenPreviousEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenView
  // - workbench.action.showCommands
  // - workbench.action.tasks.build
  // - workbench.action.tasks.reRunTask
  // - workbench.action.tasks.restartTask
  // - workbench.action.tasks.runTask
  // - workbench.action.tasks.showLog
  // - workbench.action.tasks.showTasks
  // - workbench.action.tasks.terminate
  // - workbench.action.tasks.test
  // - workbench.action.terminal.clear
  // - workbench.action.terminal.clearSelection
  // - workbench.action.terminal.copyLastCommand
  // - workbench.action.terminal.copySelection
  // - workbench.action.terminal.copySelectionAsHtml
  // - workbench.action.terminal.deleteToLineStart
  // - workbench.action.terminal.deleteWordLeft
  // - workbench.action.terminal.deleteWordRight
  // - workbench.action.terminal.findNext
  // - workbench.action.terminal.findPrevious
  // - workbench.action.terminal.focus
  // - workbench.action.terminal.focusAtIndex1
  // - workbench.action.terminal.focusAtIndex2
  // - workbench.action.terminal.focusAtIndex3
  // - workbench.action.terminal.focusAtIndex4
  // - workbench.action.terminal.focusAtIndex5
  // - workbench.action.terminal.focusAtIndex6
  // - workbench.action.terminal.focusAtIndex7
  // - workbench.action.terminal.focusAtIndex8
  // - workbench.action.terminal.focusAtIndex9
  // - workbench.action.terminal.focusFind
  // - workbench.action.terminal.focusNext
  // - workbench.action.terminal.focusNextPane
  // - workbench.action.terminal.focusPrevious
  // - workbench.action.terminal.focusPreviousPane
  // - workbench.action.terminal.goToRecentDirectory
  // - workbench.action.terminal.hideFind
  // - workbench.action.terminal.kill
  // - workbench.action.terminal.killEditor
  // - workbench.action.terminal.moveToEditor
  // - workbench.action.terminal.moveToLineEnd
  // - workbench.action.terminal.moveToLineStart
  // - workbench.action.terminal.moveToTerminalPanel
  // - workbench.action.terminal.navigationModeExit
  // - workbench.action.terminal.navigationModeFocusNext
  // - workbench.action.terminal.navigationModeFocusPrevious
  // - workbench.action.terminal.new
  // - workbench.action.terminal.newInActiveWorkspace
  // - workbench.action.terminal.paste
  // - workbench.action.terminal.pasteSelection
  // - workbench.action.terminal.resizePaneDown
  // - workbench.action.terminal.resizePaneLeft
  // - workbench.action.terminal.resizePaneRight
  // - workbench.action.terminal.resizePaneUp
  // - workbench.action.terminal.runActiveFile
  // - workbench.action.terminal.runRecentCommand
  // - workbench.action.terminal.runSelectedText
  // - workbench.action.terminal.scrollDown
  // - workbench.action.terminal.scrollDownPage
  // - workbench.action.terminal.scrollToBottom
  // - workbench.action.terminal.scrollToNextCommand
  // - workbench.action.terminal.scrollToPreviousCommand
  // - workbench.action.terminal.scrollToTop
  // - workbench.action.terminal.scrollUp
  // - workbench.action.terminal.scrollUpPage
  // - workbench.action.terminal.selectAll
  // - workbench.action.terminal.selectToNextCommand
  // - workbench.action.terminal.selectToNextLine
  // - workbench.action.terminal.selectToPreviousCommand
  // - workbench.action.terminal.selectToPreviousLine
  // - workbench.action.terminal.sendSequence
  // - workbench.action.terminal.sizeToContentWidth
  // - workbench.action.terminal.split
  // - workbench.action.terminal.splitInActiveWorkspace
  // - workbench.action.terminal.toggleFindCaseSensitive
  // - workbench.action.terminal.toggleFindRegex
  // - workbench.action.terminal.toggleFindWholeWord
  // - workbench.action.terminal.toggleTerminal
  // - workbench.action.toggleFullScreen
  // - workbench.action.toggleMaximizedPanel
  // - workbench.action.togglePanel
  "terminal.integrated.commandsToSkipShell": [],

  // Controls whether to confirm when the window closes if there are active terminal sessions.
  //  - never: Never confirm.
  //  - always: Always confirm if there are terminals.
  //  - hasChildProcesses: Confirm if there are any terminals that have child processes.
  "terminal.integrated.confirmOnExit": "never",

  // Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell.
  //  - never: Never confirm.
  //  - editor: Confirm if the terminal is in the editor.
  //  - panel: Confirm if the terminal is in the panel.
  //  - always: Confirm if the terminal is either in the editor or panel.
  "terminal.integrated.confirmOnKill": "editor",

  // Controls whether text selected in the terminal will be copied to the clipboard.
  "terminal.integrated.copyOnSelection": false,

  // Controls whether the terminal cursor blinks.
  "terminal.integrated.cursorBlinking": false,

  // Controls the style of terminal cursor.
  "terminal.integrated.cursorStyle": "block",

  // Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
  "terminal.integrated.cursorWidth": 1,

  // Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work with the DOM renderer
  "terminal.integrated.customGlyphs": true,

  // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
  "terminal.integrated.cwd": "",

  // Controls where newly created terminals will appear.
  //  - editor: Create terminals in the editor
  //  - view: Create terminals in the terminal view
  "terminal.integrated.defaultLocation": "view",

  // The default profile used on Linux. This setting will currently be ignored if either `terminal.integrated.shell.linux` or `terminal.integrated.shellArgs.linux` are set.
  "terminal.integrated.defaultProfile.linux": null,

  // The default profile used on macOS. This setting will currently be ignored if either `terminal.integrated.shell.osx` or `terminal.integrated.shellArgs.osx` are set.
  //  - null: Automatically detect the default
  //  - bash: $(terminal-bash) bash
  // - path: /usr/local/bin/bash
  // - args: ['-l']
  //  - csh: $(terminal) csh
  // - path: /bin/csh
  //  - dash: $(terminal) dash
  // - path: /bin/dash
  //  - ksh: $(terminal) ksh
  // - path: /bin/ksh
  //  - sh: $(terminal) sh
  // - path: /bin/sh
  //  - tcsh: $(terminal) tcsh
  // - path: /bin/tcsh
  //  - zsh: $(terminal) zsh
  // - path: /bin/zsh
  // - args: ['-l']
  //  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
  // - extensionIdentifier: ms-vscode.js-debug
  "terminal.integrated.defaultProfile.osx": null,

  // The default profile used on Windows. This setting will currently be ignored if either `terminal.integrated.shell.windows` or `terminal.integrated.shellArgs.windows` are set.
  "terminal.integrated.defaultProfile.windows": null,

  // Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
  //  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
  //  - off: Do not set the `$LANG` environment variable.
  //  - on: Always set the `$LANG` environment variable.
  "terminal.integrated.detectLocale": "auto",

  // Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
  "terminal.integrated.drawBoldTextInBrightColors": true,

  // Controls whether the terminal bell is enabled, this shows up as a visual bell next to the terminal's name.
  "terminal.integrated.enableBell": false,

  // Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
  "terminal.integrated.enableFileLinks": true,

  // Show a warning dialog when pasting multiple lines into the terminal. The dialog does not show when:
  //
  // - Bracketed paste mode is enabled (the shell supports multi-line paste natively)
  // - The paste is handled by the shell's readline (in the case of pwsh)
  "terminal.integrated.enableMultiLinePasteWarning": true,

  // Persist terminal sessions/history for the workspace across window reloads.
  "terminal.integrated.enablePersistentSessions": true,

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
  "terminal.integrated.env.linux": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
  "terminal.integrated.env.osx": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
  "terminal.integrated.env.windows": {},

  // Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
  //  - off: Disable the indicator.
  //  - on: Enable the indicator.
  //  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
  "terminal.integrated.environmentChangesIndicator": "warnonly",

  // Whether to relaunch terminals automatically if extension want to contribute to their environment and have not been interacted with yet.
  "terminal.integrated.environmentChangesRelaunch": true,

  // Scrolling speed multiplier when pressing `Alt`.
  "terminal.integrated.fastScrollSensitivity": 5,

  // Controls the font family of the terminal, this defaults to `editor.fontFamily`'s value.
  "terminal.integrated.fontFamily": "",

  // Controls the font size in pixels of the terminal.
  "terminal.integrated.fontSize": 12,

  // The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
  "terminal.integrated.fontWeight": "normal",

  // The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
  "terminal.integrated.fontWeightBold": "bold",

  // Controls whether the terminal will leverage the GPU to do its rendering.
  //  - auto: Let VS Code detect which renderer will give the best experience.
  //  - on: Enable GPU acceleration within the terminal.
  //  - off: Disable GPU acceleration within the terminal. The terminal will render much slower when GPU acceleration is off but it should reliably work on all systems.
  //  - canvas: Use the terminal's fallback canvas renderer which uses a 2d context instead of webgl which may perform better on some systems. Note that some features are limited in the canvas renderer like opaque selection.
  "terminal.integrated.gpuAcceleration": "auto",

  // A set of process names to ignore when using the `terminal.integrated.confirmOnKill` setting.
  "terminal.integrated.ignoreProcessNames": [
    "starship",
    "oh-my-posh",
    "bash",
    "zsh"
  ],

  // Whether new shells should inherit their environment from VS Code, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows.
  "terminal.integrated.inheritEnv": true,

  // Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.
  "terminal.integrated.letterSpacing": 0,

  // Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
  "terminal.integrated.lineHeight": 1,

  // When local echo should be enabled. This will override `terminal.integrated.localEchoLatencyThreshold`
  //  - on: Always enabled
  //  - off: Always disabled
  //  - auto: Enabled only for remote workspaces
  "terminal.integrated.localEchoEnabled": "auto",

  // Local echo will be disabled when any of these program names are found in the terminal title.
  "terminal.integrated.localEchoExcludePrograms": [
    "vim",
    "vi",
    "nano",
    "tmux"
  ],

  // Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
  "terminal.integrated.localEchoLatencyThreshold": 30,

  // Terminal style of locally echoed text; either a font style or an RGB color.
  "terminal.integrated.localEchoStyle": "dim",

  // Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
  "terminal.integrated.macOptionClickForcesSelection": false,

  // Controls whether to treat the option key as the meta key in the terminal on macOS.
  "terminal.integrated.macOptionIsMeta": false,

  // When set, the foreground color of each cell will change to try meet the contrast ratio specified. Note that this will not apply to `powerline` characters per #146406. Example values:
  //
  // - 1: Do nothing and use the standard theme colors.
  // - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (default).
  // - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
  // - 21: White on black or black on white.
  "terminal.integrated.minimumContrastRatio": 4.5,

  // A multiplier to be used on the `deltaY` of mouse wheel scroll events.
  "terminal.integrated.mouseWheelScrollSensitivity": 1,

  // When the terminal process must be shutdown (eg. on window or application close), this determines when the previous terminal session contents/history should be restored and processes be recreated when the workspace is next opened.
  //
  // Caveats:
  //
  // - Restoring of the process current working directory depends on whether it is supported by the shell.
  // - Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections.
  //  - onExit: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).
  //  - onExitAndWindowClose: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.
  //  - never: Never restore the terminal buffers or recreate the process.
  "terminal.integrated.persistentSessionReviveProcess": "onExit",

  // Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `terminal.integrated.scrollback`.
  "terminal.integrated.persistentSessionScrollback": 100,

  // The Linux profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
  //
  // Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
  "terminal.integrated.profiles.linux": {
    "bash": {
      "path": "bash",
      "icon": "terminal-bash"
    },
    "zsh": {
      "path": "zsh"
    },
    "fish": {
      "path": "fish"
    },
    "tmux": {
      "path": "tmux",
      "icon": "terminal-tmux"
    },
    "pwsh": {
      "path": "pwsh",
      "icon": "terminal-powershell"
    }
  },

  // The macOS profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
  //
  // Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
  "terminal.integrated.profiles.osx": {
    "bash": {
      "path": "bash",
      "args": [
        "-l"
      ],
      "icon": "terminal-bash"
    },
    "zsh": {
      "path": "zsh",
      "args": [
        "-l"
      ]
    },
    "fish": {
      "path": "fish",
      "args": [
        "-l"
      ]
    },
    "tmux": {
      "path": "tmux",
      "icon": "terminal-tmux"
    },
    "pwsh": {
      "path": "pwsh",
      "icon": "terminal-powershell"
    }
  },

  // The Windows profiles to present when creating a new terminal via the terminal dropdown. Use the `source` property to automatically detect the shell's location. Or set the `path` property manually with an optional `args`.
  //
  // Set an existing profile to `null` to hide the profile from the list, for example: `"Ubuntu-20.04 (WSL)": null`.
  "terminal.integrated.profiles.windows": {
    "PowerShell": {
      "source": "PowerShell",
      "icon": "terminal-powershell"
    },
    "Command Prompt": {
      "path": [
        "${env:windir}\\Sysnative\\cmd.exe",
        "${env:windir}\\System32\\cmd.exe"
      ],
      "args": [],
      "icon": "terminal-cmd"
    },
    "Git Bash": {
      "source": "Git Bash"
    }
  },

  // Controls how terminal reacts to right click.
  //  - default: Show the context menu.
  //  - copyPaste: Copy when there is a selection, otherwise paste.
  //  - paste: Paste on right click.
  //  - selectWord: Select the word under the cursor and show the context menu.
  //  - nothing: Do nothing and pass event to terminal.
  "terminal.integrated.rightClickBehavior": "selectWord",

  // Controls the maximum amount of lines the terminal keeps in its buffer.
  "terminal.integrated.scrollback": 1000,

  // Dispatches most keybindings to the terminal instead of the workbench, overriding `terminal.integrated.commandsToSkipShell`, which can be used alternatively for fine tuning.
  "terminal.integrated.sendKeybindingsToShell": false,

  // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
  // The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
  "terminal.integrated.shell.linux": null,

  // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
  // The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
  "terminal.integrated.shell.osx": null,

  // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
  // The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
  "terminal.integrated.shell.windows": null,

  // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
  // The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
  "terminal.integrated.shellArgs.linux": [],

  // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
  // The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
  "terminal.integrated.shellArgs.osx": [
    "-l"
  ],

  // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
  // The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
  "terminal.integrated.shellArgs.windows": [],

  // Controls the icon that will be used for skipped/empty commands. Set to `""` to hide the icon or disable decorations with `terminal.integrated.shellIntegration.decorationsEnabled`.
  "terminal.integrated.shellIntegration.decorationIcon": "circle-outline",

  // Controls the icon that will be used for each command in terminals with shell integration enabled that do have an associated exit code. Set to `""` to hide the icon or disable decorations with `terminal.integrated.shellIntegration.decorationsEnabled`.
  "terminal.integrated.shellIntegration.decorationIconError": "error-small",

  // Controls the icon that will be used for each command in terminals with shell integration enabled that do not have an associated exit code. Set to `""` to hide the icon or disable decorations with `terminal.integrated.shellIntegration.decorationsEnabled`.
  "terminal.integrated.shellIntegration.decorationIconSuccess": "primitive-dot",

  // When shell integration is enabled, adds a decoration for each command.
  //  - both: Show decorations in the gutter (left) and overview ruler (right)
  //  - gutter: Show gutter decorations to the left of the terminal
  //  - overviewRuler: Show overview ruler decorations to the right of the terminal
  //  - never: Do not show decorations
  "terminal.integrated.shellIntegration.decorationsEnabled": "both",

  // Determines whether or not shell integration is auto-injected to support features like enhanced command tracking and current working directory detection.
  //
  // Shell integration works by injecting the shell with a startup script. The script gives VS Code insight into what is happening within the terminal.
  //
  // Supported shells:
  //
  // - Linux/macOS: bash, pwsh, zsh
  //  - Windows: pwsh
  //
  // This setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.
  //
  //  Note that the script injection may not work if you have custom arguments defined in the terminal profile, a [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand), or other unsupported setup. To disable decorations, see `terminal.integrated.shellIntegrations.decorationsEnabled`
  "terminal.integrated.shellIntegration.enabled": true,

  // Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history.
  "terminal.integrated.shellIntegration.history": 100,

  // Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
  "terminal.integrated.showExitAlert": true,

  // Whether to show hovers for links in the terminal output.
  "terminal.integrated.showLinkHover": true,

  // Controls the working directory a split terminal starts with.
  //  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
  //  - initial: A new split terminal will use the working directory that the parent terminal started with.
  //  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
  "terminal.integrated.splitCwd": "inherited",

  // A theme color ID to associate with terminal icons by default.
  "terminal.integrated.tabs.defaultColor": null,

  // A codicon ID to associate with terminal icons by default.
  //  - add: $(add)
  //  - plus: $(plus)
  //  - gist-new: $(gist-new)
  //  - repo-create: $(repo-create)
  //  - lightbulb: $(lightbulb)
  //  - light-bulb: $(light-bulb)
  //  - repo: $(repo)
  //  - repo-delete: $(repo-delete)
  //  - gist-fork: $(gist-fork)
  //  - repo-forked: $(repo-forked)
  //  - git-pull-request: $(git-pull-request)
  //  - git-pull-request-abandoned: $(git-pull-request-abandoned)
  //  - record-keys: $(record-keys)
  //  - keyboard: $(keyboard)
  //  - tag: $(tag)
  //  - tag-add: $(tag-add)
  //  - tag-remove: $(tag-remove)
  //  - person: $(person)
  //  - person-follow: $(person-follow)
  //  - person-outline: $(person-outline)
  //  - person-filled: $(person-filled)
  //  - git-branch: $(git-branch)
  //  - git-branch-create: $(git-branch-create)
  //  - git-branch-delete: $(git-branch-delete)
  //  - source-control: $(source-control)
  //  - mirror: $(mirror)
  //  - mirror-public: $(mirror-public)
  //  - star: $(star)
  //  - star-add: $(star-add)
  //  - star-delete: $(star-delete)
  //  - star-empty: $(star-empty)
  //  - comment: $(comment)
  //  - comment-add: $(comment-add)
  //  - alert: $(alert)
  //  - warning: $(warning)
  //  - search: $(search)
  //  - search-save: $(search-save)
  //  - log-out: $(log-out)
  //  - sign-out: $(sign-out)
  //  - log-in: $(log-in)
  //  - sign-in: $(sign-in)
  //  - eye: $(eye)
  //  - eye-unwatch: $(eye-unwatch)
  //  - eye-watch: $(eye-watch)
  //  - circle-filled: $(circle-filled)
  //  - primitive-dot: $(primitive-dot)
  //  - close-dirty: $(close-dirty)
  //  - debug-breakpoint: $(debug-breakpoint)
  //  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
  //  - debug-hint: $(debug-hint)
  //  - primitive-square: $(primitive-square)
  //  - edit: $(edit)
  //  - pencil: $(pencil)
  //  - info: $(info)
  //  - issue-opened: $(issue-opened)
  //  - gist-private: $(gist-private)
  //  - git-fork-private: $(git-fork-private)
  //  - lock: $(lock)
  //  - mirror-private: $(mirror-private)
  //  - close: $(close)
  //  - remove-close: $(remove-close)
  //  - x: $(x)
  //  - repo-sync: $(repo-sync)
  //  - sync: $(sync)
  //  - clone: $(clone)
  //  - desktop-download: $(desktop-download)
  //  - beaker: $(beaker)
  //  - microscope: $(microscope)
  //  - vm: $(vm)
  //  - device-desktop: $(device-desktop)
  //  - file: $(file)
  //  - file-text: $(file-text)
  //  - more: $(more)
  //  - ellipsis: $(ellipsis)
  //  - kebab-horizontal: $(kebab-horizontal)
  //  - mail-reply: $(mail-reply)
  //  - reply: $(reply)
  //  - organization: $(organization)
  //  - organization-filled: $(organization-filled)
  //  - organization-outline: $(organization-outline)
  //  - new-file: $(new-file)
  //  - file-add: $(file-add)
  //  - new-folder: $(new-folder)
  //  - file-directory-create: $(file-directory-create)
  //  - trash: $(trash)
  //  - trashcan: $(trashcan)
  //  - history: $(history)
  //  - clock: $(clock)
  //  - folder: $(folder)
  //  - file-directory: $(file-directory)
  //  - symbol-folder: $(symbol-folder)
  //  - logo-github: $(logo-github)
  //  - mark-github: $(mark-github)
  //  - github: $(github)
  //  - terminal: $(terminal)
  //  - console: $(console)
  //  - repl: $(repl)
  //  - zap: $(zap)
  //  - symbol-event: $(symbol-event)
  //  - error: $(error)
  //  - stop: $(stop)
  //  - variable: $(variable)
  //  - symbol-variable: $(symbol-variable)
  //  - array: $(array)
  //  - symbol-array: $(symbol-array)
  //  - symbol-module: $(symbol-module)
  //  - symbol-package: $(symbol-package)
  //  - symbol-namespace: $(symbol-namespace)
  //  - symbol-object: $(symbol-object)
  //  - symbol-method: $(symbol-method)
  //  - symbol-function: $(symbol-function)
  //  - symbol-constructor: $(symbol-constructor)
  //  - symbol-boolean: $(symbol-boolean)
  //  - symbol-null: $(symbol-null)
  //  - symbol-numeric: $(symbol-numeric)
  //  - symbol-number: $(symbol-number)
  //  - symbol-structure: $(symbol-structure)
  //  - symbol-struct: $(symbol-struct)
  //  - symbol-parameter: $(symbol-parameter)
  //  - symbol-type-parameter: $(symbol-type-parameter)
  //  - symbol-key: $(symbol-key)
  //  - symbol-text: $(symbol-text)
  //  - symbol-reference: $(symbol-reference)
  //  - go-to-file: $(go-to-file)
  //  - symbol-enum: $(symbol-enum)
  //  - symbol-value: $(symbol-value)
  //  - symbol-ruler: $(symbol-ruler)
  //  - symbol-unit: $(symbol-unit)
  //  - activate-breakpoints: $(activate-breakpoints)
  //  - archive: $(archive)
  //  - arrow-both: $(arrow-both)
  //  - arrow-down: $(arrow-down)
  //  - arrow-left: $(arrow-left)
  //  - arrow-right: $(arrow-right)
  //  - arrow-small-down: $(arrow-small-down)
  //  - arrow-small-left: $(arrow-small-left)
  //  - arrow-small-right: $(arrow-small-right)
  //  - arrow-small-up: $(arrow-small-up)
  //  - arrow-up: $(arrow-up)
  //  - bell: $(bell)
  //  - bold: $(bold)
  //  - book: $(book)
  //  - bookmark: $(bookmark)
  //  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
  //  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
  //  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
  //  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
  //  - debug-breakpoint-data: $(debug-breakpoint-data)
  //  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
  //  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
  //  - debug-breakpoint-log: $(debug-breakpoint-log)
  //  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
  //  - briefcase: $(briefcase)
  //  - broadcast: $(broadcast)
  //  - browser: $(browser)
  //  - bug: $(bug)
  //  - calendar: $(calendar)
  //  - case-sensitive: $(case-sensitive)
  //  - check: $(check)
  //  - checklist: $(checklist)
  //  - chevron-down: $(chevron-down)
  //  - drop-down-button: $(drop-down-button)
  //  - chevron-left: $(chevron-left)
  //  - chevron-right: $(chevron-right)
  //  - chevron-up: $(chevron-up)
  //  - chrome-close: $(chrome-close)
  //  - chrome-maximize: $(chrome-maximize)
  //  - chrome-minimize: $(chrome-minimize)
  //  - chrome-restore: $(chrome-restore)
  //  - circle-outline: $(circle-outline)
  //  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
  //  - circle-slash: $(circle-slash)
  //  - circuit-board: $(circuit-board)
  //  - clear-all: $(clear-all)
  //  - clippy: $(clippy)
  //  - close-all: $(close-all)
  //  - cloud-download: $(cloud-download)
  //  - cloud-upload: $(cloud-upload)
  //  - code: $(code)
  //  - collapse-all: $(collapse-all)
  //  - color-mode: $(color-mode)
  //  - comment-discussion: $(comment-discussion)
  //  - compare-changes: $(compare-changes)
  //  - credit-card: $(credit-card)
  //  - dash: $(dash)
  //  - dashboard: $(dashboard)
  //  - database: $(database)
  //  - debug-continue: $(debug-continue)
  //  - debug-disconnect: $(debug-disconnect)
  //  - debug-pause: $(debug-pause)
  //  - debug-restart: $(debug-restart)
  //  - debug-start: $(debug-start)
  //  - debug-step-into: $(debug-step-into)
  //  - debug-step-out: $(debug-step-out)
  //  - debug-step-over: $(debug-step-over)
  //  - debug-stop: $(debug-stop)
  //  - debug: $(debug)
  //  - device-camera-video: $(device-camera-video)
  //  - device-camera: $(device-camera)
  //  - device-mobile: $(device-mobile)
  //  - diff-added: $(diff-added)
  //  - diff-ignored: $(diff-ignored)
  //  - diff-modified: $(diff-modified)
  //  - diff-removed: $(diff-removed)
  //  - diff-renamed: $(diff-renamed)
  //  - diff: $(diff)
  //  - discard: $(discard)
  //  - editor-layout: $(editor-layout)
  //  - empty-window: $(empty-window)
  //  - exclude: $(exclude)
  //  - extensions: $(extensions)
  //  - eye-closed: $(eye-closed)
  //  - file-binary: $(file-binary)
  //  - file-code: $(file-code)
  //  - file-media: $(file-media)
  //  - file-pdf: $(file-pdf)
  //  - file-submodule: $(file-submodule)
  //  - file-symlink-directory: $(file-symlink-directory)
  //  - file-symlink-file: $(file-symlink-file)
  //  - file-zip: $(file-zip)
  //  - files: $(files)
  //  - filter: $(filter)
  //  - flame: $(flame)
  //  - fold-down: $(fold-down)
  //  - fold-up: $(fold-up)
  //  - fold: $(fold)
  //  - folder-active: $(folder-active)
  //  - folder-opened: $(folder-opened)
  //  - gear: $(gear)
  //  - gift: $(gift)
  //  - gist-secret: $(gist-secret)
  //  - gist: $(gist)
  //  - git-commit: $(git-commit)
  //  - git-compare: $(git-compare)
  //  - git-merge: $(git-merge)
  //  - github-action: $(github-action)
  //  - github-alt: $(github-alt)
  //  - globe: $(globe)
  //  - grabber: $(grabber)
  //  - graph: $(graph)
  //  - gripper: $(gripper)
  //  - heart: $(heart)
  //  - home: $(home)
  //  - horizontal-rule: $(horizontal-rule)
  //  - hubot: $(hubot)
  //  - inbox: $(inbox)
  //  - issue-closed: $(issue-closed)
  //  - issue-reopened: $(issue-reopened)
  //  - issues: $(issues)
  //  - italic: $(italic)
  //  - jersey: $(jersey)
  //  - json: $(json)
  //  - kebab-vertical: $(kebab-vertical)
  //  - key: $(key)
  //  - law: $(law)
  //  - lightbulb-autofix: $(lightbulb-autofix)
  //  - link-external: $(link-external)
  //  - link: $(link)
  //  - list-ordered: $(list-ordered)
  //  - list-unordered: $(list-unordered)
  //  - live-share: $(live-share)
  //  - loading: $(loading)
  //  - location: $(location)
  //  - mail-read: $(mail-read)
  //  - mail: $(mail)
  //  - markdown: $(markdown)
  //  - megaphone: $(megaphone)
  //  - mention: $(mention)
  //  - milestone: $(milestone)
  //  - mortar-board: $(mortar-board)
  //  - move: $(move)
  //  - multiple-windows: $(multiple-windows)
  //  - mute: $(mute)
  //  - no-newline: $(no-newline)
  //  - note: $(note)
  //  - octoface: $(octoface)
  //  - open-preview: $(open-preview)
  //  - package: $(package)
  //  - paintcan: $(paintcan)
  //  - pin: $(pin)
  //  - play: $(play)
  //  - run: $(run)
  //  - plug: $(plug)
  //  - preserve-case: $(preserve-case)
  //  - preview: $(preview)
  //  - project: $(project)
  //  - pulse: $(pulse)
  //  - question: $(question)
  //  - quote: $(quote)
  //  - radio-tower: $(radio-tower)
  //  - reactions: $(reactions)
  //  - references: $(references)
  //  - refresh: $(refresh)
  //  - regex: $(regex)
  //  - remote-explorer: $(remote-explorer)
  //  - remote: $(remote)
  //  - remove: $(remove)
  //  - replace-all: $(replace-all)
  //  - replace: $(replace)
  //  - repo-clone: $(repo-clone)
  //  - repo-force-push: $(repo-force-push)
  //  - repo-pull: $(repo-pull)
  //  - repo-push: $(repo-push)
  //  - report: $(report)
  //  - request-changes: $(request-changes)
  //  - rocket: $(rocket)
  //  - root-folder-opened: $(root-folder-opened)
  //  - root-folder: $(root-folder)
  //  - rss: $(rss)
  //  - ruby: $(ruby)
  //  - save-all: $(save-all)
  //  - save-as: $(save-as)
  //  - save: $(save)
  //  - screen-full: $(screen-full)
  //  - screen-normal: $(screen-normal)
  //  - search-stop: $(search-stop)
  //  - server: $(server)
  //  - settings-gear: $(settings-gear)
  //  - settings: $(settings)
  //  - shield: $(shield)
  //  - smiley: $(smiley)
  //  - sort-precedence: $(sort-precedence)
  //  - split-horizontal: $(split-horizontal)
  //  - split-vertical: $(split-vertical)
  //  - squirrel: $(squirrel)
  //  - star-full: $(star-full)
  //  - star-half: $(star-half)
  //  - symbol-class: $(symbol-class)
  //  - symbol-color: $(symbol-color)
  //  - symbol-customcolor: $(symbol-customcolor)
  //  - symbol-constant: $(symbol-constant)
  //  - symbol-enum-member: $(symbol-enum-member)
  //  - symbol-field: $(symbol-field)
  //  - symbol-file: $(symbol-file)
  //  - symbol-interface: $(symbol-interface)
  //  - symbol-keyword: $(symbol-keyword)
  //  - symbol-misc: $(symbol-misc)
  //  - symbol-operator: $(symbol-operator)
  //  - symbol-property: $(symbol-property)
  //  - wrench: $(wrench)
  //  - wrench-subaction: $(wrench-subaction)
  //  - symbol-snippet: $(symbol-snippet)
  //  - tasklist: $(tasklist)
  //  - telescope: $(telescope)
  //  - text-size: $(text-size)
  //  - three-bars: $(three-bars)
  //  - thumbsdown: $(thumbsdown)
  //  - thumbsup: $(thumbsup)
  //  - tools: $(tools)
  //  - triangle-down: $(triangle-down)
  //  - triangle-left: $(triangle-left)
  //  - triangle-right: $(triangle-right)
  //  - triangle-up: $(triangle-up)
  //  - twitter: $(twitter)
  //  - unfold: $(unfold)
  //  - unlock: $(unlock)
  //  - unmute: $(unmute)
  //  - unverified: $(unverified)
  //  - verified: $(verified)
  //  - versions: $(versions)
  //  - vm-active: $(vm-active)
  //  - vm-outline: $(vm-outline)
  //  - vm-running: $(vm-running)
  //  - watch: $(watch)
  //  - whitespace: $(whitespace)
  //  - whole-word: $(whole-word)
  //  - window: $(window)
  //  - word-wrap: $(word-wrap)
  //  - zoom-in: $(zoom-in)
  //  - zoom-out: $(zoom-out)
  //  - list-filter: $(list-filter)
  //  - list-flat: $(list-flat)
  //  - list-selection: $(list-selection)
  //  - selection: $(selection)
  //  - list-tree: $(list-tree)
  //  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
  //  - debug-breakpoint-function: $(debug-breakpoint-function)
  //  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
  //  - debug-stackframe-active: $(debug-stackframe-active)
  //  - circle-small-filled: $(circle-small-filled)
  //  - debug-stackframe-dot: $(debug-stackframe-dot)
  //  - debug-stackframe: $(debug-stackframe)
  //  - debug-stackframe-focused: $(debug-stackframe-focused)
  //  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
  //  - symbol-string: $(symbol-string)
  //  - debug-reverse-continue: $(debug-reverse-continue)
  //  - debug-step-back: $(debug-step-back)
  //  - debug-restart-frame: $(debug-restart-frame)
  //  - call-incoming: $(call-incoming)
  //  - call-outgoing: $(call-outgoing)
  //  - menu: $(menu)
  //  - expand-all: $(expand-all)
  //  - feedback: $(feedback)
  //  - group-by-ref-type: $(group-by-ref-type)
  //  - ungroup-by-ref-type: $(ungroup-by-ref-type)
  //  - account: $(account)
  //  - bell-dot: $(bell-dot)
  //  - debug-console: $(debug-console)
  //  - library: $(library)
  //  - output: $(output)
  //  - run-all: $(run-all)
  //  - sync-ignored: $(sync-ignored)
  //  - pinned: $(pinned)
  //  - github-inverted: $(github-inverted)
  //  - debug-alt: $(debug-alt)
  //  - server-process: $(server-process)
  //  - server-environment: $(server-environment)
  //  - pass: $(pass)
  //  - stop-circle: $(stop-circle)
  //  - play-circle: $(play-circle)
  //  - record: $(record)
  //  - debug-alt-small: $(debug-alt-small)
  //  - vm-connect: $(vm-connect)
  //  - cloud: $(cloud)
  //  - merge: $(merge)
  //  - export: $(export)
  //  - graph-left: $(graph-left)
  //  - magnet: $(magnet)
  //  - notebook: $(notebook)
  //  - redo: $(redo)
  //  - check-all: $(check-all)
  //  - pinned-dirty: $(pinned-dirty)
  //  - pass-filled: $(pass-filled)
  //  - circle-large-filled: $(circle-large-filled)
  //  - circle-large-outline: $(circle-large-outline)
  //  - combine: $(combine)
  //  - gather: $(gather)
  //  - table: $(table)
  //  - variable-group: $(variable-group)
  //  - type-hierarchy: $(type-hierarchy)
  //  - type-hierarchy-sub: $(type-hierarchy-sub)
  //  - type-hierarchy-super: $(type-hierarchy-super)
  //  - git-pull-request-create: $(git-pull-request-create)
  //  - run-above: $(run-above)
  //  - run-below: $(run-below)
  //  - notebook-template: $(notebook-template)
  //  - debug-rerun: $(debug-rerun)
  //  - workspace-trusted: $(workspace-trusted)
  //  - workspace-untrusted: $(workspace-untrusted)
  //  - workspace-unspecified: $(workspace-unspecified)
  //  - terminal-cmd: $(terminal-cmd)
  //  - terminal-debian: $(terminal-debian)
  //  - terminal-linux: $(terminal-linux)
  //  - terminal-powershell: $(terminal-powershell)
  //  - terminal-tmux: $(terminal-tmux)
  //  - terminal-ubuntu: $(terminal-ubuntu)
  //  - terminal-bash: $(terminal-bash)
  //  - arrow-swap: $(arrow-swap)
  //  - copy: $(copy)
  //  - person-add: $(person-add)
  //  - filter-filled: $(filter-filled)
  //  - wand: $(wand)
  //  - debug-line-by-line: $(debug-line-by-line)
  //  - inspect: $(inspect)
  //  - layers: $(layers)
  //  - layers-dot: $(layers-dot)
  //  - layers-active: $(layers-active)
  //  - compass: $(compass)
  //  - compass-dot: $(compass-dot)
  //  - compass-active: $(compass-active)
  //  - azure: $(azure)
  //  - issue-draft: $(issue-draft)
  //  - git-pull-request-closed: $(git-pull-request-closed)
  //  - git-pull-request-draft: $(git-pull-request-draft)
  //  - debug-all: $(debug-all)
  //  - debug-coverage: $(debug-coverage)
  //  - run-errors: $(run-errors)
  //  - folder-library: $(folder-library)
  //  - debug-continue-small: $(debug-continue-small)
  //  - beaker-stop: $(beaker-stop)
  //  - graph-line: $(graph-line)
  //  - graph-scatter: $(graph-scatter)
  //  - pie-chart: $(pie-chart)
  //  - bracket: $(bracket)
  //  - bracket-dot: $(bracket-dot)
  //  - bracket-error: $(bracket-error)
  //  - lock-small: $(lock-small)
  //  - azure-devops: $(azure-devops)
  //  - verified-filled: $(verified-filled)
  //  - newline: $(newline)
  //  - layout: $(layout)
  //  - layout-activitybar-left: $(layout-activitybar-left)
  //  - layout-activitybar-right: $(layout-activitybar-right)
  //  - layout-panel-left: $(layout-panel-left)
  //  - layout-panel-center: $(layout-panel-center)
  //  - layout-panel-justify: $(layout-panel-justify)
  //  - layout-panel-right: $(layout-panel-right)
  //  - layout-panel: $(layout-panel)
  //  - layout-sidebar-left: $(layout-sidebar-left)
  //  - layout-sidebar-right: $(layout-sidebar-right)
  //  - layout-statusbar: $(layout-statusbar)
  //  - layout-menubar: $(layout-menubar)
  //  - layout-centered: $(layout-centered)
  //  - layout-sidebar-right-off: $(layout-sidebar-right-off)
  //  - layout-panel-off: $(layout-panel-off)
  //  - layout-sidebar-left-off: $(layout-sidebar-left-off)
  //  - target: $(target)
  //  - indent: $(indent)
  //  - record-small: $(record-small)
  //  - error-small: $(error-small)
  //  - arrow-circle-down: $(arrow-circle-down)
  //  - arrow-circle-left: $(arrow-circle-left)
  //  - arrow-circle-right: $(arrow-circle-right)
  //  - arrow-circle-up: $(arrow-circle-up)
  //  - heart-filled: $(heart-filled)
  //  - map: $(map)
  //  - map-filled: $(map-filled)
  //  - circle-small: $(circle-small)
  //  - bell-slash: $(bell-slash)
  //  - bell-slash-dot: $(bell-slash-dot)
  //  - comment-unresolved: $(comment-unresolved)
  //  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
  //  - git-pull-request-new-changes: $(git-pull-request-new-changes)
  //  - dialog-error: $(dialog-error)
  //  - dialog-warning: $(dialog-warning)
  //  - dialog-info: $(dialog-info)
  //  - dialog-close: $(dialog-close)
  //  - tree-item-expanded: $(tree-item-expanded)
  //  - tree-filter-on-type-on: $(tree-filter-on-type-on)
  //  - tree-filter-on-type-off: $(tree-filter-on-type-off)
  //  - tree-filter-clear: $(tree-filter-clear)
  //  - tree-item-loading: $(tree-item-loading)
  //  - menu-selection: $(menu-selection)
  //  - menu-submenu: $(menu-submenu)
  //  - menubar-more: $(menubar-more)
  //  - scrollbar-button-left: $(scrollbar-button-left)
  //  - scrollbar-button-right: $(scrollbar-button-right)
  //  - scrollbar-button-up: $(scrollbar-button-up)
  //  - scrollbar-button-down: $(scrollbar-button-down)
  //  - toolbar-more: $(toolbar-more)
  //  - quick-input-back: $(quick-input-back)
  "terminal.integrated.tabs.defaultIcon": "terminal",

  // Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:
  // - `${cwd}`: the terminal's current working directory
  // - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
  // - `${workspaceFolder}`: the workspace in which the terminal was launched
  // - `${local}`: indicates a local terminal in a remote workspace
  // - `${process}`: the name of the terminal process
  // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
  // - `${sequence}`: the name provided to the terminal by the process
  // - `${task}`: indicates this terminal is associated with a task
  "terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

  // Controls whether terminal tab statuses support animation (eg. in progress tasks).
  "terminal.integrated.tabs.enableAnimation": true,

  // Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.
  "terminal.integrated.tabs.enabled": true,

  // Controls whether focusing the terminal of a tab happens on double or single click.
  //  - singleClick: Focus the terminal when clicking a terminal tab
  //  - doubleClick: Focus the terminal when double clicking a terminal tab
  "terminal.integrated.tabs.focusMode": "doubleClick",

  // Controls whether the terminal tabs view will hide under certain conditions.
  //  - never: Never hide the terminal tabs view
  //  - singleTerminal: Hide the terminal tabs view when there is only a single terminal opened
  //  - singleGroup: Hide the terminal tabs view when there is only a single terminal group opened
  "terminal.integrated.tabs.hideCondition": "singleTerminal",

  // Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).
  //  - left: Show the terminal tabs view to the left of the terminal
  //  - right: Show the terminal tabs view to the right of the terminal
  "terminal.integrated.tabs.location": "right",

  // Separator used by `terminal.integrated.tabs.title` and `terminal.integrated.tabs.title`.
  "terminal.integrated.tabs.separator": " - ",

  // Controls whether terminal split and kill buttons are displays next to the new terminal button.
  //  - always: Always show the actions
  //  - singleTerminal: Show the actions when it is the only terminal opened
  //  - singleTerminalOrNarrow: Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state
  //  - never: Never show the actions
  "terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

  // Shows the active terminal information in the view, this is particularly useful when the title within the tabs aren't visible.
  //  - always: Always show the active terminal
  //  - singleTerminal: Show the active terminal when it is the only terminal opened
  //  - singleTerminalOrNarrow: Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state
  //  - never: Never show the active terminal
  "terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

  // Controls the terminal title. Variables are substituted based on the context:
  // - `${cwd}`: the terminal's current working directory
  // - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled.
  // - `${workspaceFolder}`: the workspace in which the terminal was launched
  // - `${local}`: indicates a local terminal in a remote workspace
  // - `${process}`: the name of the terminal process
  // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
  // - `${sequence}`: the name provided to the terminal by the process
  // - `${task}`: indicates this terminal is associated with a task
  "terminal.integrated.tabs.title": "${process}",

  // Controls what version of unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
  //  - 6: Version 6 of unicode, this is an older version which should work better on older systems.
  //  - 11: Version 11 of unicode, this version provides better support on modern systems that use modern versions of unicode.
  "terminal.integrated.unicodeVersion": "11",

  // Controls whether or not WSL distros are shown in the terminal dropdown
  "terminal.integrated.useWslProfiles": true,

  // Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
  "terminal.integrated.windowsEnableConpty": true,

  // A string containing all characters to be considered word separators by the double click to select word feature.
  "terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’"

},
{
  // Enable automatic tasks in the folder.
  //  - on: Always
  //  - auto: Prompt for permission for each folder
  //  - off: Never
  "task.allowAutomaticTasks": "auto",

  // Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
  "task.autoDetect": "on",

  // On window reload, reconnect to running watch/background tasks. Note that this is experimental, so you could encounter issues.
  "task.experimental.reconnection": false,

  // Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
  "task.problemMatchers.neverPrompt": false,

  // Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.
  "task.quickOpen.detail": true,

  // Controls the number of recent items tracked in task quick open dialog.
  "task.quickOpen.history": 30,

  // Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
  "task.quickOpen.showAll": false,

  // Controls whether the task quick pick is skipped when there is only one task to pick from.
  "task.quickOpen.skip": false,

  // Save all dirty editors before running a task.
  //  - always: Always saves all editors before running.
  //  - never: Never saves editors before running.
  //  - prompt: Prompts whether to save editors before running.
  "task.saveBeforeRun": "always",

  // Shows decorations at points of interest in the terminal buffer such as the first problem found via a watch task. Note that this will only take effect for future tasks.
  "task.showDecorations": true,

  // Configures whether a warning is shown when a provider is slow
  "task.slowProviderWarning": true

},
{
  // Controls whether Problems view should automatically reveal files when opening them.
  "problems.autoReveal": true,

  // Show Errors & Warnings on files and folder.
  "problems.decorations.enabled": true,

  // Controls the default view mode of the Problems view.
  "problems.defaultViewMode": "tree",

  // When enabled shows the current problem in the status bar.
  "problems.showCurrentInStatus": false,

  // Controls the order in which problems are navigated.
  //  - severity: Navigate problems ordered by severity
  //  - position: Navigate problems ordered by position
  "problems.sortOrder": "severity"

},
{
  // Enable/disable navigation breadcrumbs.
  "breadcrumbs.enabled": true,

  // Controls whether and how file paths are shown in the breadcrumbs view.
  //  - on: Show the file path in the breadcrumbs view.
  //  - off: Do not show the file path in the breadcrumbs view.
  //  - last: Only show the last element of the file path in the breadcrumbs view.
  "breadcrumbs.filePath": "on",

  // Render breadcrumb items with icons.
  "breadcrumbs.icons": true,

  // When enabled breadcrumbs show `array`-symbols.
  "breadcrumbs.showArrays": true,

  // When enabled breadcrumbs show `boolean`-symbols.
  "breadcrumbs.showBooleans": true,

  // When enabled breadcrumbs show `class`-symbols.
  "breadcrumbs.showClasses": true,

  // When enabled breadcrumbs show `constant`-symbols.
  "breadcrumbs.showConstants": true,

  // When enabled breadcrumbs show `constructor`-symbols.
  "breadcrumbs.showConstructors": true,

  // When enabled breadcrumbs show `enumMember`-symbols.
  "breadcrumbs.showEnumMembers": true,

  // When enabled breadcrumbs show `enum`-symbols.
  "breadcrumbs.showEnums": true,

  // When enabled breadcrumbs show `event`-symbols.
  "breadcrumbs.showEvents": true,

  // When enabled breadcrumbs show `field`-symbols.
  "breadcrumbs.showFields": true,

  // When enabled breadcrumbs show `file`-symbols.
  "breadcrumbs.showFiles": true,

  // When enabled breadcrumbs show `function`-symbols.
  "breadcrumbs.showFunctions": true,

  // When enabled breadcrumbs show `interface`-symbols.
  "breadcrumbs.showInterfaces": true,

  // When enabled breadcrumbs show `key`-symbols.
  "breadcrumbs.showKeys": true,

  // When enabled breadcrumbs show `method`-symbols.
  "breadcrumbs.showMethods": true,

  // When enabled breadcrumbs show `module`-symbols.
  "breadcrumbs.showModules": true,

  // When enabled breadcrumbs show `namespace`-symbols.
  "breadcrumbs.showNamespaces": true,

  // When enabled breadcrumbs show `null`-symbols.
  "breadcrumbs.showNull": true,

  // When enabled breadcrumbs show `number`-symbols.
  "breadcrumbs.showNumbers": true,

  // When enabled breadcrumbs show `object`-symbols.
  "breadcrumbs.showObjects": true,

  // When enabled breadcrumbs show `operator`-symbols.
  "breadcrumbs.showOperators": true,

  // When enabled breadcrumbs show `package`-symbols.
  "breadcrumbs.showPackages": true,

  // When enabled breadcrumbs show `property`-symbols.
  "breadcrumbs.showProperties": true,

  // When enabled breadcrumbs show `string`-symbols.
  "breadcrumbs.showStrings": true,

  // When enabled breadcrumbs show `struct`-symbols.
  "breadcrumbs.showStructs": true,

  // When enabled breadcrumbs show `typeParameter`-symbols.
  "breadcrumbs.showTypeParameters": true,

  // When enabled breadcrumbs show `variable`-symbols.
  "breadcrumbs.showVariables": true,

  // Controls whether and how symbols are shown in the breadcrumbs view.
  //  - on: Show all symbols in the breadcrumbs view.
  //  - off: Do not show symbols in the breadcrumbs view.
  //  - last: Only show the current symbol in the breadcrumbs view.
  "breadcrumbs.symbolPath": "on",

  // Controls how symbols are sorted in the breadcrumbs outline view.
  //  - position: Show symbol outline in file position order.
  //  - name: Show symbol outline in alphabetical order.
  //  - type: Show symbol outline in symbol type order.
  "breadcrumbs.symbolSortOrder": "position"

},
{
  // If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `telemetry.telemetryLevel` setting.
  // Enable crash reports to be collected. This helps us improve stability.
  // This option requires restart to take effect.
  "telemetry.enableCrashReporter": true,

  // If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the `telemetry.telemetryLevel` setting.
  // Enable diagnostic data to be collected. This helps us to better understand how Visual Studio Code is performing and where improvements need to be made. [Read more](https://go.microsoft.com/fwlink/?LinkId=786907) about what we collect and our privacy statement.
  "telemetry.enableTelemetry": true,

  //
  // Controls Visual Studio Code telemetry, first-party extension telemetry and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension's documentation to be sure. Telemetry helps us better understand how Visual Studio Code is performing, where improvements need to be made, and how features are being used. Read more about the [data we collect](https://aka.ms/vscode-telemetry) and our [privacy statement](https://go.microsoft.com/fwlink/?LinkId=786907). A full restart of the application is necessary for crash reporting changes to take effect.
  //
  // &nbsp;
  //
  // The following table outlines the data sent with each setting:
  //
  // |       | Crash Reports | Error Telemetry | Usage Data |
  // |:------|:---------------------:|:---------------:|:--------------:|
  // | all   |            ✓          |        ✓        |        ✓       |
  // | error |            ✓          |        ✓        |        -       |
  // | crash |            ✓          |        -        |        -       |
  // | off   |            -          |        -        |        -       |
  //
  //
  // &nbsp;
  //
  // ****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*
  //
  //  - all: Sends usage data, errors, and crash reports.
  //  - error: Sends general error telemetry and crash reports.
  //  - crash: Sends OS level crash reports.
  //  - off: Disables all product telemetry.
  "telemetry.telemetryLevel": "all"

},
{
  // Render Outline Elements with Icons.
  "outline.icons": true,

  // Use badges for Errors & Warnings.
  "outline.problems.badges": true,

  // Use colors for Errors & Warnings.
  "outline.problems.colors": true,

  // Show Errors & Warnings on Outline Elements.
  "outline.problems.enabled": true,

  // When enabled outline shows `array`-symbols.
  "outline.showArrays": true,

  // When enabled outline shows `boolean`-symbols.
  "outline.showBooleans": true,

  // When enabled outline shows `class`-symbols.
  "outline.showClasses": true,

  // When enabled outline shows `constant`-symbols.
  "outline.showConstants": true,

  // When enabled outline shows `constructor`-symbols.
  "outline.showConstructors": true,

  // When enabled outline shows `enumMember`-symbols.
  "outline.showEnumMembers": true,

  // When enabled outline shows `enum`-symbols.
  "outline.showEnums": true,

  // When enabled outline shows `event`-symbols.
  "outline.showEvents": true,

  // When enabled outline shows `field`-symbols.
  "outline.showFields": true,

  // When enabled outline shows `file`-symbols.
  "outline.showFiles": true,

  // When enabled outline shows `function`-symbols.
  "outline.showFunctions": true,

  // When enabled outline shows `interface`-symbols.
  "outline.showInterfaces": true,

  // When enabled outline shows `key`-symbols.
  "outline.showKeys": true,

  // When enabled outline shows `method`-symbols.
  "outline.showMethods": true,

  // When enabled outline shows `module`-symbols.
  "outline.showModules": true,

  // When enabled outline shows `namespace`-symbols.
  "outline.showNamespaces": true,

  // When enabled outline shows `null`-symbols.
  "outline.showNull": true,

  // When enabled outline shows `number`-symbols.
  "outline.showNumbers": true,

  // When enabled outline shows `object`-symbols.
  "outline.showObjects": true,

  // When enabled outline shows `operator`-symbols.
  "outline.showOperators": true,

  // When enabled outline shows `package`-symbols.
  "outline.showPackages": true,

  // When enabled outline shows `property`-symbols.
  "outline.showProperties": true,

  // When enabled outline shows `string`-symbols.
  "outline.showStrings": true,

  // When enabled outline shows `struct`-symbols.
  "outline.showStructs": true,

  // When enabled outline shows `typeParameter`-symbols.
  "outline.showTypeParameters": true,

  // When enabled outline shows `variable`-symbols.
  "outline.showVariables": true

},
{
  // An array of Timeline sources that should be excluded from the Timeline view.
  "timeline.excludeSources": null,

  // Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.
  "timeline.pageOnScroll": false,

  // The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view.
  "timeline.pageSize": null

},
{
  // Configure settings to be overridden for the css language.
  "[css]":  {
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the django-html language.
  "[django-html]":  {
    "editor.quickSuggestions": {
        "other": true,
        "comments": true,
        "strings": true
    }
  },

  // Configure settings to be overridden for the dockercompose language.
  "[dockercompose]":  {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced",
    "editor.quickSuggestions": {
        "other": true,
        "comments": false,
        "strings": true
    }
  },

  // Configure settings to be overridden for the dockerfile language.
  "[dockerfile]":  {
    "editor.quickSuggestions": {
        "strings": true
    }
  },

  // Configure settings to be overridden for the git-commit language.
  "[git-commit]":  {
    "editor.rulers": [
        72
    ],
    "workbench.editor.restoreViewState": false
  },

  // Configure settings to be overridden for the git-rebase language.
  "[git-rebase]":  {
    "workbench.editor.restoreViewState": false
  },

  // Configure settings to be overridden for the go language.
  "[go]":  {
    "editor.insertSpaces": false
  },

  // Configure settings to be overridden for the handlebars language.
  "[handlebars]":  {
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the html language.
  "[html]":  {
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the javascript language.
  "[javascript]":  {
    "editor.maxTokenizationLineLength": 2500,
    "editor.quickSuggestions": {
        "other": true,
        "comments": true,
        "strings": true
    }
  },

  // Configure settings to be overridden for the json language.
  "[json]":  {
    "editor.quickSuggestions": {
        "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the jsonc language.
  "[jsonc]":  {
    "editor.quickSuggestions": {
        "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the less language.
  "[less]":  {
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the makefile language.
  "[makefile]":  {
    "editor.insertSpaces": false
  },

  // Configure settings to be overridden for the markdown language.
  "[markdown]":  {
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "editor.wordWrap": "on",
    "editor.quickSuggestions": true
  },

  // Configure settings to be overridden for the plaintext language.
  "[plaintext]":  {
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "editor.quickSuggestions": true
  },

  // Configure settings to be overridden for the python language.
  "[python]":  {
    "editor.wordBasedSuggestions": false
  },

  // Configure settings to be overridden for the scss language.
  "[scss]":  {
    "editor.suggest.insertMode": "replace"
  },

  // Configure settings to be overridden for the search-result language.
  "[search-result]":  {
    "editor.lineNumbers": "off"
  },

  // Configure settings to be overridden for the shellscript language.
  "[shellscript]":  {
    "files.eol": "\n"
  },

  // Configure settings to be overridden for the yaml language.
  "[yaml]":  {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced",
    "editor.quickSuggestions": true
  }

},
{
  // Deprecated. Use the specific setting for each audio cue instead (`audioCues.*`).
  //
  "audioCues.enabled": null,

  // Plays a sound when the active line has a breakpoint.
  //  - auto: Enable audio cue when a screen reader is attached.
  //  - on: Enable audio cue.
  //  - off: Disable audio cue.
  "audioCues.lineHasBreakpoint": "auto",

  // Plays a sound when the active line has an error.
  //  - auto: Enable audio cue when a screen reader is attached.
  //  - on: Enable audio cue.
  //  - off: Disable audio cue.
  "audioCues.lineHasError": "auto",

  // Plays a sound when the active line has a folded area that can be unfolded.
  //  - auto: Enable audio cue when a screen reader is attached.
  //  - on: Enable audio cue.
  //  - off: Disable audio cue.
  "audioCues.lineHasFoldedArea": "auto",

  // Plays a sound when the active line has an inline suggestion.
  //  - auto: Enable audio cue when a screen reader is attached.
  //  - on: Enable audio cue.
  //  - off: Disable audio cue.
  "audioCues.lineHasInlineSuggestion": "auto",

  // Plays a sound when the active line has a warning.
  //  - auto: Enable audio cue when a screen reader is attached.
  //  - on: Enable audio cue.
  //  - off: Disable audio cue.
  "audioCues.lineHasWarning": "off",

  // Plays a sound when trying to read a line with inlay hints that has no inlay hints.
  //  - auto: Enable audio cue when a screen reader is attached.
  //  - on: Enable audio cue.
  //  - off: Disable audio cue.
  "audioCues.noInlayHints": "auto",

  // Plays a sound when the debugger stopped on a breakpoint.
  //  - auto: Enable audio cue when a screen reader is attached.
  //  - on: Enable audio cue.
  //  - off: Disable audio cue.
  "audioCues.onDebugBreak": "auto",

  // The volume of the audio cues in percent (0-100).
  "audioCues.volume": 70

},
{
  // When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded.
  "remote.autoForwardPorts": true,

  // Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts` is true. On Windows and Mac remotes, the `process` option has no effect and `output` will be used. Requires a reload to take effect.
  //  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
  //  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
  "remote.autoForwardPortsSource": "process",

  // When enabled extensions are downloaded locally and installed on remote.
  "remote.downloadExtensionsLocally": false,

  // Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
  "remote.extensionKind": {
    "pub.name": [
      "ui"
    ]
  },

  // Specifies the local host name that will be used for port forwarding.
  "remote.localPortHost": "localhost",

  // Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
  //
  // ```
  // {
  //   "onAutoForward": "ignore"
  // }
  // ```
  "remote.otherPortsAttributes": {},

  // Set properties that are applied when a specific port number is forwarded. For example:
  //
  // ```
  // "3000": {
  //   "label": "Application"
  // },
  // "40000-55000": {
  //   "onAutoForward": "ignore"
  // },
  // ".+\\/server.js": {
  //  "onAutoForward": "openPreview"
  // }
  // ```
  "remote.portsAttributes": {
    "443": {
      "protocol": "https"
    },
    "8443": {
      "protocol": "https"
    }
  },

  // Restores the ports you forwarded in a workspace.
  "remote.restoreForwardedPorts": true

},
{
  // An array of languages where Emmet abbreviations should not be expanded.
  "emmet.excludeLanguages": [
    "markdown"
  ],

  // An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
  // In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
  // See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
  "emmet.extensionsPath": [],

  // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
  //  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
  "emmet.includeLanguages": {},

  // When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
  "emmet.optimizeStylesheetParsing": true,

  // Preferences used to modify behavior of some actions and resolvers of Emmet.
  "emmet.preferences": {},

  // Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
  "emmet.showAbbreviationSuggestions": true,

  // Shows expanded Emmet abbreviations as suggestions.
  // The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
  // The option `"always"` applies to all parts of the file regardless of markup/css.
  "emmet.showExpandedAbbreviation": "always",

  // If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
  "emmet.showSuggestionsAsSnippets": false,

  // Define profile for specified syntax or use your own profile with specific rules.
  "emmet.syntaxProfiles": {},

  // When enabled, Emmet abbreviations are expanded when pressing TAB.
  "emmet.triggerExpansionOnTab": false,

  // If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `editor.quickSuggestions` to `inline` or `off` for the `other` item.
  "emmet.useInlineCompletions": false,

  // Variables to be used in Emmet snippets.
  "emmet.variables": {}

},
{
  // Controls whether force push (with or without lease) is enabled.
  "git.allowForcePush": false,

  // Controls whether commits without running pre-commit and commit-msg hooks are allowed.
  "git.allowNoVerifyCommit": false,

  // Always show the Staged Changes resource group.
  "git.alwaysShowStagedChangesResourceGroup": false,

  // Controls the signoff flag for all commits.
  "git.alwaysSignOff": false,

  // When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
  "git.autofetch": false,

  // Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
  "git.autofetchPeriod": 180,

  // Whether auto refreshing is enabled.
  "git.autorefresh": true,

  // Configures when repositories should be automatically detected.
  //  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
  //  - false: Disable automatic repository scanning.
  //  - subFolders: Scan for subfolders of the currently opened folder.
  //  - openEditors: Scan for parent folders of open files.
  "git.autoRepositoryDetection": true,

  // Stash any changes before pulling and restore them after successful pull.
  "git.autoStash": false,

  // Prefix used when creating a new branch.
  "git.branchPrefix": "",

  // List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `git.branchProtectionPrompt`  setting.
  "git.branchProtection": [],

  // Controls whether a prompt is being before changes are committed to a protected branch.
  //  - alwaysCommit: Always commit changes to the protected branch.
  //  - alwaysCommitToNewBranch: Always commit changes to a new branch.
  //  - alwaysPrompt: Always prompt before changes are committed to a protected branch.
  "git.branchProtectionPrompt": "alwaysPrompt",

  // List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.
  //  - adjectives: A random adjective
  //  - animals: A random animal name
  //  - colors: A random color name
  //  - numbers: A random number between 100 and 999
  "git.branchRandomName.dictionary": [
    "adjectives",
    "animals"
  ],

  // Controls whether a random name is generated when creating a new branch.
  "git.branchRandomName.enable": false,

  // Controls the sort order for branches.
  "git.branchSortOrder": "committerdate",

  // A regular expression to validate new branch names.
  "git.branchValidationRegex": "",

  // The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.
  "git.branchWhitespaceChar": "-",

  // Controls what type of git refs are listed when running `Checkout to...`.
  //  - local: Local branches
  //  - tags: Tags
  //  - remote: Remote branches
  "git.checkoutType": [
    "local",
    "remote",
    "tags"
  ],

  // Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.
  "git.closeDiffOnOperation": false,

  // List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).
  "git.commandsToLog": [],

  // Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
  "git.confirmEmptyCommits": true,

  // Controls whether to ask for confirmation before force-pushing.
  "git.confirmForcePush": true,

  // Controls whether to ask for confirmation before committing without verification.
  "git.confirmNoVerifyCommit": true,

  // Confirm before synchronizing git repositories.
  "git.confirmSync": true,

  // Controls the Git count badge.
  //  - all: Count all changes.
  //  - tracked: Count only tracked changes.
  //  - off: Turn off counter.
  "git.countBadge": "all",

  // Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
  "git.decorations.enabled": true,

  // The default location to clone a git repository.
  "git.defaultCloneDirectory": null,

  // Controls whether to automatically detect git submodules.
  "git.detectSubmodules": true,

  // Controls the limit of git submodules detected.
  "git.detectSubmodulesLimit": 10,

  // Enables commit signing with GPG or X.509.
  "git.enableCommitSigning": false,

  // Whether git is enabled.
  "git.enabled": true,

  // Commit all changes when there are no staged changes.
  "git.enableSmartCommit": false,

  // Controls whether the Git Sync command appears in the status bar.
  "git.enableStatusBarSync": true,

  // When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
  "git.fetchOnPull": false,

  // Follow push all tags when running the sync command.
  "git.followTagsWhenSync": false,

  // This setting is now deprecated, please use `github.gitAuthentication` instead.
  //
  "git.githubAuthentication": null,

  // List of git repositories to ignore.
  "git.ignoredRepositories": [],

  // Ignores the legacy Git warning.
  "git.ignoreLegacyWarning": false,

  // Ignores the warning when there are too many changes in a repository.
  "git.ignoreLimitWarning": false,

  // Ignores the warning when Git is missing.
  "git.ignoreMissingGitWarning": false,

  // Ignores the warning when it looks like the branch might have been rebased when pulling.
  "git.ignoreRebaseWarning": false,

  // Ignore modifications to submodules in the file tree.
  "git.ignoreSubmodules": false,

  // Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
  "git.ignoreWindowsGit27Warning": false,

  // Controls when to show commit message input validation.
  "git.inputValidation": "warn",

  // Controls the commit message length threshold for showing a warning.
  "git.inputValidationLength": 72,

  // Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
  "git.inputValidationSubjectLength": 50,

  // Specifies how much information (if any) to log to the [git output](command:git.showOutput).
  //  - Trace: Log all information
  //  - Debug: Log only debug, information, warning, error, and critical information
  //  - Info: Log only information, warning, error, and critical information
  //  - Warning: Log only warning, error, and critical information
  //  - Error: Log only error, and critical information
  //  - Critical: Log only critical information
  //  - Off: Log nothing
  "git.logLevel": "Info",

  // Open the merge editor for files that are currently under conflict.
  "git.mergeEditor": true,

  // Controls whether to open a repository automatically after cloning.
  //  - always: Always open in current window.
  //  - alwaysNewWindow: Always open in a new window.
  //  - whenNoFolderOpen: Only open in current window when no folder is opened.
  //  - prompt: Always prompt for action.
  "git.openAfterClone": "prompt",

  // Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
  "git.openDiffOnClick": true,

  // Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
  "git.path": null,

  // Runs a git command after a successful commit.
  //  - none: Don't run any command after a commit.
  //  - push: Run 'Git Push' after a successful commit.
  //  - sync: Run 'Git Sync' after a successful commit.
  "git.postCommitCommand": "none",

  // Controls whether Git should check for unsaved files before committing.
  //  - always: Check for any unsaved files.
  //  - staged: Check only for unsaved staged files.
  //  - never: Disable this check.
  "git.promptToSaveFilesBeforeCommit": "always",

  // Controls whether Git should check for unsaved files before stashing changes.
  //  - always: Check for any unsaved files.
  //  - staged: Check only for unsaved staged files.
  //  - never: Disable this check.
  "git.promptToSaveFilesBeforeStash": "always",

  // Prune when fetching.
  "git.pruneOnFetch": false,

  // Fetch all tags when pulling.
  "git.pullTags": true,

  // Force git to use rebase when running the sync command.
  "git.rebaseWhenSync": false,

  // List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.
  "git.repositoryScanIgnoredFolders": [
    "node_modules"
  ],

  // Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.
  "git.repositoryScanMaxDepth": 1,

  // Controls whether to require explicit Git user configuration or allow Git to guess if missing.
  "git.requireGitUserConfig": true,

  // List of paths to search for git repositories in.
  "git.scanRepositories": [],

  // Controls whether an action button is shown in the Source Control view.
  "git.showActionButton": {
    "commit": true,
    "publish": true,
    "sync": true
  },

  // Controls whether to show the commit input in the Git source control panel.
  "git.showCommitInput": true,

  // Controls whether to show an inline Open File action in the Git changes view.
  "git.showInlineOpenFileAction": true,

  // Controls whether git actions should show progress.
  "git.showProgress": true,

  // Controls whether to show a notification when a push is successful.
  "git.showPushSuccessNotification": false,

  // Control which changes are automatically staged by Smart Commit.
  //  - all: Automatically stage all changes.
  //  - tracked: Automatically stage tracked changes only.
  "git.smartCommitChanges": "all",

  // Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
  "git.statusLimit": 10000,

  // Suggests to enable smart commit (commit all changes when there are no staged changes).
  "git.suggestSmartCommit": true,

  // Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
  "git.supportCancellation": false,

  // Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.
  "git.terminalAuthentication": true,

  // Controls whether to enable VS Code to be git editor for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.
  "git.terminalGitEditor": false,

  // Controls which date to use for items in the Timeline view.
  //  - committed: Use the committed date
  //  - authored: Use the authored date
  "git.timeline.date": "committed",

  // Controls whether to show the commit author in the Timeline view.
  "git.timeline.showAuthor": true,

  // Controls whether to show uncommitted changes in the Timeline view.
  "git.timeline.showUncommitted": false,

  // Controls how untracked changes behave.
  //  - mixed: All changes, tracked and untracked, appear together and behave equally.
  //  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
  //  - hidden: Untracked changes are hidden and excluded from several actions.
  "git.untrackedChanges": "mixed",

  // Controls whether to use the message from the commit input box as the default stash message.
  "git.useCommitInputAsStashMessage": false,

  // Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.
  "git.useEditorAsCommitInput": true,

  // Controls whether force pushing uses the safer force-with-lease variant.
  "git.useForcePushWithLease": true,

  // Controls whether GIT_ASKPASS should be overwritten to use the integrated version.
  "git.useIntegratedAskPass": true,

  // Enable verbose output when `git.useEditorAsCommitInput` is enabled.
  "git.verboseCommit": false

},
{
  // Controls whether to enable automatic GitHub authentication for git commands within VS Code.
  "github.gitAuthentication": true,

  // Controls which protocol is used to clone a GitHub repository
  "github.gitProtocol": "https"

},
{
  // URI of your GitHub Enterprise Instance
  "github-enterprise.uri": ""

},
{
  // Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed.
  "grunt.autoDetect": "off"

},
{
  // Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed.
  "gulp.autoDetect": "off"

},
{
  // Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed.
  "jake.autoDetect": "off"

},
{
  // Enable/disable rendering math in the built-in Markdown preview.
  "markdown.math.enabled": true

},
{
  // Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
  "merge-conflict.autoNavigateNextConflict.enabled": false,

  // Create a CodeLens for merge conflict blocks within editor.
  "merge-conflict.codeLens.enabled": true,

  // Create decorators for merge conflict blocks within editor.
  "merge-conflict.decorators.enabled": true,

  // Controls where the diff view should be opened when comparing changes in merge conflicts.
  //  - Current: Open the diff view in the current editor group.
  //  - Beside: Open the diff view next to the current editor group.
  //  - Below: Open the diff view below the current editor group.
  "merge-conflict.diffViewPosition": "Current"

},
{
  // Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
  //  - always: Auto attach to every Node.js process launched in the terminal.
  //  - smart: Auto attach when running scripts that aren't in a node_modules folder.
  //  - onlyWithFlag: Only auto attach when the `--inspect` is given.
  //  - disabled: Auto attach is disabled and not shown in status bar.
  "debug.javascript.autoAttachFilter": "disabled",

  // Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
  "debug.javascript.autoAttachSmartPattern": [
    "${workspaceFolder}/**",
    "!**/node_modules/**",
    "**/$KNOWN_TOOLS$/**"
  ],

  // When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
  "debug.javascript.automaticallyTunnelRemoteServer": true,

  // Whether to stop when conditional breakpoints throw an error.
  "debug.javascript.breakOnConditionalError": false,

  // Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
  "debug.javascript.codelens.npmScripts": "top",

  // Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
  "debug.javascript.debugByLinkOptions": "on",

  // The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
  "debug.javascript.defaultRuntimeExecutable": {
    "pwa-node": "node"
  },

  // Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
  "debug.javascript.pickAndAttachOptions": {},

  // Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
  //
  // A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
  "debug.javascript.resourceRequestOptions": {},

  // Default launch options for the JavaScript debug terminal and npm scripts.
  "debug.javascript.terminalOptions": {},

  // Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
  "debug.javascript.unmapMissingSources": false

},
{
  // Controls whether npm scripts should be automatically detected.
  "npm.autoDetect": "on",

  // Enable running npm scripts contained in a folder from the Explorer context menu.
  "npm.enableRunFromFolder": false,

  // The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
  // Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
  "npm.enableScriptExplorer": false,

  // Configure glob patterns for folders that should be excluded from automatic script detection.
  "npm.exclude": "",

  // Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
  "npm.fetchOnlinePackageInfo": true,

  // The package manager used to run scripts.
  //  - auto: Auto-detect which package manager to use for running scripts based on lock files and installed package managers.
  //  - npm: Use npm as the package manager for running scripts.
  //  - yarn: Use yarn as the package manager for running scripts.
  //  - pnpm: Use pnpm as the package manager for running scripts.
  "npm.packageManager": "auto",

  // Run npm commands with the `--silent` option.
  "npm.runSilent": false,

  // The default click action used in the npm scripts explorer: `open` or `run`, the default is `open`.
  "npm.scriptExplorerAction": "open",

  // An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.
  "npm.scriptExplorerExclude": []

},
{
  // Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references
  //  - peek: Show references in peek editor.
  //  - view: Show references in separate view.
  "references.preferredLocation": "peek"

},
{
  // Enable/disable the floating indicator that shows when focused in the simple browser.
  "simpleBrowser.focusLockIndicator.enabled": true

},
{
  // Whether the plaintext comment highlighter should be active
  "better-comments.highlightPlainText": false,

  // Whether the multiline comment highlighter should be active
  "better-comments.multilineComments": true,

  // Tags which are used to color the comments. Changes require a restart of VS Code to take effect
  "better-comments.tags": [
    {
      "tag": "!",
      "color": "#FF2D00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "?",
      "color": "#3498DB",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "//",
      "color": "#474747",
      "strikethrough": true,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "todo",
      "color": "#FF8C00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "*",
      "color": "#98C379",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    }
  ]

},
{
  // Formatter to use.
  "formatSelectionAsHtml.formatter": "js-beautify",

  // Prettier Whitespace Sensitivity setting.
  "formatSelectionAsHtml.htmlWhitespaceSensitivity": "ignore",

  // Beautify Max Preserve Newlines setting.
  "formatSelectionAsHtml.maxPreserveNewlines": 1,

  // Beautify Preserve Newlines setting.
  "formatSelectionAsHtml.preserveNewlines": true,

  // Maximum amount of characters per line.
  "formatSelectionAsHtml.printWidth": 120

},
{
  //
  "auto.languages": {
    "ruby": {
      "symbol": "#",
      "stringWrapper": "\""
    },
    "elixir": {
      "symbol": "#",
      "stringWrapper": "\""
    },
    "javascript": {
      "symbol": "$",
      "stringWrapper": "`"
    },
    "vue": {
      "symbol": "$",
      "stringWrapper": "`"
    },
    "javascriptreact": {
      "symbol": "$",
      "stringWrapper": "`"
    },
    "typescript": {
      "symbol": "$",
      "stringWrapper": "`"
    },
    "typescriptreact": {
      "symbol": "$",
      "stringWrapper": "`"
    },
    "coffeescript": {
      "symbol": "#",
      "stringWrapper": "\""
    },
    "erb": {
      "symbol": "#",
      "stringWrapper": "\""
    },
    "haml": {
      "symbol": "#",
      "stringWrapper": "\""
    },
    "slim": {
      "symbol": "#",
      "stringWrapper": "\""
    },
    "groovy": {
      "symbol": "$",
      "stringWrapper": "\""
    },
    "crystal": {
      "symbol": "#",
      "stringWrapper": "\""
    },
    "ecr": {
      "symbol": "#",
      "stringWrapper": "\""
    },
    "dart": {
      "symbol": "$",
      "stringWrapper": "'"
    },
    "kotlin": {
      "symbol": "$",
      "stringWrapper": "\""
    },
    "scala": {
      "symbol": "$",
      "stringWrapper": "\""
    }
  }

},
{
  // 下载安装数据库可执行文件的架构。注意：我们不推荐您修改此选项，因为我们会自动判断您的安装环境。此选项仅在需要时修改。
  "autoMongoDB.binary.arch": "",

  // 数据库可执行文件的下载路径。默认存储位置：~/.mongodb/binaries (POSIX)，C:\Users\用户名\.mongodb\binaries (Windows)。
  "autoMongoDB.binary.downloadDir": "",

  // 下载安装数据库可执行文件的平台。注意：我们不推荐您修改此选项，因为我们会自动判断您的安装环境。此选项仅在需要时修改。
  "autoMongoDB.binary.platform": "",

  // 下载安装数据库可执行文件的版本。
  "autoMongoDB.binary.version": "3.4.4",

  // 数据库文件存储路径。 默认存储位置：~/.mongodb/data (POSIX)，C:\Users\用户名\.mongodb\data (Windows)。
  "autoMongoDB.instance.dbPath": "",

  // 数据库运行端口。
  "autoMongoDB.instance.port": 27017,

  // 数据库存储引擎模式。
  "autoMongoDB.instance.storageEngine": "ephemeralForTest"

},
{
  // Cycles through open documents on launch to enable autocomplete to include those documents on restore. (VSCode Issue#15178)
  "AllAutocomplete.cycleOpenDocumentsOnLaunch": false,

  // Disable special handling for
  "AllAutocomplete.disableNumberHandling": false,

  // Forces all languages to not show up words from the same language. This removes All AutoComplete for the same language files. Useful if relying on the language server and need to use all autocomplete only across languages. Equivalent to putting all languages in AllAutocomplete.nonContributingToSelfLanguages
  "AllAutocomplete.dontContributeToSelf": false,

  // Glob pattern for files to exclude from autocomplete search.
  "AllAutocomplete.excludeFiles": "**/*.+(git|rendered)",

  // Words to ignore(separated by AllAutocomplete.whitespace) from autocomplete.
  "AllAutocomplete.ignoredWords": "",

  // Language specific special characters that can be a part of autocompletion(that can fit with all strings)
  "AllAutocomplete.languageSpecialCharacters": {
    "css": "^[\\.#]",
    "scss": "^[\\.#]",
    "csv": "^[\\: ]"
  },

  // Language specific settings for the whitespace splitter
  "AllAutocomplete.languageWhitespace": {
    "ruby": "[^\\w\\-_\\$:\\u0080-\\uFFFF]+",
    "javascript": "[^\\w_\\$\\u0080-\\uFFFF]+",
    "javascriptreact": "[^\\w_\\-\\$\\@\\u0080-\\uFFFF]+",
    "typescript": "[^\\w_\\-\\$\\@\\u0080-\\uFFFF]+",
    "php": "[^\\w_\\$\\u0080-\\uFFFF]+",
    "css": "[^\\w\\-_\\$\\u0080-\\uFFFF]+",
    "scss": "[^\\w\\-_\\$\\@\\u0080-\\uFFFF]+",
    "html": "[^\\w\\-_\\$\\u0080-\\uFFFF]+",
    "python": "[^\\w\\-_\\u0080-\\uFFFF]+",
    "elm": "[^\\w\\-_\\u0080-\\uFFFF]+",
    "cpp": "[^\\w_\\u0080-\\uFFFF]+",
    "csv": "[^\\w_\\u0080-\\uFFFF \\:]+"
  },

  // All Autocomplete: Maximum number of items sent for autocomplete in a single API call.
  "AllAutocomplete.maxItemsInSingleList": 999,

  // All Autocomplete: Maximum number of lines to read from a file.
  "AllAutocomplete.maxLines": 9999,

  // All Autocomplete: Minimum word length to keep in autocomplete list.
  "AllAutocomplete.minWordLength": 3,

  // List of languages that do not supply word lists but can consume words from All Autocomplete.
  "AllAutocomplete.nonContributingLanguages": [],

  // List of languages that do not supply word lists to the files of the same language but can consume words from All Autocomplete as well as supply word lists to other files.
  "AllAutocomplete.nonContributingToSelfLanguages": [],

  // Show results from the current document in the autocomplete results(Disable to improve performance).
  "AllAutocomplete.showCurrentDocument": true,

  // Show results from the other open document in the autocomplete results(Disable to have results only from the current document if showCurrentDocument is true).
  "AllAutocomplete.showOpenDocuments": true,

  // Do not update the autocomplete list unless the document is saved.
  "AllAutocomplete.updateOnlyOnSave": false,

  // All Autocomplete: Regex to use for splitting whitespace
  "AllAutocomplete.whitespace": "[^\\w\\-_\\$\\u0080-\\uFFFF]+",

  // List of files to initialize the word list from. These files behave as if they are always open. Expects an absolute path. Can work with relative path if the workspace contains a single folder.
  "AllAutocomplete.wordListFiles": []

},
{
  // server to connect to
  "mongoShell.host": "",

  // path to mongo shell executable
  "mongoShell.path": "C:\\MongoDB\\Server\\3.2\\bin\\mongo.exe",

  // port to connect to
  "mongoShell.port": "",

  // be less chatty
  "mongoShell.quiet": false,

  // username for authentication
  "mongoShell.username": "",

  // increase verbosity
  "mongoShell.verbose": false

},
{
  // Activates the i18n features for snippets (eg.: _(""))
  "django.i18n": true,

  // Seldom show notifications about this extension
  "django.showContributeNotification": true,

  // Exclude Python snippets by their file name. Can be 'import', 'postgres'...
  "django.snippets.exclude": [
    "cms",
    "wagtail"
  ],

  // Activates the Python snippets
  "django.snippets.use": true

},
{
  // Custom CSS/JS files, as an array of URLs, not file paths
  "vscode_custom_css.imports": [],

  // Directory used for storing staged CSS/JS files. Must be inside VSCode's extension directory, otherwise VSCode will refuse to load the your custom CSS/JS.
  "vscode_custom_css.staging_dir": "",

  // Enable Status Indicator
  "vscode_custom_css.statusbar": true

},
{
  // Enable/disable formatting of html template strings.
  "lit-html.format.enabled": true,

  // List of template tags to enable html intellisense in.
  "lit-html.tags": [
    "html",
    "raw"
  ]

},
{
  // Automatically deselect the closing tag after inserting a space.
  "htmltagwrap.autoDeselectClosingTag": true,

  // The default HTML tag to insert when using htmltagwrap.
  "htmltagwrap.tag": "p"

},
{
  // The HTML attributes for which to provide class completions, hover previews, linting etc.
  "tailwindCSS.classAttributes": [
    "class",
    "className",
    "ngClass"
  ],

  // Enable code actions.
  "tailwindCSS.codeActions": true,

  // Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.
  "tailwindCSS.colorDecorators": true,

  // Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`
  "tailwindCSS.emmetCompletions": false,

  //
  "tailwindCSS.experimental.classRegex": [],

  // Manually specify the Tailwind config file or files that should be read to provide IntelliSense features. Can either be a single string value, or an object where each key is a config file path and each value is a glob or array of globs representing the set of files that the config file applies to.
  "tailwindCSS.experimental.configFile": null,

  // Configure glob patterns to exclude from all IntelliSense features. Inherits all glob patterns from the `files.exclude` setting.
  "tailwindCSS.files.exclude": [
    "**/.git/**",
    "**/node_modules/**",
    "**/.hg/**"
  ],

  // Enable hovers.
  "tailwindCSS.hovers": true,

  // Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.
  //  E.g.: `{"plaintext": "html"}`
  "tailwindCSS.includeLanguages": {},

  // Enable the Node.js inspector agent for the language server and listen on the specified port.
  "tailwindCSS.inspectPort": null,

  // Class names on the same HTML element which apply the same CSS property or properties
  "tailwindCSS.lint.cssConflict": "warning",

  // Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)
  "tailwindCSS.lint.invalidApply": "error",

  // Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)
  "tailwindCSS.lint.invalidConfigPath": "error",

  // Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)
  "tailwindCSS.lint.invalidScreen": "error",

  // Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)
  "tailwindCSS.lint.invalidTailwindDirective": "error",

  // Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)
  "tailwindCSS.lint.invalidVariant": "error",

  // Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)
  "tailwindCSS.lint.recommendedVariantOrder": "warning",

  // Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `tailwindCSS.showPixelEquivalents`.
  "tailwindCSS.rootFontSize": 16,

  // Show `px` equivalents for `rem` CSS values.
  "tailwindCSS.showPixelEquivalents": true,

  // Enable autocomplete suggestions.
  "tailwindCSS.suggestions": true,

  // Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings
  "tailwindCSS.validate": true

},
{
  // Controls the printing of spaces inside object literals
  "prettier.bracketSpacing": true,

  // Advanced feature. Enable and use postcss parser for those language ids. Restart required
  "prettier.cssEnable": [
    "css",
    "less",
    "scss"
  ],

  // Use 'prettier-eslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from eslint rules.
  "prettier.eslintIntegration": false,

  // Advanced feature. Enable and use graphql parser for those language ids. Restart required
  "prettier.graphqlEnable": [
    "graphql"
  ],

  // Advanced feature. Enable and use 'prettier.parser' parser for those language ids. Restart required
  "prettier.javascriptEnable": [
    "javascript",
    "javascriptreact"
  ],

  // Advanced feature. Enable and use json parser for those language ids. Restart required
  "prettier.jsonEnable": [
    "json"
  ],

  // If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
  "prettier.jsxBracketSameLine": false,

  // Override the parser. You shouldn't have to change this setting.
  "prettier.parser": "babylon",

  // Fit code within this line limit
  "prettier.printWidth": 80,

  // Whether to add a semicolon at the end of every line
  "prettier.semi": true,

  // If true, will use single instead of double quotes
  "prettier.singleQuote": false,

  // Number of spaces it should use per tab
  "prettier.tabWidth": 2,

  // Controls the printing of trailing commas wherever possible
  "prettier.trailingComma": "none",

  // Advanced feature. Enable and use typescript parser for those language ids. Restart required
  "prettier.typescriptEnable": [
    "typescript",
    "typescriptreact"
  ],

  // Indent lines with tabs
  "prettier.useTabs": false

},
{
  // For import command. The declaration type used for require()
  "npm-intellisense.importDeclarationType": "const",

  // For import command. Use import statements instead of require()
  "npm-intellisense.importES6": true,

  // For import command. The linebreak used after the snippet
  "npm-intellisense.importLinebreak": ";\r\n",

  // For import command. The type of quotes to use in the snippet
  "npm-intellisense.importQuotes": "'",

  // (experimental) Enables path intellisense in subfolders of modules
  "npm-intellisense.packageSubfoldersIntellisense": false,

  // Look for package.json inside nearest directory instead of workspace root
  "npm-intellisense.recursivePackageJsonLookup": true,

  // Scans devDependencies as well
  "npm-intellisense.scanDevDependencies": false,

  // shows build in node modules like 'path' of 'fs'
  "npm-intellisense.showBuildInLibs": false

},
{
  // If defined, unmapped absolute path imports are based on this location.  Takes priority over 'absolutePathToWorkspace' if both are defined
  "path-intellisense.absolutePathTo": "",

  // Sets an absolute path to the current workspace
  "path-intellisense.absolutePathToWorkspace": true,

  // Automatically adds slash after directory
  "path-intellisense.autoSlashAfterDirectory": false,

  // Automatically triggers next suggestion after previous suggestion
  "path-intellisense.autoTriggerNextSuggestion": false,

  // Adds the file extension to a import statements
  "path-intellisense.extensionOnImport": false,

  // Ignores tsconfig file for mappings
  "path-intellisense.ignoreTsConfigBaseUrl": false,

  // Mappings for paths.  The values should be interpreted as absolute paths (and can use '${workspaceFolder}')
  "path-intellisense.mappings": {},

  // Show hidden files
  "path-intellisense.showHiddenFiles": false,

  // Shows suggestions when the import starts with a forward slash ('/')
  "path-intellisense.showOnAbsoluteSlash": true

},
{
  // Set max length of the column to align words after `as`  /自定义当你的字段长度超过多少字符，不参加as对齐(整个字段长度包括as后面的列名)
  "extension.as_loc_cnt": 150,

  // Use whitespace to replace Tab in the indentation of subquery  /在子查询缩进场景中，把制表符替换成四个空格
  "extension.bracket_char": false,

  // Fix the comma location to the end of the line/把逗号放在字段后面(不建议开启)
  "extension.comma_location": false,

  // Convert keywords to uppercase/将关键词转变为大写
  "extension.uppercase": true

},
{
  // Maximum number of result rows to display before truncating result table.
  "SQLNotebook.maxResultRows": 25,

  // Query timeout in milliseconds for cell query execution.
  "SQLNotebook.queryTimeout": 30000,

  // (Unstable) Use embeded language server for intelligent completion and hover information.
  "SQLNotebook.useLanguageServer": false

},
{
  // Specifies tags which will be ignored and not closed. Possibilities are:
  //  - null (ignore nothing)
  //  - 'html' (ignore HTML void elements specified at https://www.w3.org/TR/html/syntax.html#void-elements)
  //  - { br: true, img: true } (custom set of tags)
  "closeTag.ignoreTags": null

},
{
  // Default limit of query sql.
  "database-client.defaultSelectLimit": 100,

  // Disable Sql Code lens.
  "database-client.disableSqlCodeLen": false,

  // Highlight SQL Code block.
  "database-client.highlightSQLBlock": false,

  // Using connection name as connection node name
  "database-client.preferConnectionName": false,

  // Webview resource root, using file will create a lot of cache.
  "database-client.resourceRoot": "internalServer",

  // Show function on tree view.
  "database-client.showFunction": true,

  // Show procedure on tree view.
  "database-client.showProcedure": true,

  // Show query on tree view.
  "database-client.showQuery": false,

  // Show trigger on tree view.
  "database-client.showTrigger": false,

  // Show user on tree view.
  "database-client.showUser": false,

  // Show view on tree view.
  "database-client.showView": true

},
{
  // Add connections to database
  "conf.mongo.dbs": [
    {
      "name": "local",
      "srv": "mongodb://localhost:27017"
    }
  ]

},
{
  // Excluded file types
  "emptyIndent.exclude": [],

  // Highlight indent color
  "emptyIndent.highlightColor": "rgba(246,36,89,0.6)",

  // Highlight indent on empty lines
  "emptyIndent.highlightIndent": false,

  // Automatically remove indentation in empty lines on save
  "emptyIndent.removeIndent": true

},
{
  // Set whether all modules can be imported.
  "pythonPreview.allowAllModules": true,

  // Set code and navigation area width.
  "pythonPreview.codAndNavWidth": 510,

  // Control the font family used in the code display area.
  "pythonPreview.code.fontFamily": "Andale mono, monospace",

  // Control the font size in pixels in the code display area.
  "pythonPreview.code.fontSize": 15,

  // Control the line height used in the code.
  "pythonPreview.code.lineHeight": 1.2,

  // Control the font family used in the code footer docs.
  "pythonPreview.codeFooterDocs.fontFamily": "verdana, arial, helvetica, sans-serif",

  // Control the font size in pixels used in the code footer docs.
  "pythonPreview.codeFooterDocs.fontSize": 12,

  // Render functions with a 'func' prefix and not type label.
  "pythonPreview.compactFuncLabels": false,

  // Display all stack frames that have ever exited rather than only currently on the stack.
  "pythonPreview.cumulativeMode": true,

  // Control the background color used in dict, class and instance key in vscode dark theme.
  "pythonPreview.dark.dict-class-instKey.bgColor": "#f9906f",

  // Control the background color used in dict, class and instance value in vscode dark theme.
  "pythonPreview.dark.dict-class-instVal.bgColor": "#b35c44",

  // Control the color used in highlighted arrow in vscode dark theme.
  "pythonPreview.dark.highlightedArrow.color": "#005583",

  // Control the background color used in highlighted stack frame in vscode dark theme.
  "pythonPreview.dark.highlightedStackFrame.bgColor": "#800080",

  // Control the background color used in list, tuple and set in vscode dark theme.
  "pythonPreview.dark.list-tuple-setTbl.bgColor": "#ca6924",

  // Set how heap objects should be rendered. "true" render all heap objects at the top level. Otherwise, nest heap objects.
  "pythonPreview.disableHeapNesting": false,

  // Control the font family used in the python preview.
  "pythonPreview.fontFamily": "verdana, arial, helvetica, sans-serif",

  // Control the font size in pixels used in the python preview.
  "pythonPreview.fontSize": 16,

  // Control the font family used in the heap object.
  "pythonPreview.heapObject.fontFamily": "verdana, arial, helvetica, sans-serif",

  // Control the font size in pixels used in the heap object.
  "pythonPreview.heapObject.fontSize": 14,

  // Hide the code display.
  "pythonPreview.hideCode": false,

  // Control the background color used in dict, class and instance key in vscode high-contrast theme.
  "pythonPreview.high-contrast.dict-class-instKey.bgColor": "#f9906f",

  // Control the background color used in dict, class and instance value in vscode high-contrast theme.
  "pythonPreview.high-contrast.dict-class-instVal.bgColor": "#b35c44",

  // Control the color used in highlighted stack frame in vscode high-contrast theme.
  "pythonPreview.high-contrast.highlightedArrow.color": "#005583",

  // Control the background color used in highlighted stack frame in vscode high-contrast theme.
  "pythonPreview.high-contrast.highlightedStackFrame.bgColor": "#ff7500",

  // Control the background color used in list, tuple and set in vscode high-contrast theme.
  "pythonPreview.high-contrast.list-tuple-setTbl.bgColor": "#ca6924",

  // Control the font family used in the lang display area.
  "pythonPreview.langDisplay.fontFamily": "verdana, arial, helvetica, sans-serif",

  // Control the font size in pixels used in the lang display area.
  "pythonPreview.langDisplay.fontSize": 14,

  // Control the font family used in the arrow legend.
  "pythonPreview.legend.fontFamily": "verdana, arial, helvetica, sans-serif",

  // Control the font size in pixels used in the arrow legend.
  "pythonPreview.legend.fontSize": 12,

  // Control the background color used in dict, class and instance key in vscode light theme.
  "pythonPreview.light.dict-class-instKey.bgColor": "#faebbf",

  // Control the background color used in dict, class and instance value in vscode light theme.
  "pythonPreview.light.dict-class-instVal.bgColor": "#ffffc6",

  // Control the color used in highlighted arrow in vscode light theme.
  "pythonPreview.light.highlightedArrow.color": "#005583",

  // Control the background color used in highlighted stack frame in vscode light theme.
  "pythonPreview.light.highlightedStackFrame.bgColor": "#e9f1f6",

  // Control the background color used in list, tuple and set in vscode light theme.
  "pythonPreview.light.list-tuple-setTbl.bgColor": "#ffffc6",

  // Set the max number of executed lines, in order to against infinite loops.
  "pythonPreview.maxExecutedLines": 1000,

  // Control the font family used int the print output docs.
  "pythonPreview.printOutputDocs.fontFamily": "verdana, arial, helvetica, sans-serif",

  // Control the font size in pixels in the print output docs.
  "pythonPreview.printOutputDocs.fontSize": 12,

  // Control the font family used in the python stdout window.
  "pythonPreview.pyStdout.fontFamily": "Andale mono, monospace",

  // Control the font size in pixels used in the python stdout window.
  "pythonPreview.pyStdout.fontSize": 14,

  // Control the font size in pixels used in the function return value.
  "pythonPreview.retVal.fontSize": 12,

  // Display frame and parent frame labels for all functions.
  "pythonPreview.showAllFrameLabels": false,

  // Control the font family used in the stack header and heap header.
  "pythonPreview.stackAndHeapHeader.fontFamily": "erdana, arial, helvetica, sans-serif",

  // Control the font size in pixels used in the stack header and heap header.
  "pythonPreview.stackAndHeapHeader.fontSize": 14,

  // Control the font family used in the stack frame.
  "pythonPreview.stackFrame.fontFamily": "verdana, arial, helvetica, sans-serif",

  // Control the font size in pixels used in the stack frame.
  "pythonPreview.stackFrame.fontSize": 14,

  // Control the font family used in the stack frame header.
  "pythonPreview.stackFrameHeader.fontFamily": "verdana, arial, helvetica, sans-serif",

  // Control the font size in pixels used in the stack frame header.
  "pythonPreview.stackFrameHeader.fontSize": 14,

  // Render refrences using textual memory labels rather than as jsPlumb arrows.
  "pythonPreview.textualMemoryLabels": false,

  // Enable debug logging for the python-preview extension.
  "pythonPreview.trace": "off",

  // Control the font family used in the type label of heap object.
  "pythonPreview.typeLabel.fontFamily": "verdana, arial, helvetica, sans-serif",

  // Control the font size in pixels used in the type label of heap object.
  "pythonPreview.typeLabel.fontSize": 12

},
{
  // List of languages which suggestions are desired.
  "css.enabledLanguages": [
    "html"
  ],

  // List of local or remote style sheets for suggestions.
  "css.styleSheets": []

},
{
  // npm bin name
  "npm.bin": "npm",

  // Enable npm commands in the macOS touchbar.
  "npm.enableTouchbar": false,

  // Look for 'package.json' files in these directories
  "npm.includeDirectories": [],

  // Show a warning that the keybindings have changed.
  "npm.keybindingsChangedWarningShown": false,

  // Enable the old cmd/ctrl R chording key bindings.
  "npm.oldKeybindings.enable": false,

  // Run npm commands in a terminal, otherwise shows the output in the output panel
  "npm.runInTerminal": true,

  // Look for 'package.json' in the root directory of the workspace
  "npm.useRootDirectory": true

},
{
  // Always show the ESlint status bar item.
  "eslint.alwaysShowStatus": false,

  // Turns auto fix on save on or off, or defines which rules (e.g. `no-var-keyword`) to auto fix on save.
  "eslint.autoFixOnSave": false,

  //
  "eslint.codeAction.disableRuleComment": {
    "enable": true,
    "location": "separateLine"
  },

  //
  "eslint.codeAction.showDocumentation": {
    "enable": true
  },

  // Controls whether eslint is enabled for JavaScript files or not.
  "eslint.enable": true,

  // Controls whether the new incremental text document synchronization should be used.
  "eslint.experimental.incrementalSync": false,

  // Controls whether a task for linting the whole workspace will be available.
  "eslint.lintTask.enable": false,

  // Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
  "eslint.lintTask.options": ".",

  // A path added to NODE_PATH when resolving the eslint module.
  "eslint.nodePath": null,

  // The eslint options object to provide args normally passed to eslint when executed from a command line (see http://eslint.org/docs/developer-guide/nodejs-api#cliengine).
  "eslint.options": {},

  // The package manager you use to install node modules.
  "eslint.packageManager": "npm",

  // This option is deprecated. Use eslint.lintTask.enable instead.
  // Controls whether a task for linting the whole workspace will be available.
  "eslint.provideLintTask": false,

  // Turns on quiet mode, which ignores warnings.
  "eslint.quiet": false,

  // Run the linter on save (onSave) or on type (onType)
  "eslint.run": "onType",

  // The location of the node binary to run ESLint under.
  "eslint.runtime": null,

  // Traces the communication between VSCode and the eslint linter service.
  "eslint.trace.server": "off",

  // An array of language ids which should be validated by ESLint
  "eslint.validate": [
    "javascript",
    "javascriptreact"
  ],

  //
  "eslint.workingDirectories": []

},
{
  // Set the languages that the extension will be activated.  e.g. ["html","xml","php"]. Use ["*"] to activate for all languages.
  "auto-close-tag.activationOnLanguage": [
    "xml",
    "php",
    "blade",
    "ejs",
    "jinja",
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "plaintext",
    "markdown",
    "vue",
    "liquid",
    "erb",
    "lang-cfml",
    "cfml",
    "HTML (EEx)",
    "HTML (Eex)",
    "plist"
  ],

  // Set the languages where the extension will be disabled.  e.g. ["html","xml","php"].
  "auto-close-tag.disableOnLanguage": [],

  // Whether to close self-closing tag automatically
  "auto-close-tag.enableAutoCloseSelfClosingTag": true,

  // Whether to insert close tag automatically
  "auto-close-tag.enableAutoCloseTag": true,

  // Set the tag list that would not be auto closed.
  "auto-close-tag.excludedTags": [
    "area",
    "base",
    "br",
    "col",
    "command",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ],

  // Enable both Visual Studio and Sublime Text mode
  "auto-close-tag.fullMode": false,

  // Insert a space before the forward slash in a self-closing tag.
  "auto-close-tag.insertSpaceBeforeSelfClosingTag": false,

  // Auto close tag when </ is typed, same as Sublime Text 3
  "auto-close-tag.SublimeText3Mode": false

},
{
  // Set the languages that the extension will be activated.  e.g. ["html","xml","php"] By default, it is ["*"] and will be activated for all languages.
  "auto-rename-tag.activationOnLanguage": [
    "*"
  ]

},
{
  // Whether to clear previous output before each run.
  "code-runner.clearPreviousOutput": false,

  // Set the custom command to run.
  "code-runner.customCommand": "echo Hello",

  // Set the working directory.
  "code-runner.cwd": "",

  // Set the default language to run.
  "code-runner.defaultLanguage": "",

  // Whether to enable AppInsights to track user telemetry data.
  "code-runner.enableAppInsights": true,

  // Set the executor of each language.
  "code-runner.executorMap": {
    "javascript": "node",
    "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
    "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "php": "php",
    "python": "python -u",
    "perl": "perl",
    "perl6": "perl6",
    "ruby": "ruby",
    "go": "go run",
    "lua": "lua",
    "groovy": "groovy",
    "powershell": "powershell -ExecutionPolicy ByPass -File",
    "bat": "cmd /c",
    "shellscript": "bash",
    "fsharp": "fsi",
    "csharp": "scriptcs",
    "vbscript": "cscript //Nologo",
    "typescript": "ts-node",
    "coffeescript": "coffee",
    "scala": "scala",
    "swift": "swift",
    "julia": "julia",
    "crystal": "crystal",
    "ocaml": "ocaml",
    "r": "Rscript",
    "applescript": "osascript",
    "clojure": "lein exec",
    "haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
    "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
    "racket": "racket",
    "scheme": "csi -script",
    "ahk": "autohotkey",
    "autoit": "autoit3",
    "dart": "dart",
    "pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
    "d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
    "haskell": "runhaskell",
    "nim": "nim compile --verbosity:0 --hints:off --run",
    "lisp": "sbcl --script",
    "kit": "kitc --run",
    "v": "v run",
    "sass": "sass --style expanded",
    "scss": "scss --style expanded",
    "less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
    "FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "sml": "cd $dir && sml $fileName"
  },

  // Set the executor of each file extension.
  "code-runner.executorMapByFileExtension": {
    ".vb": "cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",
    ".vbs": "cscript //Nologo",
    ".scala": "scala",
    ".jl": "julia",
    ".cr": "crystal",
    ".ml": "ocaml",
    ".exs": "elixir",
    ".hx": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
    ".rkt": "racket",
    ".scm": "csi -script",
    ".ahk": "autohotkey",
    ".au3": "autoit3",
    ".kt": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
    ".kts": "kotlinc -script",
    ".dart": "dart",
    ".pas": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
    ".pp": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
    ".d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
    ".hs": "runhaskell",
    ".nim": "nim compile --verbosity:0 --hints:off --run",
    ".csproj": "dotnet run --project",
    ".fsproj": "dotnet run --project",
    ".lisp": "sbcl --script",
    ".kit": "kitc --run",
    ".v": "v run",
    ".vsh": "v run",
    ".sass": "sass --style expanded",
    ".cu": "cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    ".ring": "ring",
    ".sml": "cd $dir && sml $fileName"
  },

  // Set the executor by glob.
  "code-runner.executorMapByGlob": {
    "pom.xml": "cd $dir && mvn clean package"
  },

  // Whether to use the directory of the file to be executed as the working directory.
  "code-runner.fileDirectoryAsCwd": false,

  // Whether to ignore selection to always run entire file.
  "code-runner.ignoreSelection": false,

  // Set the mapping of languageId to file extension.
  "code-runner.languageIdToFileExtensionMap": {
    "bat": ".bat",
    "powershell": ".ps1",
    "typescript": ".ts"
  },

  // Whether to preserve focus on code editor after code run is triggered.
  "code-runner.preserveFocus": true,

  // Whether to respect Shebang to run code.
  "code-runner.respectShebang": true,

  // Whether to run code in Integrated Terminal.
  "code-runner.runInTerminal": false,

  // Whether to save all files before running.
  "code-runner.saveAllFilesBeforeRun": false,

  // Whether to save the current file before running.
  "code-runner.saveFileBeforeRun": false,

  // Whether to show extra execution message like [Running] ... and [Done] ...
  "code-runner.showExecutionMessage": true,

  // Whether to show 'Run Code' command in editor context menu.
  "code-runner.showRunCommandInEditorContextMenu": true,

  // Whether to show 'Run Code' command in explorer context menu.
  "code-runner.showRunCommandInExplorerContextMenu": true,

  // Whether to show 'Run Code' icon in editor title menu.
  "code-runner.showRunIconInEditorTitleMenu": true,

  // Whether to show 'Stop code run' icon in the editor title menu when code is running.
  "code-runner.showStopIconInEditorTitleMenu": true,

  // Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.
  "code-runner.temporaryFileName": "tempCodeRunnerFile",

  // For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\path' with '/mnt/c/path'
  "code-runner.terminalRoot": ""

},
{
  // Databse schema name used when SQL statements don't specify a schema. Defaults to `public`.
  "frigus02.vscode-sql-tagged-template-literals.defaultSchemaName": "",

  // Enable diagnostics by parsing SQL statements and validating types using the specified schema file.
  "frigus02.vscode-sql-tagged-template-literals.enableDiagnostics": true,

  // Enable formatting support for SQL in tagged template literals using [pgFormatter](https://github.com/darold/pgFormatter). Requires Perl.
  "frigus02.vscode-sql-tagged-template-literals.enableFormat": true,

  // Path to pgFormatter config file. Use this to customize SQL formatting. See [pg_format.config.sample](https://github.com/darold/pgFormatter/blob/v4.4/doc/pg_format.conf.sample) for available options. You can specify the path in different ways:
  // - Relative to the workspace root (only if you're working in a VS Code workspace with a single workspace folder)
  // - Relative to the `tsconfig.json` file
  // - Absolute
  "frigus02.vscode-sql-tagged-template-literals.pgFormatterConfigFile": "",

  // Path to JSON file describing the types used in your database schema. See [plugin documentation](https://github.com/frigus02/typescript-sql-tagged-template-plugin) for how to generate the file. You can specify the path in different ways:
  // - Relative to the workspace root (only if you're working in a VS Code workspace with a single workspace folder)
  // - Relative to the `tsconfig.json` file
  // - Absolute
  "frigus02.vscode-sql-tagged-template-literals.schemaFile": ""

},
{
  //
  "github.copilot.advanced": {},

  // Enable or disable Copilot for specified [languages](https://code.visualstudio.com/docs/languages/identifiers)
  "github.copilot.enable": {
    "*": true,
    "yaml": false,
    "plaintext": false,
    "markdown": false
  },

  // Show inline suggestions
  "github.copilot.inlineSuggest.enable": true

},
{
  // Specifies the path where the jsbeautifyrc file.
  "gogocrow.beautify.jsbeautifyrc": ""

},
{
  // Specifies whether column headers in CSV files are capitalized.
  "csv-preview.capitalizeHeaders": true,

  // Specifies the character used to mark comment lines in CSV files.
  "csv-preview.commentCharacter": "#",

  // Specifies whether to format numeric values in CSV files, or to treat them as strings.
  "csv-preview.formatValues": "always",

  // Specifies whether the first row in a CSV file represents column headers.
  "csv-preview.hasHeaders": true,

  // Specifies whether to display line numbers for CSV files.
  "csv-preview.lineNumbers": "none",

  // Specifies a [.NET-style format string](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings) used to format numeric columns in CSV files.
  "csv-preview.numberFormat": "g2",

  // Specifies whether text piped to stdin is automatically opened as a CSV preview.
  "csv-preview.openStdin": false,

  // Specifies the optional character used to surround individual values in a CSV file.
  "csv-preview.quoteMark": "\"",

  // Specifies whether columns are automatically resized to fit the data for CSV files.
  "csv-preview.resizeColumns": "none",

  // Specifies the separator used in a CSV file (normally , but also ; is common).
  "csv-preview.separator": ",",

  // Specifies whether lines that begin with the comment character should be omitted from the CSV preview.
  "csv-preview.skipComments": false

},
{
  // An object with language IDs as keys and their values determining the regex to search for Tailwind CSS classes.
  "headwind.classRegex": {
    "html": "\\bclass\\s*=\\s*[\\\"\\']([_a-zA-Z0-9\\s\\-\\:\\/]+)[\\\"\\']",
    "css": "\\B@apply\\s+([_a-zA-Z0-9\\s\\-\\:\\/]+);",
    "javascript": "(?:\\bclassName\\s*=\\s*[\\\"\\']([_a-zA-Z0-9\\s\\-\\:\\/]+)[\\\"\\'])|(?:\\btw\\s*`([_a-zA-Z0-9\\s\\-\\:\\/]*)`)",
    "javascriptreact": "(?:\\bclassName\\s*=\\s*[\\\"\\']([_a-zA-Z0-9\\s\\-\\:\\/]+)[\\\"\\'])|(?:\\btw\\s*`([_a-zA-Z0-9\\s\\-\\:\\/]*)`)",
    "typescript": "(?:\\bclassName\\s*=\\s*[\\\"\\']([_a-zA-Z0-9\\s\\-\\:\\/]+)[\\\"\\'])|(?:\\btw\\s*`([_a-zA-Z0-9\\s\\-\\:\\/]*)`)",
    "typescriptreact": "(?:\\bclassName\\s*=\\s*[\\\"\\']([_a-zA-Z0-9\\s\\-\\:\\/]+)[\\\"\\'])|(?:\\btw\\s*`([_a-zA-Z0-9\\s\\-\\:\\/]*)`)"
  },

  // If the Tailwind Prefix function is used, this can be specified here (e.g. tw-).
  "headwind.customTailwindPrefix": "",

  // Sort order: A string array that determines the default sort order.
  "headwind.defaultSortOrder": [
    "container",
    "box-border",
    "box-content",
    "static",
    "fixed",
    "absolute",
    "relative",
    "sticky",
    "inset-0",
    "inset-x-0",
    "inset-y-0",
    "inset-x-auto",
    "inset-y-auto",
    "inset-auto",
    "top-0",
    "bottom-0",
    "left-0",
    "right-0",
    "top-auto",
    "bottom-auto",
    "left-auto",
    "right-auto",
    "z-0",
    "z-10",
    "z-20",
    "z-30",
    "z-40",
    "z-50",
    "z-auto",
    "flex",
    "inline-flex",
    "grid",
    "inline-grid",
    "table-caption",
    "table-column",
    "table-column-group",
    "table-footer-group",
    "table-header-group",
    "table-row-group",
    "flex-row",
    "flex-row-reverse",
    "flex-col",
    "flex-col-reverse",
    "flex-no-wrap",
    "flex-wrap",
    "flex-wrap-reverse",
    "items-stretch",
    "items-start",
    "items-center",
    "items-end",
    "items-baseline",
    "content-start",
    "content-center",
    "content-end",
    "content-between",
    "content-around",
    "self-auto",
    "self-start",
    "self-center",
    "self-end",
    "self-stretch",
    "justify-start",
    "justify-center",
    "justify-end",
    "justify-between",
    "justify-around",
    "flex-1",
    "flex-auto",
    "flex-initial",
    "flex-none",
    "flex-grow",
    "flex-grow-0",
    "flex-shrink",
    "flex-shrink-0",
    "order-first",
    "order-last",
    "order-none",
    "order-1",
    "order-2",
    "order-3",
    "order-4",
    "order-5",
    "order-6",
    "order-7",
    "order-8",
    "order-9",
    "order-10",
    "order-11",
    "order-12",
    "visible",
    "invisible",
    "hidden",
    "block",
    "flow-root",
    "inline-block",
    "inline",
    "table",
    "table-row",
    "table-cell",
    "clearfix",
    "float-left",
    "float-right",
    "float-none",
    "clear-right",
    "clear-both",
    "clear-none",
    "object-contain",
    "object-cover",
    "object-fill",
    "object-none",
    "object-scale-down",
    "object-bottom",
    "object-center",
    "object-left",
    "object-left-bottom",
    "object-left-top",
    "object-right",
    "object-right-bottom",
    "object-right-top",
    "object-top",
    "w-0",
    "w-1",
    "w-2",
    "w-3",
    "w-4",
    "w-5",
    "w-6",
    "w-8",
    "w-10",
    "w-12",
    "w-16",
    "w-20",
    "w-24",
    "w-32",
    "w-40",
    "w-48",
    "w-56",
    "w-64",
    "w-auto",
    "w-px",
    "w-1/2",
    "w-1/3",
    "w-2/3",
    "w-1/4",
    "w-2/4",
    "w-3/4",
    "w-1/5",
    "w-2/5",
    "w-3/5",
    "w-4/5",
    "w-1/6",
    "w-2/6",
    "w-3/6",
    "w-4/6",
    "w-5/6",
    "w-1/12",
    "w-2/12",
    "w-3/12",
    "w-4/12",
    "w-5/12",
    "w-6/12",
    "w-7/12",
    "w-8/12",
    "w-9/12",
    "w-10/12",
    "w-11/12",
    "w-full",
    "w-screen",
    "h-0",
    "h-1",
    "h-2",
    "h-3",
    "h-4",
    "h-5",
    "h-6",
    "h-8",
    "h-10",
    "h-12",
    "h-16",
    "h-20",
    "h-24",
    "h-32",
    "h-40",
    "h-48",
    "h-56",
    "h-64",
    "h-auto",
    "h-px",
    "h-full",
    "h-screen",
    "max-w-xs",
    "max-w-sm",
    "max-w-md",
    "max-w-lg",
    "max-w-xl",
    "max-w-2xl",
    "max-w-3xl",
    "max-w-4xl",
    "max-w-5xl",
    "max-w-6xl",
    "max-w-full",
    "max-w-screen-sm",
    "max-w-screen-md",
    "max-w-screen-lg",
    "max-w-screen-xl",
    "max-h-full",
    "max-h-screen",
    "min-w-0",
    "min-w-full",
    "min-h-0",
    "min-h-full",
    "min-h-screen",
    "grid-flow-row",
    "grid-flow-col",
    "grid-flow-row-dense",
    "grid-flow-col-dense",
    "grid-cols-1",
    "grid-cols-2",
    "grid-cols-3",
    "grid-cols-4",
    "grid-cols-5",
    "grid-cols-6",
    "grid-cols-7",
    "grid-cols-8",
    "grid-cols-9",
    "grid-cols-10",
    "grid-cols-11",
    "grid-cols-12",
    "grid-cols-none",
    "col-auto",
    "col-span-1",
    "col-span-2",
    "col-span-3",
    "col-span-4",
    "col-span-5",
    "col-span-6",
    "col-span-7",
    "col-span-8",
    "col-span-9",
    "col-span-10",
    "col-span-11",
    "col-span-12",
    "col-start-1",
    "col-start-2",
    "col-start-3",
    "col-start-4",
    "col-start-5",
    "col-start-6",
    "col-start-7",
    "col-start-8",
    "col-start-9",
    "col-start-10",
    "col-start-11",
    "col-start-12",
    "col-start-13",
    "col-start-auto",
    "col-end-1",
    "col-end-2",
    "col-end-3",
    "col-end-4",
    "col-end-5",
    "col-end-6",
    "col-end-7",
    "col-end-8",
    "col-end-9",
    "col-end-10",
    "col-end-11",
    "col-end-12",
    "col-end-13",
    "col-end-auto",
    "grid-rows-1",
    "grid-rows-2",
    "grid-rows-3",
    "grid-rows-4",
    "grid-rows-5",
    "grid-rows-6",
    "grid-rows-none",
    "row-auto",
    "row-span-1",
    "row-span-2",
    "row-span-3",
    "row-span-4",
    "row-span-5",
    "row-span-6",
    "row-start-1",
    "row-start-2",
    "row-start-3",
    "row-start-4",
    "row-start-5",
    "row-start-6",
    "row-start-7",
    "row-start-auto",
    "row-end-1",
    "row-end-2",
    "row-end-3",
    "row-end-4",
    "row-end-5",
    "row-end-6",
    "row-end-7",
    "row-end-auto",
    "gap-0",
    "gap-1",
    "gap-2",
    "gap-3",
    "gap-4",
    "gap-5",
    "gap-6",
    "gap-8",
    "gap-10",
    "gap-12",
    "gap-16",
    "gap-20",
    "gap-24",
    "gap-32",
    "gap-40",
    "gap-48",
    "gap-56",
    "gap-64",
    "gap-px",
    "row-gap-0",
    "row-gap-1",
    "row-gap-2",
    "row-gap-3",
    "row-gap-4",
    "row-gap-5",
    "row-gap-6",
    "row-gap-8",
    "row-gap-10",
    "row-gap-12",
    "row-gap-16",
    "row-gap-20",
    "row-gap-24",
    "row-gap-32",
    "row-gap-40",
    "row-gap-48",
    "row-gap-56",
    "row-gap-64",
    "row-gap-px",
    "col-gap-0",
    "col-gap-1",
    "col-gap-2",
    "col-gap-3",
    "col-gap-4",
    "col-gap-5",
    "col-gap-6",
    "col-gap-8",
    "col-gap-10",
    "col-gap-12",
    "col-gap-16",
    "col-gap-20",
    "col-gap-24",
    "col-gap-32",
    "col-gap-40",
    "col-gap-48",
    "col-gap-56",
    "col-gap-64",
    "col-gap-px",
    "p-0",
    "p-1",
    "p-2",
    "p-3",
    "p-4",
    "p-5",
    "p-6",
    "p-8",
    "p-10",
    "p-12",
    "p-16",
    "p-20",
    "p-24",
    "p-32",
    "p-40",
    "p-48",
    "p-56",
    "p-64",
    "p-px",
    "px-0",
    "px-1",
    "px-2",
    "px-3",
    "px-4",
    "px-5",
    "px-6",
    "px-8",
    "px-10",
    "px-12",
    "px-16",
    "px-20",
    "px-24",
    "px-32",
    "px-40",
    "px-48",
    "px-56",
    "px-64",
    "px-px",
    "py-0",
    "py-1",
    "py-2",
    "py-3",
    "py-4",
    "py-5",
    "py-6",
    "py-8",
    "py-10",
    "py-12",
    "py-16",
    "py-20",
    "py-24",
    "py-32",
    "py-40",
    "py-48",
    "py-56",
    "py-64",
    "py-px",
    "pt-0",
    "pt-1",
    "pt-2",
    "pt-3",
    "pt-4",
    "pt-5",
    "pt-6",
    "pt-8",
    "pt-10",
    "pt-12",
    "pt-16",
    "pt-20",
    "pt-24",
    "pt-32",
    "pt-40",
    "pt-48",
    "pt-56",
    "pt-64",
    "pt-px",
    "pb-0",
    "pb-1",
    "pb-2",
    "pb-3",
    "pb-4",
    "pb-5",
    "pb-6",
    "pb-8",
    "pb-10",
    "pb-12",
    "pb-16",
    "pb-20",
    "pb-24",
    "pb-32",
    "pb-40",
    "pb-48",
    "pb-56",
    "pb-64",
    "pb-px",
    "pl-0",
    "pl-1",
    "pl-2",
    "pl-3",
    "pl-4",
    "pl-5",
    "pl-6",
    "pl-8",
    "pl-10",
    "pl-12",
    "pl-16",
    "pl-20",
    "pl-24",
    "pl-32",
    "pl-40",
    "pl-48",
    "pl-56",
    "pl-64",
    "pl-px",
    "pr-0",
    "pr-1",
    "pr-2",
    "pr-3",
    "pr-4",
    "pr-5",
    "pr-6",
    "pr-8",
    "pr-10",
    "pr-12",
    "pr-16",
    "pr-20",
    "pr-24",
    "pr-32",
    "pr-40",
    "pr-48",
    "pr-56",
    "pr-64",
    "pr-px",
    "m-0",
    "m-1",
    "m-2",
    "m-3",
    "m-4",
    "m-5",
    "m-6",
    "m-8",
    "m-10",
    "m-12",
    "m-16",
    "m-20",
    "m-24",
    "m-32",
    "m-40",
    "m-48",
    "m-56",
    "m-64",
    "m-auto",
    "m-px",
    "mx-0",
    "mx-1",
    "mx-2",
    "mx-3",
    "mx-4",
    "mx-5",
    "mx-6",
    "mx-8",
    "mx-10",
    "mx-12",
    "mx-16",
    "mx-20",
    "mx-24",
    "mx-32",
    "mx-40",
    "mx-48",
    "mx-56",
    "mx-64",
    "mx-auto",
    "mx-px",
    "my-0",
    "my-1",
    "my-2",
    "my-3",
    "my-4",
    "my-5",
    "my-6",
    "my-8",
    "my-10",
    "my-12",
    "my-16",
    "my-20",
    "my-24",
    "my-32",
    "my-40",
    "my-48",
    "my-56",
    "my-64",
    "my-auto",
    "my-px",
    "mt-0",
    "mt-1",
    "mt-2",
    "mt-3",
    "mt-4",
    "mt-5",
    "mt-6",
    "mt-8",
    "mt-10",
    "mt-12",
    "mt-16",
    "mt-20",
    "mt-24",
    "mt-32",
    "mt-40",
    "mt-48",
    "mt-56",
    "mt-64",
    "mt-auto",
    "mt-px",
    "mb-0",
    "mb-1",
    "mb-2",
    "mb-3",
    "mb-4",
    "mb-5",
    "mb-6",
    "mb-8",
    "mb-10",
    "mb-12",
    "mb-16",
    "mb-20",
    "mb-24",
    "mb-32",
    "mb-40",
    "mb-48",
    "mb-56",
    "mb-64",
    "mb-auto",
    "mb-px",
    "ml-0",
    "ml-1",
    "ml-2",
    "ml-3",
    "ml-4",
    "ml-5",
    "ml-6",
    "ml-8",
    "ml-10",
    "ml-12",
    "ml-16",
    "ml-20",
    "ml-24",
    "ml-32",
    "ml-40",
    "ml-48",
    "ml-56",
    "ml-64",
    "ml-auto",
    "ml-px",
    "mr-0",
    "mr-1",
    "mr-2",
    "mr-3",
    "mr-4",
    "mr-5",
    "mr-6",
    "mr-8",
    "mr-10",
    "mr-12",
    "mr-16",
    "mr-20",
    "mr-24",
    "mr-32",
    "mr-40",
    "mr-48",
    "mr-56",
    "mr-64",
    "mr-auto",
    "mr-px",
    "-m-0",
    "-m-1",
    "-m-2",
    "-m-3",
    "-m-4",
    "-m-5",
    "-m-6",
    "-m-8",
    "-m-10",
    "-m-12",
    "-m-16",
    "-m-20",
    "-m-24",
    "-m-32",
    "-m-40",
    "-m-48",
    "-m-56",
    "-m-64",
    "-m-px",
    "-mx-0",
    "-mx-1",
    "-mx-2",
    "-mx-3",
    "-mx-4",
    "-mx-5",
    "-mx-6",
    "-mx-8",
    "-mx-10",
    "-mx-12",
    "-mx-16",
    "-mx-20",
    "-mx-24",
    "-mx-32",
    "-mx-40",
    "-mx-48",
    "-mx-56",
    "-mx-64",
    "-mx-px",
    "-my-0",
    "-my-1",
    "-my-2",
    "-my-3",
    "-my-4",
    "-my-5",
    "-my-6",
    "-my-8",
    "-my-10",
    "-my-12",
    "-my-16",
    "-my-20",
    "-my-24",
    "-my-32",
    "-my-40",
    "-my-48",
    "-my-56",
    "-my-64",
    "-my-px",
    "-mt-0",
    "-mt-1",
    "-mt-2",
    "-mt-3",
    "-mt-4",
    "-mt-5",
    "-mt-6",
    "-mt-8",
    "-mt-10",
    "-mt-12",
    "-mt-16",
    "-mt-20",
    "-mt-24",
    "-mt-32",
    "-mt-40",
    "-mt-48",
    "-mt-56",
    "-mt-64",
    "-mt-px",
    "-mb-0",
    "-mb-1",
    "-mb-2",
    "-mb-3",
    "-mb-4",
    "-mb-5",
    "-mb-6",
    "-mb-8",
    "-mb-10",
    "-mb-12",
    "-mb-16",
    "-mb-20",
    "-mb-24",
    "-mb-32",
    "-mb-40",
    "-mb-48",
    "-mb-56",
    "-mb-64",
    "-mb-px",
    "-ml-0",
    "-ml-1",
    "-ml-2",
    "-ml-3",
    "-ml-4",
    "-ml-5",
    "-ml-6",
    "-ml-8",
    "-ml-10",
    "-ml-12",
    "-ml-16",
    "-ml-20",
    "-ml-24",
    "-ml-32",
    "-ml-40",
    "-ml-48",
    "-ml-56",
    "-ml-64",
    "-ml-px",
    "-mr-0",
    "-mr-1",
    "-mr-2",
    "-mr-3",
    "-mr-4",
    "-mr-5",
    "-mr-6",
    "-mr-8",
    "-mr-10",
    "-mr-12",
    "-mr-16",
    "-mr-20",
    "-mr-24",
    "-mr-32",
    "-mr-40",
    "-mr-48",
    "-mr-56",
    "-mr-64",
    "-mr-px",
    "space-x-0",
    "space-x-1",
    "space-x-2",
    "space-x-3",
    "space-x-4",
    "space-x-5",
    "space-x-6",
    "space-x-8",
    "space-x-10",
    "space-x-12",
    "space-x-16",
    "space-x-20",
    "space-x-24",
    "space-x-32",
    "space-x-40",
    "space-x-48",
    "space-x-56",
    "space-x-64",
    "space-x-px",
    "-space-x-1",
    "-space-x-2",
    "-space-x-3",
    "-space-x-4",
    "-space-x-5",
    "-space-x-6",
    "-space-x-8",
    "-space-x-10",
    "-space-x-12",
    "-space-x-16",
    "-space-x-20",
    "-space-x-24",
    "-space-x-32",
    "-space-x-40",
    "-space-x-48",
    "-space-x-56",
    "-space-x-64",
    "-space-x-px",
    "space-y-0",
    "space-y-1",
    "space-y-2",
    "space-y-3",
    "space-y-4",
    "space-y-5",
    "space-y-6",
    "space-y-8",
    "space-y-10",
    "space-y-12",
    "space-y-16",
    "space-y-20",
    "space-y-24",
    "space-y-32",
    "space-y-40",
    "space-y-48",
    "space-y-56",
    "space-y-64",
    "space-y-px",
    "-space-y-1",
    "-space-y-2",
    "-space-y-3",
    "-space-y-4",
    "-space-y-5",
    "-space-y-6",
    "-space-y-8",
    "-space-y-10",
    "-space-y-12",
    "-space-y-16",
    "-space-y-20",
    "-space-y-24",
    "-space-y-32",
    "-space-y-40",
    "-space-y-48",
    "-space-y-56",
    "-space-y-64",
    "-space-y-px",
    "space-x-reverse",
    "space-y-reverse",
    "overflow-auto",
    "overflow-hidden",
    "overflow-visible",
    "overflow-scroll",
    "overflow-x-auto",
    "overflow-x-hidden",
    "overflow-x-visible",
    "overflow-x-scroll",
    "overflow-y-auto",
    "overflow-y-hidden",
    "overflow-y-visible",
    "overflow-y-scroll",
    "scrolling-touch",
    "scrolling-auto",
    "font-sans",
    "font-serif",
    "font-mono",
    "text-xs",
    "text-sm",
    "text-base",
    "text-lg",
    "text-xl",
    "text-2xl",
    "text-3xl",
    "text-4xl",
    "text-5xl",
    "text-6xl",
    "antialiased",
    "subpixel-antialiased",
    "italic",
    "not-italic",
    "font-hairline",
    "font-thin",
    "font-light",
    "font-normal",
    "font-medium",
    "font-semibold",
    "font-bold",
    "font-extrabold",
    "font-black",
    "leading-none",
    "leading-tight",
    "leading-snug",
    "leading-normal",
    "leading-relaxed",
    "leading-loose",
    "leading-3",
    "leading-4",
    "leading-5",
    "leading-6",
    "leading-7",
    "leading-8",
    "leading-9",
    "leading-10",
    "tracking-tighter",
    "tracking-tight",
    "tracking-normal",
    "tracking-wide",
    "tracking-wider",
    "tracking-widest",
    "prose-sm",
    "prose",
    "prose-lg",
    "prose-xl",
    "prose-2xl",
    "text-left",
    "text-center",
    "text-right",
    "text-justify",
    "text-transparent",
    "text-current",
    "text-black",
    "text-white",
    "text-gray-100",
    "text-gray-200",
    "text-gray-300",
    "text-gray-400",
    "text-gray-500",
    "text-gray-600",
    "text-gray-700",
    "text-gray-800",
    "text-gray-900",
    "text-red-100",
    "text-red-200",
    "text-red-300",
    "text-red-400",
    "text-red-500",
    "text-red-600",
    "text-red-700",
    "text-red-800",
    "text-red-900",
    "text-orange-100",
    "text-orange-200",
    "text-orange-300",
    "text-orange-400",
    "text-orange-500",
    "text-orange-600",
    "text-orange-700",
    "text-orange-800",
    "text-orange-900",
    "text-yellow-100",
    "text-yellow-200",
    "text-yellow-300",
    "text-yellow-400",
    "text-yellow-500",
    "text-yellow-600",
    "text-yellow-700",
    "text-yellow-800",
    "text-yellow-900",
    "text-green-100",
    "text-green-200",
    "text-green-300",
    "text-green-400",
    "text-green-500",
    "text-green-600",
    "text-green-700",
    "text-green-800",
    "text-green-900",
    "text-teal-100",
    "text-teal-200",
    "text-teal-300",
    "text-teal-400",
    "text-teal-500",
    "text-teal-600",
    "text-teal-700",
    "text-teal-800",
    "text-teal-900",
    "text-blue-100",
    "text-blue-200",
    "text-blue-300",
    "text-blue-400",
    "text-blue-500",
    "text-blue-600",
    "text-blue-700",
    "text-blue-800",
    "text-blue-900",
    "text-indigo-100",
    "text-indigo-200",
    "text-indigo-300",
    "text-indigo-400",
    "text-indigo-500",
    "text-indigo-600",
    "text-indigo-700",
    "text-indigo-800",
    "text-indigo-900",
    "text-purple-100",
    "text-purple-200",
    "text-purple-300",
    "text-purple-400",
    "text-purple-500",
    "text-purple-600",
    "text-purple-700",
    "text-purple-800",
    "text-purple-900",
    "text-pink-100",
    "text-pink-200",
    "text-pink-300",
    "text-pink-400",
    "text-pink-500",
    "text-pink-600",
    "text-pink-700",
    "text-pink-800",
    "text-pink-900",
    "text-opacity-0",
    "text-opacity-25",
    "text-opacity-50",
    "text-opacity-75",
    "text-opacity-100",
    "placeholder-transparent",
    "placeholder-current",
    "placeholder-black",
    "placeholder-white",
    "placeholder-gray-100",
    "placeholder-gray-200",
    "placeholder-gray-300",
    "placeholder-gray-400",
    "placeholder-gray-500",
    "placeholder-gray-600",
    "placeholder-gray-700",
    "placeholder-gray-800",
    "placeholder-gray-900",
    "placeholder-red-100",
    "placeholder-red-200",
    "placeholder-red-300",
    "placeholder-red-400",
    "placeholder-red-500",
    "placeholder-red-600",
    "placeholder-red-700",
    "placeholder-red-800",
    "placeholder-red-900",
    "placeholder-orange-100",
    "placeholder-orange-200",
    "placeholder-orange-300",
    "placeholder-orange-400",
    "placeholder-orange-500",
    "placeholder-orange-600",
    "placeholder-orange-700",
    "placeholder-orange-800",
    "placeholder-orange-900",
    "placeholder-yellow-100",
    "placeholder-yellow-200",
    "placeholder-yellow-300",
    "placeholder-yellow-400",
    "placeholder-yellow-500",
    "placeholder-yellow-600",
    "placeholder-yellow-700",
    "placeholder-yellow-800",
    "placeholder-yellow-900",
    "placeholder-green-100",
    "placeholder-green-200",
    "placeholder-green-300",
    "placeholder-green-400",
    "placeholder-green-500",
    "placeholder-green-600",
    "placeholder-green-700",
    "placeholder-green-800",
    "placeholder-green-900",
    "placeholder-teal-100",
    "placeholder-teal-200",
    "placeholder-teal-300",
    "placeholder-teal-400",
    "placeholder-teal-500",
    "placeholder-teal-600",
    "placeholder-teal-700",
    "placeholder-teal-800",
    "placeholder-teal-900",
    "placeholder-blue-100",
    "placeholder-blue-200",
    "placeholder-blue-300",
    "placeholder-blue-400",
    "placeholder-blue-500",
    "placeholder-blue-600",
    "placeholder-blue-700",
    "placeholder-blue-800",
    "placeholder-blue-900",
    "placeholder-indigo-100",
    "placeholder-indigo-200",
    "placeholder-indigo-300",
    "placeholder-indigo-400",
    "placeholder-indigo-500",
    "placeholder-indigo-600",
    "placeholder-indigo-700",
    "placeholder-indigo-800",
    "placeholder-indigo-900",
    "placeholder-purple-100",
    "placeholder-purple-200",
    "placeholder-purple-300",
    "placeholder-purple-400",
    "placeholder-purple-500",
    "placeholder-purple-600",
    "placeholder-purple-700",
    "placeholder-purple-800",
    "placeholder-purple-900",
    "placeholder-pink-100",
    "placeholder-pink-200",
    "placeholder-pink-300",
    "placeholder-pink-400",
    "placeholder-pink-500",
    "placeholder-pink-600",
    "placeholder-pink-700",
    "placeholder-pink-800",
    "placeholder-pink-900",
    "placeholder-opacity-0",
    "placeholder-opacity-25",
    "placeholder-opacity-50",
    "placeholder-opacity-75",
    "placeholder-opacity-100",
    "placeholder-left",
    "placeholder-center",
    "placeholder-right",
    "placeholder-justify",
    "underline",
    "line-through",
    "no-underline",
    "uppercase",
    "lowercase",
    "capitalize",
    "normal-case",
    "break-normal",
    "break-words",
    "break-all",
    "truncate",
    "whitespace-normal",
    "whitespace-no-wrap",
    "whitespace-pre",
    "whitespace-pre-line",
    "whitespace-pre-wrap",
    "align-baseline",
    "align-top",
    "align-middle",
    "align-bottom",
    "align-text-top",
    "align-text-bottom",
    "list-none",
    "list-disc",
    "list-decimal",
    "list-inside",
    "list-outside",
    "transition-none",
    "transition-all",
    "transition",
    "transition-colors",
    "transition-opacity",
    "transition-shadow",
    "transition-transform",
    "duration-75",
    "duration-100",
    "duration-150",
    "duration-200",
    "duration-300",
    "duration-500",
    "duration-700",
    "duration-1000",
    "ease-linear",
    "ease-in",
    "ease-out",
    "ease-in-out",
    "delay-75",
    "delay-100",
    "delay-150",
    "delay-200",
    "delay-300",
    "delay-500",
    "delay-700",
    "delay-1000",
    "origin-center",
    "origin-top",
    "origin-top-right",
    "origin-right",
    "origin-bottom-right",
    "origin-bottom",
    "origin-bottom-left",
    "origin-left",
    "origin-top-left",
    "transform",
    "scale-0",
    "scale-50",
    "scale-75",
    "scale-90",
    "scale-95",
    "scale-100",
    "scale-105",
    "scale-110",
    "scale-125",
    "scale-150",
    "scale-x-0",
    "scale-x-50",
    "scale-x-75",
    "scale-x-90",
    "scale-x-95",
    "scale-x-100",
    "scale-x-105",
    "scale-x-110",
    "scale-x-125",
    "scale-x-150",
    "scale-y-0",
    "scale-y-50",
    "scale-y-75",
    "scale-y-90",
    "scale-y-95",
    "scale-y-100",
    "scale-y-105",
    "scale-y-110",
    "scale-y-125",
    "scale-y-150",
    "rotate-0",
    "rotate-45",
    "rotate-90",
    "rotate-180",
    "-rotate-180",
    "-rotate-90",
    "-rotate-45",
    "translate-x-0",
    "translate-x-1",
    "translate-x-2",
    "translate-x-3",
    "translate-x-4",
    "translate-x-5",
    "translate-x-6",
    "translate-x-8",
    "translate-x-10",
    "translate-x-12",
    "translate-x-16",
    "translate-x-20",
    "translate-x-24",
    "translate-x-32",
    "translate-x-40",
    "translate-x-48",
    "translate-x-56",
    "translate-x-64",
    "translate-x-px",
    "-translate-x-1",
    "-translate-x-2",
    "-translate-x-3",
    "-translate-x-4",
    "-translate-x-5",
    "-translate-x-6",
    "-translate-x-8",
    "-translate-x-10",
    "-translate-x-12",
    "-translate-x-16",
    "-translate-x-20",
    "-translate-x-24",
    "-translate-x-32",
    "-translate-x-40",
    "-translate-x-48",
    "-translate-x-56",
    "-translate-x-64",
    "-translate-x-px",
    "-translate-x-full",
    "-translate-x-1/2",
    "translate-x-1/2",
    "translate-x-full",
    "translate-y-0",
    "translate-y-1",
    "translate-y-2",
    "translate-y-3",
    "translate-y-4",
    "translate-y-5",
    "translate-y-6",
    "translate-y-8",
    "translate-y-10",
    "translate-y-12",
    "translate-y-16",
    "translate-y-20",
    "translate-y-24",
    "translate-y-32",
    "translate-y-40",
    "translate-y-48",
    "translate-y-56",
    "translate-y-64",
    "translate-y-px",
    "-translate-y-1",
    "-translate-y-2",
    "-translate-y-3",
    "-translate-y-4",
    "-translate-y-5",
    "-translate-y-6",
    "-translate-y-8",
    "-translate-y-10",
    "-translate-y-12",
    "-translate-y-16",
    "-translate-y-20",
    "-translate-y-24",
    "-translate-y-32",
    "-translate-y-40",
    "-translate-y-48",
    "-translate-y-56",
    "-translate-y-64",
    "-translate-y-px",
    "-translate-y-full",
    "-translate-y-1/2",
    "translate-y-1/2",
    "translate-y-full",
    "skew-x-0",
    "skew-x-3",
    "skew-x-6",
    "skew-x-12",
    "-skew-x-12",
    "-skew-x-6",
    "-skew-x-3",
    "skew-y-0",
    "skew-y-3",
    "skew-y-6",
    "skew-y-12",
    "-skew-y-12",
    "-skew-y-6",
    "-skew-y-3",
    "bg-fixed",
    "bg-local",
    "bg-scroll",
    "bg-transparent",
    "bg-current",
    "bg-black",
    "bg-white",
    "bg-gray-100",
    "bg-gray-200",
    "bg-gray-300",
    "bg-gray-400",
    "bg-gray-500",
    "bg-gray-600",
    "bg-gray-700",
    "bg-gray-800",
    "bg-gray-900",
    "bg-red-100",
    "bg-red-200",
    "bg-red-300",
    "bg-red-400",
    "bg-red-500",
    "bg-red-600",
    "bg-red-700",
    "bg-red-800",
    "bg-red-900",
    "bg-orange-100",
    "bg-orange-200",
    "bg-orange-300",
    "bg-orange-400",
    "bg-orange-500",
    "bg-orange-600",
    "bg-orange-700",
    "bg-orange-800",
    "bg-orange-900",
    "bg-yellow-100",
    "bg-yellow-200",
    "bg-yellow-300",
    "bg-yellow-400",
    "bg-yellow-500",
    "bg-yellow-600",
    "bg-yellow-700",
    "bg-yellow-800",
    "bg-yellow-900",
    "bg-green-100",
    "bg-green-200",
    "bg-green-300",
    "bg-green-400",
    "bg-green-500",
    "bg-green-600",
    "bg-green-700",
    "bg-green-800",
    "bg-green-900",
    "bg-teal-100",
    "bg-teal-200",
    "bg-teal-300",
    "bg-teal-400",
    "bg-teal-500",
    "bg-teal-600",
    "bg-teal-700",
    "bg-teal-800",
    "bg-teal-900",
    "bg-blue-100",
    "bg-blue-200",
    "bg-blue-300",
    "bg-blue-400",
    "bg-blue-500",
    "bg-blue-600",
    "bg-blue-700",
    "bg-blue-800",
    "bg-blue-900",
    "bg-indigo-100",
    "bg-indigo-200",
    "bg-indigo-300",
    "bg-indigo-400",
    "bg-indigo-500",
    "bg-indigo-600",
    "bg-indigo-700",
    "bg-indigo-800",
    "bg-indigo-900",
    "bg-purple-100",
    "bg-purple-200",
    "bg-purple-300",
    "bg-purple-400",
    "bg-purple-500",
    "bg-purple-600",
    "bg-purple-700",
    "bg-purple-800",
    "bg-purple-900",
    "bg-pink-100",
    "bg-pink-200",
    "bg-pink-300",
    "bg-pink-400",
    "bg-pink-500",
    "bg-pink-600",
    "bg-pink-700",
    "bg-pink-800",
    "bg-pink-900",
    "bg-opacity-0",
    "bg-opacity-25",
    "bg-opacity-50",
    "bg-opacity-75",
    "bg-opacity-100",
    "bg-bottom",
    "bg-center",
    "bg-left",
    "bg-left-bottom",
    "bg-left-top",
    "bg-right",
    "bg-right-bottom",
    "bg-right-top",
    "bg-top",
    "bg-repeat",
    "bg-no-repeat",
    "bg-repeat-x",
    "bg-repeat-y",
    "bg-repeat-round",
    "bg-repeat-space",
    "bg-auto",
    "bg-cover",
    "bg-contain",
    "border",
    "border-0",
    "border-2",
    "border-4",
    "border-8",
    "border-t",
    "border-t-0",
    "border-t-2",
    "border-t-4",
    "border-t-8",
    "border-b",
    "border-b-0",
    "border-b-2",
    "border-b-4",
    "border-b-8",
    "border-l",
    "border-l-0",
    "border-l-2",
    "border-l-4",
    "border-l-8",
    "border-r",
    "border-r-0",
    "border-r-2",
    "border-r-4",
    "border-r-8",
    "border-collapse",
    "border-separate",
    "border-transparent",
    "border-current",
    "border-black",
    "border-white",
    "border-gray-100",
    "border-gray-200",
    "border-gray-300",
    "border-gray-400",
    "border-gray-500",
    "border-gray-600",
    "border-gray-700",
    "border-gray-800",
    "border-gray-900",
    "border-red-100",
    "border-red-200",
    "border-red-300",
    "border-red-400",
    "border-red-500",
    "border-red-600",
    "border-red-700",
    "border-red-800",
    "border-red-900",
    "border-orange-100",
    "border-orange-200",
    "border-orange-300",
    "border-orange-400",
    "border-orange-500",
    "border-orange-600",
    "border-orange-700",
    "border-orange-800",
    "border-orange-900",
    "border-yellow-100",
    "border-yellow-200",
    "border-yellow-300",
    "border-yellow-400",
    "border-yellow-500",
    "border-yellow-600",
    "border-yellow-700",
    "border-yellow-800",
    "border-yellow-900",
    "border-green-100",
    "border-green-200",
    "border-green-300",
    "border-green-400",
    "border-green-500",
    "border-green-600",
    "border-green-700",
    "border-green-800",
    "border-green-900",
    "border-teal-100",
    "border-teal-200",
    "border-teal-300",
    "border-teal-400",
    "border-teal-500",
    "border-teal-600",
    "border-teal-700",
    "border-teal-800",
    "border-teal-900",
    "border-blue-100",
    "border-blue-200",
    "border-blue-300",
    "border-blue-400",
    "border-blue-500",
    "border-blue-600",
    "border-blue-700",
    "border-blue-800",
    "border-blue-900",
    "border-indigo-100",
    "border-indigo-200",
    "border-indigo-300",
    "border-indigo-400",
    "border-indigo-500",
    "border-indigo-600",
    "border-indigo-700",
    "border-indigo-800",
    "border-indigo-900",
    "border-purple-100",
    "border-purple-200",
    "border-purple-300",
    "border-purple-400",
    "border-purple-500",
    "border-purple-600",
    "border-purple-700",
    "border-purple-800",
    "border-purple-900",
    "border-pink-100",
    "border-pink-200",
    "border-pink-300",
    "border-pink-400",
    "border-pink-500",
    "border-pink-600",
    "border-pink-700",
    "border-pink-800",
    "border-pink-900",
    "border-opacity-0",
    "border-opacity-25",
    "border-opacity-50",
    "border-opacity-75",
    "border-opacity-100",
    "border-solid",
    "border-dashed",
    "border-dotted",
    "border-double",
    "border-none",
    "divide-x-0",
    "divide-x-2",
    "divide-x-4",
    "divide-x-8",
    "divide-x",
    "divide-y-0",
    "divide-y-2",
    "divide-y-4",
    "divide-y-8",
    "divide-y",
    "divide-x-reverse",
    "divide-y-reverse",
    "divide-transparent",
    "divide-current",
    "divide-black",
    "divide-white",
    "divide-gray-100",
    "divide-gray-200",
    "divide-gray-300",
    "divide-gray-400",
    "divide-gray-500",
    "divide-gray-600",
    "divide-gray-700",
    "divide-gray-800",
    "divide-gray-900",
    "divide-red-100",
    "divide-red-200",
    "divide-red-300",
    "divide-red-400",
    "divide-red-500",
    "divide-red-600",
    "divide-red-700",
    "divide-red-800",
    "divide-red-900",
    "divide-orange-100",
    "divide-orange-200",
    "divide-orange-300",
    "divide-orange-400",
    "divide-orange-500",
    "divide-orange-600",
    "divide-orange-700",
    "divide-orange-800",
    "divide-orange-900",
    "divide-yellow-100",
    "divide-yellow-200",
    "divide-yellow-300",
    "divide-yellow-400",
    "divide-yellow-500",
    "divide-yellow-600",
    "divide-yellow-700",
    "divide-yellow-800",
    "divide-yellow-900",
    "divide-green-100",
    "divide-green-200",
    "divide-green-300",
    "divide-green-400",
    "divide-green-500",
    "divide-green-600",
    "divide-green-700",
    "divide-green-800",
    "divide-green-900",
    "divide-teal-100",
    "divide-teal-200",
    "divide-teal-300",
    "divide-teal-400",
    "divide-teal-500",
    "divide-teal-600",
    "divide-teal-700",
    "divide-teal-800",
    "divide-teal-900",
    "divide-blue-100",
    "divide-blue-200",
    "divide-blue-300",
    "divide-blue-400",
    "divide-blue-500",
    "divide-blue-600",
    "divide-blue-700",
    "divide-blue-800",
    "divide-blue-900",
    "divide-indigo-100",
    "divide-indigo-200",
    "divide-indigo-300",
    "divide-indigo-400",
    "divide-indigo-500",
    "divide-indigo-600",
    "divide-indigo-700",
    "divide-indigo-800",
    "divide-indigo-900",
    "divide-purple-100",
    "divide-purple-200",
    "divide-purple-300",
    "divide-purple-400",
    "divide-purple-500",
    "divide-purple-600",
    "divide-purple-700",
    "divide-purple-800",
    "divide-purple-900",
    "divide-pink-100",
    "divide-pink-200",
    "divide-pink-300",
    "divide-pink-400",
    "divide-pink-500",
    "divide-pink-600",
    "divide-pink-700",
    "divide-pink-800",
    "divide-pink-900",
    "rounded-none",
    "rounded-sm",
    "rounded",
    "rounded-md",
    "rounded-lg",
    "rounded-full",
    "rounded-t-none",
    "rounded-t-sm",
    "rounded-t",
    "rounded-t-lg",
    "rounded-t-full",
    "rounded-b-none",
    "rounded-b-sm",
    "rounded-b",
    "rounded-b-lg",
    "rounded-b-full",
    "rounded-l-none",
    "rounded-l-sm",
    "rounded-l",
    "rounded-l-lg",
    "rounded-l-full",
    "rounded-r-none",
    "rounded-r-sm",
    "rounded-r",
    "rounded-r-lg",
    "rounded-r-full",
    "rounded-tl-none",
    "rounded-tl-sm",
    "rounded-tl",
    "rounded-tl-lg",
    "rounded-tl-full",
    "rounded-tr-none",
    "rounded-tr-sm",
    "rounded-tr",
    "rounded-tr-lg",
    "rounded-tr-full",
    "rounded-bl-none",
    "rounded-bl-sm",
    "rounded-bl",
    "rounded-bl-lg",
    "rounded-bl-full",
    "rounded-br-none",
    "rounded-br-sm",
    "rounded-br",
    "rounded-br-lg",
    "rounded-br-full",
    "shadow-xs",
    "shadow-sm",
    "shadow",
    "shadow-md",
    "shadow-lg",
    "shadow-xl",
    "shadow-2xl",
    "shadow-inner",
    "shadow-outline",
    "shadow-none",
    "outline-none",
    "opacity-0",
    "opacity-25",
    "opacity-50",
    "opacity-75",
    "opacity-100",
    "table-auto",
    "table-fixed",
    "appearance-none",
    "cursor-auto",
    "cursor-default",
    "cursor-pointer",
    "cursor-wait",
    "cursor-move",
    "cursor-not-allowed",
    "pointer-events-none",
    "pointer-events-auto",
    "resize-none",
    "resize",
    "resize-x",
    "resize-y",
    "select-none",
    "select-text",
    "select-all",
    "select-auto",
    "sr-only",
    "not-sr-only",
    "fill-current",
    "stroke-current",
    "stroke-0",
    "stroke-1",
    "stroke-2",
    "clear-left"
  ],

  // A flag that controls whether or not Headwind will move custom CSS classes before (true) or after (false) the Tailwind CSS classes.
  "headwind.prependCustomClasses": false,

  // A flag that controls whether or not Headwind will remove duplicate Tailwind CSS classes.
  "headwind.removeDuplicates": true,

  // A flag that controls whether or not Headwind will sort your Tailwind CSS classes on save.
  "headwind.runOnSave": true

},
{
  // Settings specific to CSS minification. Tool tips and completion are provided when editing your settings.
  "minify.css": {
    "advanced": true,
    "aggressiveMerging": true,
    "compatibility": "*",
    "inliner": {},
    "keepBreaks": false,
    "keepSpecialComments": "*",
    "mediaMerging": true,
    "processImport": true,
    "processImportFrom": [
      "all"
    ],
    "rebase": true,
    "restructuring": true,
    "root": "${workspaceRoot}",
    "roundingPrecision": 2,
    "semanticMerging": false,
    "shorthandCompacting": true
  },

  // Settings specific to HTML minification. Tool tips and completion are provided when editing your settings.
  "minify.html": {
    "caseSensitive": false,
    "collapseBooleanAttributes": true,
    "collapseInlineTagWhitespace": false,
    "collapseWhitespace": true,
    "conservativeCollapse": false,
    "customAttrAssign": [],
    "customAttrCollapse": "",
    "customAttrSurround": [],
    "customEventAttributes": [
      "^on[a-z]{3,}$"
    ],
    "decodeEntities": false,
    "html5": true,
    "ignoreCustomComments": [
      "^!"
    ],
    "ignoreCustomFragments": [
      "<%[\\s\\S]*?%>",
      "<\\?[\\s\\S]*?\\?>"
    ],
    "includeAutoGeneratedTags": true,
    "keepClosingSlash": false,
    "maxLineLength": false,
    "minifyCSS": true,
    "minifyJS": true,
    "minifyURLs": false,
    "preserveLineBreaks": false,
    "preventAttributesEscaping": false,
    "processConditionalComments": false,
    "processScripts": [],
    "quoteCharacter": "\"",
    "removeAttributeQuotes": false,
    "removeComments": false,
    "removeEmptyAttributes": false,
    "removeEmptyElements": false,
    "removeOptionalTags": false,
    "removeRedundantAttributes": false,
    "removeScriptTypeAttributes": false,
    "removeStyleLinkTypeAttributes": false,
    "sortAttributes": false,
    "sortClassName": false,
    "trimCustomFragments": false,
    "useShortDoctype": false
  },

  // Settings specific to Javascript minification. Tool tips and completion are provided when editing your settings.
  "minify.js": {
    "mangle": true,
    "compress": {
      "sequences": true,
      "properties": true,
      "dead_code": true,
      "drop_debugger": true,
      "unsafe": false,
      "unsafe_comps": false,
      "conditionals": true,
      "comparisons": true,
      "evaluate": true,
      "booleans": true,
      "loops": true,
      "unused": true,
      "hoist_funs": true,
      "keep_fargs": true,
      "keep_fnames": false,
      "hoist_vars": false,
      "if_return": true,
      "join_vars": true,
      "collapse_vars": false,
      "reduce_vars": false,
      "side_effects": true,
      "pure_getters": false,
      "pure_funcs": null,
      "negate_iife": false,
      "drop_console": false,
      "passes": 1,
      "global_defs": {}
    },
    "output": {
      "ascii_only": false,
      "inline_script": false,
      "max_line_len": 32000,
      "braces": false,
      "semicolons": true,
      "comments": false,
      "shebang": true,
      "preamble": null,
      "quote_style": "best"
    }
  },

  // Minify file on save if a related (.min.[ext]) file already exists. Includes directory minification/
  "minify.minifyExistingOnSave": false

},
{
  // [collapse-preserve-inline|collapse|expand|end-expand|none].
  "js-beautify.brace_style": "collapse",

  // Break chained method calls across subsequent lines.
  "js-beautify.break_chained_methods": false,

  // Put commas at the beginning of new line instead of end.
  "js-beautify.comma_first": false,

  // List of tags (defaults to pre) whose content should not be reformatted.
  "js-beautify.content_unformatted": [
    "pre",
    "textarea"
  ],

  // Pass E4X xml literals through untouched.
  "js-beautify.e4x": false,

  // Use EditorConfig to set up the options.
  "js-beautify.editorconfig": false,

  // End output with newline.
  "js-beautify.end_with_newline": false,

  // Character(s) to use as line terminators. (default newline - '\n')
  "js-beautify.eol": "\n",

  // List of tags (defaults to [head,body,/html] that should have an extra newline before them.
  "js-beautify.extra_liners": "['head', 'body', '/html']",

  // Whether to enable formatting.
  "js-beautify.formatting": true,

  // Indent <body> sections.
  "js-beautify.indent_body_inner_html": true,

  // Indentation char.
  "js-beautify.indent_char": " ",

  // Keep indentation on empty lines.
  "js-beautify.indent_empty_lines": false,

  // Indent <head> sections.
  "js-beautify.indent_handlebars ": true,

  // Indent <head> sections.
  "js-beautify.indent_head_inner_html": true,

  // Indent <head> and <body> sections. Default is false.
  "js-beautify.indent_inner_html": false,

  // Initial indentation level.
  "js-beautify.indent_level": 0,

  // Sets indent level inside script tags ['normal', 'keep', 'separate']
  "js-beautify.indent_scripts": "normal",

  // Indentation size.
  "js-beautify.indent_size": 2,

  // Indent with tabs.(Override indent_size and indent_size)
  "js-beautify.indent_with_tabs": false,

  // List of tags to be considered inline tags.
  "js-beautify.inline": [
    "a",
    "abbr",
    "area",
    "audio",
    "b",
    "bdi",
    "bdo",
    "br",
    "button",
    "canvas",
    "cite",
    "code",
    "data",
    "datalist",
    "del",
    "dfn",
    "em",
    "embed",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "map",
    "mark",
    "math",
    "meter",
    "noscript",
    "object",
    "output",
    "progress",
    "q",
    "ruby",
    "s",
    "samp",
    "select",
    "small",
    "span",
    "strong",
    "sub",
    "sup",
    "svg",
    "template",
    "textarea",
    "time",
    "u",
    "var",
    "video",
    "wbr",
    "text",
    "acronym",
    "big",
    "strike",
    "tt"
  ],

  // Enable jslint-stricter mode.
  "js-beautify.jslint_happy": false,

  // Preserve array indentation.
  "js-beautify.keep_array_indentation": false,

  // Maximum number of line-breaks to be preserved in one chunk.
  "js-beautify.max_preserve_newlines": 5,

  // Set operator position (before-newline|after-newline|preserve-newline) [before-newline].
  "js-beautify.operator_position": "before-newline",

  // Preserve existing line-breaks.
  "js-beautify.preserve_newlines": true,

  // Add a space before an anonymous function's parens, ie. function ().
  "js-beautify.space_after_anon_function": false,

  // Add a space before a named function's parens, i.e. function example ().
  "js-beautify.space_after_named_function": false,

  // Space before conditional: 'if(x)' / 'if (x)'
  "js-beautify.space_before_conditional": true,

  // Add a single space inside empty paren, ie. f( ).
  "js-beautify.space_in_empty_paren": false,

  // Add padding spaces within paren, ie. f( a, b ).
  "js-beautify.space_in_paren": false,

  // List of templating languages (auto,none,django,erb,handlebars,php,smarty) ['auto'] auto = none in JavaScript, all in html.
  "js-beautify.templating": [
    "erb",
    "django",
    "handlebars",
    "php"
  ],

  // Decode printable characters encoded in xNN notation.
  "js-beautify.unescape_strings": false,

  // List of tags (defaults to inline) that should not be reformatted.
  "js-beautify.unformatted": [],

  // Keep text content together between this string
  "js-beautify.unformatted_content_delimiter": "",

  // Don't indent chained method calls.
  "js-beautify.unindent_chained_methods": false,

  // Self closing tags.
  "js-beautify.void_elements": [
    "area",
    "base",
    "br",
    "col",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "menuitem",
    "meta",
    "param",
    "source",
    "track",
    "wbr",
    "!doctype",
    "?xml",
    "basefont",
    "isindex"
  ],

  // ['auto', 'force', 'force-aligned', 'force-expand-multiline', 'aligned-multiple', 'preserve', 'preserve-aligned']
  "js-beautify.wrap_attributes": "auto",

  // Wrap attributes indent size.
  "js-beautify.wrap_attributes_indent_size": 4,

  // Wrap lines that exceed N characters.
  "js-beautify.wrap_line_length": 0

},
{
  // A list of glob patterns for which the extension should NOT auto-remove the trigger word when a font class name is inserted from the auto completion list.
  "fontAwesomeAutocomplete.disableTriggerWordAutoClearPatterns": [
    "**/*.html"
  ],

  // Artificially increases the importance of completion items. Enabled by default as FontAwesome Autocomplete extension only provides suggestions based on the triggerWord setting.
  "fontAwesomeAutocomplete.enableElevatedSortPriority": true,

  // Allows overriding the inserted text per file type when an autocompletion item is selected. Available template placeholders are {style}, {styleName}, {name}, and {prefix}. {name} supports the following formatters: camelCase, kebabCase, pascalCase, and snakeCase. Usage: {name:formatter}, e.g. {name:camelCase}
  "fontAwesomeAutocomplete.insertionTemplate": {
    "**/*.html": "{style} {prefix}{name}"
  },

  // List of glob patters that determine which files will have Font Awesome Autocomplete enabled.
  "fontAwesomeAutocomplete.patterns": [
    "**/*.html"
  ],

  // Background color of a Font Awesome icon preview. Supports any valid CSS color.
  "fontAwesomeAutocomplete.preview.backgroundColor": "#ffffff",

  // Foreground color of a Font Awesome icon preview. Supports any valid CSS color.
  "fontAwesomeAutocomplete.preview.foregroundColor": "#000000",

  // This setting is deprecated and replaced by triggerWord in version 0.0.4. This setting can be safely removed.
  // List of characters that trigger Font Awesome Autocomplete.
  "fontAwesomeAutocomplete.triggerCharacters": [
    "f"
  ],

  // A word that triggers the auto completion of Font Awesome icons. Last character of the trigger word is also the trigger character for auto completion menu.
  "fontAwesomeAutocomplete.triggerWord": "fa-",

  // Font Awesome major version to use (either 4, 5, or 6).
  "fontAwesomeAutocomplete.version": "5"

},
{
  // Relative path to node_modules folder.
  "search-node-modules.path": "node_modules",

  // Default to folder of last opened file when searching.
  "search-node-modules.useLastFolder": false

},
{
  // Specifies the file extensions this plugin should ignore, this overwrites any values in pigments.enabledExtensions (including the defaults).
  "pigments.disabledExtensions": null,

  // Specifies the file extensions to apply this plugin to.
  "pigments.enabledExtensions": null,

  // Specifies the marker type used to highlight colors.
  "pigments.markerType": null

},
{
  // When creating a hanging indent, do not put the closing bracket on its own line.
  "pythonIndent.keepHangingBracketOnLine": false,

  // Trims lines that contain only whitespace after pressing Enter on them.
  "pythonIndent.trimLinesWithOnlyWhitespace": false,

  // After creating a hanging indent, press tab to leave the indented section and go to the ending bracket.
  "pythonIndent.useTabOnHangingIndent": false

},
{
  // Should all documents have the same schema? Note: An error will be thrown if some documents have differing schemas when this is set to true.
  "json2csv.toCSV.checkSchemaDifferences": false,

  // End of Line Delimiter.
  "json2csv.toCSV.delimiter.eol": "\n",

  // Field Delimiter.
  "json2csv.toCSV.delimiter.field": ",",

  // Wrap values in the delimiter of choice (e.g. wrap values in quotes).
  "json2csv.toCSV.delimiter.wrap": "\"",

  // Should a unicode character be prepended to allow Excel to open a UTF-8 encoded file with non-ASCII characters present.
  "json2csv.toCSV.excelBOM": false,

  // Should objects in array values be deep-converted to CSV?
  "json2csv.toCSV.expandArrayObjects": false,

  // Should the auto-generated header be prepended as the first line in the CSV?
  "json2csv.toCSV.prependHeader": true,

  // Should the header keys be sorted in alphabetical order?
  "json2csv.toCSV.sortHeader": false,

  // Should the field values be trimmed? (in development)
  "json2csv.toCSV.trimFieldValues": false,

  // Should the header fields be trimmed?
  "json2csv.toCSV.trimHeaderFields": false,

  // End of Line Delimiter.
  "json2csv.toJSON.delimiter.eol": "\n",

  // Field Delimiter.
  "json2csv.toJSON.delimiter.field": ",",

  // Wrap values in the delimiter of choice (e.g. wrap values in quotes).
  "json2csv.toJSON.delimiter.wrap": "\"",

  // Should a unicode character be prepended to allow Excel to open a UTF-8 encoded file with non-ASCII characters present.
  "json2csv.toJSON.excelBOM": false,

  // Should the field values be trimmed? (in development)
  "json2csv.toJSON.trimFieldValues": false,

  // Should the header fields be trimmed?
  "json2csv.toJSON.trimHeaderFields": false

},
{
  // Enables line decoration for Kite code finder.
  "kite.codefinder.enableLineDecoration": false,

  // Array of file extensions for which Kite will not provide completions, e.g. ['.go', '.ts']. Requires restart of VSCode.
  "kite.completions.disabledFileExtensions": [],

  // Displays JSON data used by a view and also updates sample.html with the last rendered HTML.
  "kite.developerMode": false,

  // For JavaScript and Go: Enabling this will cause Kite to trigger completions after a space, ( and [. Note that this may cause completions from other providers to not show up.
  "kite.enableOptionalCompletionsTriggers": false,

  // Enable snippet completions
  "kite.enableSnippets": true,

  // The verbosity level of Kite's logs.
  "kite.loggingLevel": "info",

  // Interval in milliseconds at which the Kite extension polls Kite Engine to get the status of the current file.
  "kite.pollingInterval": 5000,

  // Whether or not to show the Kite welcome notification on startup.
  "kite.showWelcomeNotificationOnStartup": true,

  // Automatically start Kite Engine on editor startup if it's not already running.
  "kite.startKiteEngineOnStartup": true

},
{
  // Which dialect to format with (sql: Standard SQL)
  "sql-formatter.dialect": "sql",

  // Change number of linebreaks between queries
  "sql-formatter.linesBetweenQueries": 2,

  // Convert keywords to uppercase
  "sql-formatter.uppercase": false

},
{
  // Auto strip module extensions
  "node-module-intellisense.autoStripExtensions": [
    ".js",
    ".jsx",
    ".ts",
    ".d.ts",
    ".tsx"
  ],

  // Module Paths to scan. Use ${workspaceRoot} for workspace lookup.
  "node-module-intellisense.modulePaths": [],

  // Scans builtin modules as well
  "node-module-intellisense.scanBuiltinModules": true,

  // Scans devDependencies as well
  "node-module-intellisense.scanDevDependencies": true,

  // Scans file modules as well
  "node-module-intellisense.scanFileModules": true

},
{
  // If true an empty line will be inserted after opening curly braces and before closing curly braces.
  "pretty-formatter.braceLine": false,

  // Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings.
  "pretty-formatter.bracePadding": false,

  // Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line.
  "pretty-formatter.braces": false,

  // Emulates JSBeautify's brace_style option using existing Pretty Diff options.
  "pretty-formatter.braceStyle": "none",

  // If a blank new line should be forced above comments.
  "pretty-formatter.commentLine": false,

  // This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code.
  "pretty-formatter.comments": false,

  // If CSS should be beautified in a style where the properties and values are minifed for faster reading of selectors.
  "pretty-formatter.compressedCss": false,

  // Automatically correct some sloppiness in code.
  "pretty-formatter.correct": false,

  // Inserts new line characters between every CSS code block.
  "pretty-formatter.cssInsertLines": false,

  // A list of languages IDs to disable this extension on
  "pretty-formatter.disableLanguages": [],

  // If else_line is true then the keyword 'else' is forced onto a new line.
  "pretty-formatter.elseLine": false,

  // If there should be a trailing comma in arrays and objects. Value multiline only applies to modes beautify and diff.
  "pretty-formatter.endComma": false,

  // If all markup attributes should be indented each onto their own line.
  "pretty-formatter.forceAttribute": false,

  // Will force indentation upon all content and tags without regard for the creation of new text nodes.
  "pretty-formatter.forceIndent": false,

  // Determines if all array indexes should be indented, never indented, or left to the default.
  "pretty-formatter.formatArray": "default",

  // Determines if all object keys should be indented, never indented, or left to the default.
  "pretty-formatter.formatObject": "default",

  // Whether to enable formatting.
  "pretty-formatter.formatting": true,

  // If a space should follow a JavaScript function name.
  "pretty-formatter.functionName": false,

  // How much indentation padding should be applied to beautification? This option is internally used for code that requires switching between libraries.
  "pretty-formatter.indentLevel": 0,

  // The number of 'inchar' values to comprise a single indentation.
  "pretty-formatter.indentSize": 0,

  // When to break consecutively chained methods and properties onto separate lines. A negative value disables this option. A value of 0 ensures method chains are never broken.
  "pretty-formatter.methodChain": 0,

  // If destructured lists in script should never be flattend.
  "pretty-formatter.neverFlatten": false,

  // Insert an empty line at the end of output.
  "pretty-formatter.newLine": true,

  // If a case statement should receive the same indentation as the containing switch block.
  "pretty-formatter.noCaseIndent": false,

  // Whether leading 0s in CSS values immediately preceeding a decimal should be removed or prevented.
  "pretty-formatter.noLeadZero": false,

  // Sorts markup attributes and properties by key name in script and style.
  "pretty-formatter.objectSort": false,

  // The maximum number of consecutive empty lines to retain.
  "pretty-formatter.preserve": 2,

  // Prevent comment reformatting due to option wrap.
  "pretty-formatter.preserveComment": false,

  // If the quotes of script strings or markup attributes should be converted to single quotes or double quotes.
  "pretty-formatter.quoteConvert": "none",

  // Inserts a space following the function keyword for anonymous functions.
  "pretty-formatter.space": true,

  // Markup self-closing tags end will end with ' />' instead of '/>'.
  "pretty-formatter.spaceClose": false,

  // Markup self-closing tags end will end with ' />' instead of '/>'.
  "pretty-formatter.styleguide": "none",

  // Allows immediately adjacement start and end markup tags of the same name to be combined into a single self-closing tag.
  "pretty-formatter.tagMerge": false,

  // Sort child items of each respective markup parent element.
  "pretty-formatter.tagSort": false,

  // If ternary operators in JavaScript ? and : should remain on the same line.
  "pretty-formatter.ternaryLine": true,

  // If markup tags should have their insides preserved. This option is only available to markup and does not support child tokens that require a different lexer.
  "pretty-formatter.unformatted": false,

  // If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated.
  "pretty-formatter.variableList": "none",

  // If lists of assignments and properties should be vertically aligned. This option is not used with the markup lexer.
  "pretty-formatter.vertical": false,

  // Character width limit before applying word wrap. A 0 value disables this option. A negative value concatenates script strings.
  "pretty-formatter.wrap": 0

},
{
  // Parameter for how many rows to be selected
  "mssql-scripts.select-top-N-rows": 500

},
{
  // Tab Size
  "beautify.options": {}

},
{
  // The associated document types to be linted.
  "htmlhint.documentSelector": [
    "html",
    "htm"
  ],

  // Control whether htmlhint is enabled for HTML files or not.
  "htmlhint.enable": true,

  // The htmlhint options object to provide args to the htmlhint command.
  "htmlhint.options": {}

},
{
  // Show a confirmation message before running commands in a playground.
  "mdb.confirmRunAll": true,

  // When the setting that hides the option to choose where to save new connections is checked, this setting sets if and where new connections are saved.
  //  - Workspace: Save new connections globally on vscode.
  //  - Global: Save new connections to the active workspace.
  //  - Session Only: Don't save new connections (connections are lost when the session is closed).
  "mdb.connectionSaving.defaultConnectionSavingLocation": "Global",

  // When a connection is added, a prompt is shown that let's the user decide where the new connection should be saved. When this setting is checked, the prompt is not shown and the default connection saving location setting is used.
  "mdb.connectionSaving.hideOptionToChooseWhereToSaveNewConnections": true,

  // The number of documents to fetch when viewing documents from a collection.
  "mdb.defaultLimit": 10,

  // Files and folders to exclude while searching for playgrounds in the current workspace.
  "mdb.excludeFromPlaygroundsSearch": [
    "**/.*",
    "**/_output/**",
    "**/bower_components/**",
    "**/build/**",
    "**/dist/**",
    "**/node_modules/**",
    "**/out/**",
    "**/output/**",
    "**/release/**",
    "**/releases/**",
    "**/static/**",
    "**/target/**",
    "**/third_party/**",
    "**/vendor/**"
  ],

  // Allow the collection of anonynous diagnostic and usage telemetry data to help improve the product.
  "mdb.sendTelemetry": true,

  // The MongoDB shell to use.
  //  - mongosh: Use the new mongosh
  //  - mongo: Use the legacy mongo shell
  "mdb.shell": "mongosh",

  // Show or hide the MongoDB connections view.
  "mdb.showMongoDBConnectionExplorer": true,

  // Show or hide the help and feedback view.
  "mdb.showMongoDBHelpExplorer": true,

  // Show or hide the MongoDB playgrounds view.
  "mdb.showMongoDBPlaygrounds": true,

  // Use default template for playground files.
  "mdb.useDefaultTemplateForPlayground": true,

  // Controls the maximum number of problems produced by the server.
  "mongodbLanguageServer.maxNumberOfProblems": 100,

  //
  "mongodbLanguageServer.trace.server": {}

},
{
  // An array of attributes in the correct order
  "attrsSorter.order": []

},
{
  // An autoprefixer-like array of browsers.
  "doiuse.browsers": [],

  // Control whether doiuse is enabled for styles files or not.
  "doiuse.enable": false,

  // An optional array of features to ignore.
  "doiuse.ignore": [],

  // An optional array of file globs to match against original source file path, to ignore.
  "doiuse.ignoreFiles": [],

  // Represents a diagnostic level, such as a Information, Warning or Error.
  "doiuse.messageLevel": "Warning",

  // Run the linter on save (onSave) or on type (onType).
  "doiuse.run": "onType"

},
{
  // The text of a label that the file imported implicitly. If `null` then label not displayed.
  "less.implicitlyLabel": "(implicitly)",

  // Allows scan imported files.
  "less.scanImportedFiles": true,

  // The maximum number of imported files to scan.
  "less.scanImportedFilesDepth": 50,

  // The maximum number of nested directories to scan.
  "less.scannerDepth": 30,

  // List of Glob-patterns for directories that are excluded when scanning.
  "less.scannerExclude": [
    "**/.git",
    "**/node_modules",
    "**/bower_components"
  ],

  // Allows to display errors.
  "less.showErrors": false,

  // Allows prompt Mixins.
  "less.suggestMixins": true,

  // Allows prompt Variables.
  "less.suggestVariables": true

},
{
  // The port that SCSS IntelliSense server listens to. Can be used for attaching to the server Node process for debugging / profiling.
  "scss.dev.serverPort": -1,

  // The text of a label that the file imported implicitly. If `null` then label not displayed.
  "scss.implicitlyLabel": "(implicitly)",

  // Allows scan imported files.
  "scss.scanImportedFiles": true,

  // The maximum number of nested directories to scan.
  "scss.scannerDepth": 30,

  // List of glob patterns for directories that are excluded when scanning.
  "scss.scannerExclude": [
    "**/.git",
    "**/node_modules",
    "**/bower_components"
  ],

  // Allows to display errors.
  "scss.showErrors": false,

  // Allows prompt Functions.
  "scss.suggestFunctions": true,

  // Allows prompt Functions in String context after specified symbols.
  "scss.suggestFunctionsInStringContextAfterSymbols": " (+-*%",

  // Allows prompt Mixins.
  "scss.suggestMixins": true,

  // Allows prompt Variables.
  "scss.suggestVariables": true

},
{
  // Equivalent to setting the DOCKER_CERT_PATH environment variable.
  "docker.certPath": "",

  // Command templates for `docker attach` / `docker exec -it` commands.
  "docker.commands.attach": "${config:docker.dockerPath} exec -it ${containerId} ${shellCommand}",

  // Command template(s) for `docker build` commands.
  "docker.commands.build": "${config:docker.dockerPath} build --pull --rm -f \"${dockerfile}\" -t ${tag} \"${context}\"",

  // Command templates for `docker-compose down` commands.
  "docker.commands.composeDown": [
    {
      "label": "Compose Down",
      "template": "${composeCommand} ${configurationFile} down"
    }
  ],

  // Command templates for `docker-compose up` commands.
  "docker.commands.composeUp": [
    {
      "label": "Compose Up",
      "template": "${composeCommand} ${configurationFile} up ${detached} ${build}",
      "contextTypes": [
        "moby"
      ]
    },
    {
      "label": "Compose Up",
      "template": "${composeCommand} ${configurationFile} up ${detached}"
    }
  ],

  // Command templates for `docker-compose up <subset>` commands.
  "docker.commands.composeUpSubset": [
    {
      "label": "Compose Up",
      "template": "${composeCommand} ${profileList} ${configurationFile} up ${detached} ${build} ${serviceList}",
      "contextTypes": [
        "moby"
      ]
    },
    {
      "label": "Compose Up",
      "template": "${composeCommand} ${configurationFile} ${profileList} up ${detached} ${serviceList}"
    }
  ],

  // Command templates for `docker logs` commands.
  "docker.commands.logs": "${config:docker.dockerPath} logs --tail 1000 -f ${containerId}",

  // Command templates for `docker run` commands.
  "docker.commands.run": "${config:docker.dockerPath} run --rm -d ${exposedPorts} ${tag}",

  // Command templates for `docker run -it` (interactive) commands.
  "docker.commands.runInteractive": "${config:docker.dockerPath} run --rm -it ${exposedPorts} ${tag}",

  // Command to use for Docker Compose actions (e.g. `docker-compose`, `docker compose`, etc.). If the executable path contains whitespace, it needs to be quoted appropriately. If unset, the extension will attempt to auto-detect the command to use.
  "docker.composeCommand": "",

  // Any secondary properties to display for a container (an array). Possible elements include: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, and Tag
  "docker.containers.description": [
    "ContainerName",
    "Status"
  ],

  // The property to use to group containers in Docker view: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, Tag, or None
  "docker.containers.groupBy": "Compose Project Name",

  // The primary property to display for a container: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, or Tag
  "docker.containers.label": "FullTag",

  // The property to use to sort containers in Docker view: CreatedTime or Label
  "docker.containers.sortBy": "CreatedTime",

  // Equivalent to setting the DOCKER_CONTEXT environment variable.
  "docker.context": "",

  // Any secondary properties to display for a Docker context (an array). Possible elements include: Name, Description and DockerEndpoint
  "docker.contexts.description": [
    "Description"
  ],

  // The primary property to display for a Docker context: Name, Description or DockerEndpoint
  "docker.contexts.label": "Name",

  // Set to true to include --build option when docker-compose command is invoked
  "docker.dockerComposeBuild": true,

  // Set to true to include --d (detached) option when docker-compose command is invoked
  "docker.dockerComposeDetached": true,

  // If specified, this object will be passed to the Dockerode constructor. Takes precedence over DOCKER_HOST, the Docker Host setting, and any existing Docker contexts.
  "docker.dockerodeOptions": {},

  // Absolute path to Docker client executable (`docker` command). If the path contains whitespace, it needs to be quoted appropriately.
  "docker.dockerPath": "docker",

  // Whether or not to enable the preview Docker Compose Language Service. Changing requires restart to take effect.
  "docker.enableDockerComposeLanguageService": true,

  // Docker view refresh interval (milliseconds)
  "docker.explorerRefreshInterval": 2000,

  // Equivalent to setting the DOCKER_HOST environment variable, for example, ssh://myuser@mymachine or tcp://1.2.3.4.
  "docker.host": "",

  // Build context PATH to pass to Docker build command.
  "docker.imageBuildContextPath": "",

  // Check for outdated base images once per Visual Studio Code session
  "docker.images.checkForOutdatedImages": true,

  // Any secondary properties to display for a image (an array). Possible elements include: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, and Size
  "docker.images.description": [
    "CreatedTime"
  ],

  // The property to use to group images in Docker view: CreatedTime, FullTag, ImageId, None, Registry, Repository, RepositoryName, RepositoryNameAndTag, or Tag
  "docker.images.groupBy": "Repository",

  // The primary property to display for a image: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, or Size
  "docker.images.label": "Tag",

  // The property to use to sort images in Docker view: CreatedTime, Label, or Size
  "docker.images.sortBy": "CreatedTime",

  // Controls the diagnostic severity for the deprecated MAINTAINER instruction
  "docker.languageserver.diagnostics.deprecatedMaintainer": "warning",

  // Controls the diagnostic severity for parser directives that are not written in lowercase
  "docker.languageserver.diagnostics.directiveCasing": "warning",

  // Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines
  "docker.languageserver.diagnostics.emptyContinuationLine": "warning",

  // Controls the diagnostic severity for instructions that are not written in uppercase
  "docker.languageserver.diagnostics.instructionCasing": "warning",

  // Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions
  "docker.languageserver.diagnostics.instructionCmdMultiple": "warning",

  // Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions
  "docker.languageserver.diagnostics.instructionEntrypointMultiple": "warning",

  // Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions
  "docker.languageserver.diagnostics.instructionHealthcheckMultiple": "warning",

  // Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes
  "docker.languageserver.diagnostics.instructionJSONInSingleQuotes": "warning",

  // Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path
  "docker.languageserver.diagnostics.instructionWorkdirRelative": "warning",

  // Controls whether the Dockerfile formatter should ignore instructions that span multiple lines when formatting
  "docker.languageserver.formatter.ignoreMultilineInstructions": false,

  // Equivalent to setting the DOCKER_MACHINE_NAME environment variable.
  "docker.machineName": "",

  // Any secondary properties to display for a Docker network (an array). Possible elements include CreatedTime, NetworkDriver, NetworkId, and NetworkName
  "docker.networks.description": [
    "NetworkDriver",
    "CreatedTime"
  ],

  // The property to use to group networks in Docker view: CreatedTime, NetworkDriver, NetworkId, NetworkName, or None
  "docker.networks.groupBy": "None",

  // The primary property to display for a Docker network: CreatedTime, NetworkDriver, NetworkId, or NetworkName
  "docker.networks.label": "NetworkName",

  // Show the built-in networks in the explorer.
  "docker.networks.showBuiltInNetworks": true,

  // The property to use to sort networks in Docker view: CreatedTime or Label
  "docker.networks.sortBy": "CreatedTime",

  // Prompt for registry selection if the image is not explicitly tagged.
  "docker.promptForRegistryWhenPushingImages": true,

  // The path to use for scaffolding templates.
  "docker.scaffolding.templatePath": "",

  // Set to true to prompt to switch from "UI" extension mode to "Workspace" extension mode if an operation is not supported in UI mode.
  "docker.showRemoteWorkspaceWarning": true,

  // Equivalent to setting the DOCKER_TLS_VERIFY environment variable.
  "docker.tlsVerify": "",

  // Set to true to truncate long image and container registry paths in Docker view
  "docker.truncateLongRegistryPaths": false,

  // Maximum length of a registry paths displayed in Docker view, including ellipsis. The truncateLongRegistryPaths setting must be set to true for truncateMaxLength setting to be effective.
  "docker.truncateMaxLength": 10,

  // Any secondary properties to display for a Docker volume (an array). Possible values include CreatedTime and VolumeName
  "docker.volumes.description": [
    "CreatedTime"
  ],

  // The property to use to group volumes in Docker view: CreatedTime, VolumeName, or None
  "docker.volumes.groupBy": "None",

  // The primary property to display for a Docker volume: CreatedTime or VolumeName
  "docker.volumes.label": "VolumeName",

  // The property to use to sort volumes in Docker view: CreatedTime or Label
  "docker.volumes.sortBy": "CreatedTime"

},
{
  // List of projects in the workspace to exclude from the projects viewlet
  "dataworkspace.excludedProjects": [],

  // Full path to folder where new projects are saved by default.
  "projects.defaultProjectSaveLocation": "",

  // Always show information message when the current workspace folders contain projects that have not been added to the workspace's projects.
  "projects.showNotAddedProjectsInWorkspacePrompt": true

},
{
  // [Optional] Configuration options for localizing into VSCode's configured locale (must restart VSCode for settings to take effect)
  "mssql.applyLocalization": false,

  // Chooses which Authentication method to use
  //  - AuthCodeGrant: Prompts users to sign in using their browser.
  //  - DeviceCode: Allows users to sign in to input-constrained devices.
  "mssql.azureActiveDirectory": "AuthCodeGrant",

  // Connection profiles defined in 'User Settings' are shown under 'MS SQL: Connect' command in the command palette.
  "mssql.connections": [],

  // [Optional] Configuration options for copying results from the Results View
  "mssql.copyIncludeHeaders": false,

  // [Optional] Configuration options for copying multi-line results from the Results View
  "mssql.copyRemoveNewLine": true,

  // Enable Query History Capture
  "mssql.enableQueryHistoryCapture": true,

  // Should Query History feature be enabled
  "mssql.enableQueryHistoryFeature": true,

  // Should column definitions be aligned?
  "mssql.format.alignColumnDefinitionsInColumns": false,

  // Should data types be formatted as UPPERCASE, lowercase, or none (not formatted)
  "mssql.format.datatypeCasing": "none",

  // Should keywords be formatted as UPPERCASE, lowercase, or none (not formatted)
  "mssql.format.keywordCasing": "none",

  // should commas be placed at the beginning of each statement in a list e.g. ', mycolumn2' instead of at the end e.g. 'mycolumn1,'
  "mssql.format.placeCommasBeforeNextStatement": false,

  // Should references to objects in a select statements be split into separate lines? E.g. for 'SELECT C1, C2 FROM T1' both C1 and C2 will be on separate lines
  "mssql.format.placeSelectStatementReferencesOnNewLine": false,

  // [Optional] Do not show unsupported platform warnings
  "mssql.ignorePlatformWarning": false,

  // Should IntelliSense error checking be enabled
  "mssql.intelliSense.enableErrorChecking": true,

  // Should IntelliSense be enabled
  "mssql.intelliSense.enableIntelliSense": true,

  // Should IntelliSense quick info be enabled
  "mssql.intelliSense.enableQuickInfo": true,

  // Should IntelliSense suggestions be enabled
  "mssql.intelliSense.enableSuggestions": true,

  // Should IntelliSense suggestions be lowercase
  "mssql.intelliSense.lowerCaseSuggestions": false,

  // [Optional] Log debug output to the VS Code console (Help -> Toggle Developer Tools)
  "mssql.logDebugInfo": false,

  // Maximum number of old files to remove upon startup that have expired mssql.logRetentionMinutes. Files that do not get cleaned up due to this limitation get cleaned up next time Azure Data Studio starts up.
  "mssql.logFilesRemovalLimit": 100,

  // Number of minutes to retain log files for backend services. Default is 1 week.
  "mssql.logRetentionMinutes": 10080,

  // The maximum number of recently used connections to store in the connection list.
  "mssql.maxRecentConnections": 5,

  // True for the messages pane to be open by default; false for closed
  "mssql.messagesDefaultOpen": true,

  // Should query result selections and scroll positions be saved when switching tabs (may impact performance)
  "mssql.persistQueryResultTabs": false,

  // Enable Parameterization for Always Encrypted
  "mssql.query.alwaysEncryptedParameterization": false,

  // Enable SET ANSI_DEFAULTS
  "mssql.query.ansiDefaults": false,

  // Enable SET ANSI_NULL_DFLT_ON
  "mssql.query.ansiNullDefaultOn": true,

  // Enable SET ANSI_NULLS
  "mssql.query.ansiNulls": true,

  // Enable SET ANSI_PADDING
  "mssql.query.ansiPadding": true,

  // Enable SET ANSI_WARNINGS
  "mssql.query.ansiWarnings": true,

  // Enable SET ARITHABORT option
  "mssql.query.arithAbort": true,

  // Enable SET CURSOR_CLOSE_ON_COMMIT
  "mssql.query.cursorCloseOnCommit": false,

  // Enable SET DEADLOCK_PRIORITY option
  "mssql.query.deadlockPriority": "Normal",

  // Should BIT columns be displayed as numbers (1 or 0)? If false, BIT columns will be displayed as 'true' or 'false'
  "mssql.query.displayBitAsNumber": true,

  // An execution time-out of 0 indicates an unlimited wait (no time-out)
  "mssql.query.executionTimeout": 0,

  // Enable SET IMPLICIT_TRANSACTIONS
  "mssql.query.implicitTransactions": false,

  // Enable SET LOCK TIMEOUT option (in milliseconds)
  "mssql.query.lockTimeout": -1,

  // Number of XML characters to store after running a query
  "mssql.query.maxXmlCharsToStore": 2097152,

  // Enable SET NOCOUNT option
  "mssql.query.noCount": false,

  // Enable SET NOEXEC option
  "mssql.query.noExec": false,

  // Enable SET PARSEONLY option
  "mssql.query.parseOnly": false,

  // Enable SET QUERY_GOVERNOR_COST_LIMIT
  "mssql.query.queryGovernorCostLimit": -1,

  // Enable SET QUOTED_IDENTIFIER
  "mssql.query.quotedIdentifier": true,

  // Maximum number of rows to return before the server stops processing your query.
  "mssql.query.rowCount": 0,

  // Enable SET STATISTICS IO option
  "mssql.query.statisticsIO": false,

  // Enable SET STATISTICS TIME option
  "mssql.query.statisticsTime": false,

  // Maximum size of text and ntext data returned from a SELECT statement
  "mssql.query.textSize": 2147483647,

  // Enable SET TRANSACTION ISOLATION LEVEL option
  "mssql.query.transactionIsolationLevel": "READ COMMITTED",

  // Enable SET XACT_ABORT ON option
  "mssql.query.xactAbortOn": false,

  // Number of query history entries to show in the Query History view
  "mssql.queryHistoryLimit": 20,

  // Set the font family for the results grid; set to blank to use the editor font
  "mssql.resultsFontFamily": "-apple-system,BlinkMacSystemFont,Segoe WPC,Segoe UI,HelveticaNeue-Light,Ubuntu,Droid Sans,sans-serif",

  // Set the font size for the results grid; set to blank to use the editor size
  "mssql.resultsFontSize": 13,

  // [Optional] Delimiter for separating data items when saving results as CSV
  "mssql.saveAsCsv.delimiter": ",",

  // [Optional] File encoding used when saving results as CSV
  "mssql.saveAsCsv.encoding": "utf-8",

  // [Optional] When true, column headers are included when saving results as CSV
  "mssql.saveAsCsv.includeHeaders": true,

  // [Optional] Character(s) used for separating rows when saving results as CSV
  "mssql.saveAsCsv.lineSeparator": null,

  // [Optional] Character used for enclosing text fields when saving results as CSV
  "mssql.saveAsCsv.textIdentifier": "\"",

  // Shortcuts related to the results window
  "mssql.shortcuts": {
    "_comment": "Short cuts must follow the format (ctrl)+(shift)+(alt)+[key]",
    "event.toggleResultPane": "ctrl+alt+R",
    "event.focusResultsGrid": "ctrl+alt+G",
    "event.toggleMessagePane": "ctrl+alt+Y",
    "event.prevGrid": "ctrl+up",
    "event.nextGrid": "ctrl+down",
    "event.copySelection": "ctrl+C",
    "event.copyWithHeaders": "",
    "event.copyAllHeaders": "",
    "event.maximizeGrid": "",
    "event.selectAll": "ctrl+A",
    "event.saveAsJSON": "",
    "event.saveAsCSV": "",
    "event.saveAsExcel": ""
  },

  // [Optional] Should execution time be shown for individual batches
  "mssql.showBatchTime": false,

  // [Optional] Configuration options for which column new result panes should open in
  "mssql.splitPaneSelection": "next",

  // [Optional] Log level for backend services. Azure Data Studio generates a file name every time it starts and if the file already exists the logs entries are appended to that file. For cleanup of old log files see logRetentionMinutes and logFilesRemovalLimit settings. The default tracingLevel does not log much. Changing verbosity could lead to extensive logging and disk space requirements for the logs. Error includes Critical, Warning includes Error, Information includes Warning and Verbose includes Information
  "mssql.tracingLevel": "Critical"

},
{
  // List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
  "python.autoComplete.extraPaths": [],

  // Path to the conda executable to use for activation (version 4.4+).
  "python.condaPath": "",

  // Path to default Python to use when extension loads up for the first time, no longer used once an interpreter is selected for the workspace. See https://aka.ms/AAfekmf to understand when this is used
  "python.defaultInterpreterPath": "python",

  // Enable source map support for meaningful stack traces in error logs.
  "python.diagnostics.sourceMapsEnabled": false,

  // Absolute path to a file containing environment variable definitions.
  "python.envFile": "${workspaceFolder}/.env",

  // Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.
  "python.experiments.enabled": true,

  // List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
  "python.experiments.optInto": [],

  // List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
  "python.experiments.optOutFrom": [],

  // Arguments passed in. Each argument is a separate item in the array.
  "python.formatting.autopep8Args": [],

  // Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
  "python.formatting.autopep8Path": "autopep8",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.formatting.blackArgs": [],

  // Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
  "python.formatting.blackPath": "black",

  // Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
  "python.formatting.provider": "autopep8",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.formatting.yapfArgs": [],

  // Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
  "python.formatting.yapfPath": "yapf",

  // Whether to install Python modules globally when not using an environment.
  "python.globalModuleInstallation": false,

  // Controls when to display information of selected interpreter in the status bar.
  //  - never: Never display information.
  //  - onPythonRelated: Only display information if Python-related files are opened.
  //  - always: Always display information.
  "python.interpreter.infoVisibility": "onPythonRelated",

  // Defines type of the language server.
  //  - Default: Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.
  //  - Jedi: Use Jedi behind the Language Server Protocol (LSP) as a language server.
  //  - Pylance: Use Pylance as a language server.
  //  - None: Disable language server capabilities.
  "python.languageServer": "Default",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.banditArgs": [],

  // Whether to lint Python files using bandit.
  "python.linting.banditEnabled": false,

  // Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.
  "python.linting.banditPath": "bandit",

  // Optional working directory for linters.
  "python.linting.cwd": null,

  // Whether to lint Python files.
  "python.linting.enabled": true,

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.flake8Args": [],

  // Severity of Flake8 message type 'E'.
  "python.linting.flake8CategorySeverity.E": "Error",

  // Severity of Flake8 message type 'F'.
  "python.linting.flake8CategorySeverity.F": "Error",

  // Severity of Flake8 message type 'W'.
  "python.linting.flake8CategorySeverity.W": "Warning",

  // Whether to lint Python files using flake8.
  "python.linting.flake8Enabled": false,

  // Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
  "python.linting.flake8Path": "flake8",

  // Patterns used to exclude files or folders from being linted.
  "python.linting.ignorePatterns": [
    "**/site-packages/**/*.py",
    ".vscode/*.py"
  ],

  // Whether to lint Python files when saved.
  "python.linting.lintOnSave": true,

  // Controls the maximum number of problems produced by the server.
  "python.linting.maxNumberOfProblems": 100,

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.mypyArgs": [
    "--follow-imports=silent",
    "--ignore-missing-imports",
    "--show-column-numbers",
    "--no-pretty"
  ],

  // Severity of Mypy message type 'Error'.
  "python.linting.mypyCategorySeverity.error": "Error",

  // %python.linting.mypyCategorySeverity.note.description%.
  "python.linting.mypyCategorySeverity.note": "Information",

  // Whether to lint Python files using mypy.
  "python.linting.mypyEnabled": false,

  // Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
  "python.linting.mypyPath": "mypy",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.prospectorArgs": [],

  // Whether to lint Python files using prospector.
  "python.linting.prospectorEnabled": false,

  // Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
  "python.linting.prospectorPath": "prospector",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.pycodestyleArgs": [],

  // Severity of pycodestyle message type 'E'.
  "python.linting.pycodestyleCategorySeverity.E": "Error",

  // Severity of pycodestyle message type 'W'.
  "python.linting.pycodestyleCategorySeverity.W": "Warning",

  // Whether to lint Python files using pycodestyle.
  "python.linting.pycodestyleEnabled": false,

  // Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.
  "python.linting.pycodestylePath": "pycodestyle",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.pydocstyleArgs": [],

  // Whether to lint Python files using pydocstyle.
  "python.linting.pydocstyleEnabled": false,

  // Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
  "python.linting.pydocstylePath": "pydocstyle",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.pylamaArgs": [],

  // Whether to lint Python files using pylama.
  "python.linting.pylamaEnabled": false,

  // Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
  "python.linting.pylamaPath": "pylama",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.linting.pylintArgs": [],

  // Severity of Pylint message type 'Convention/C'.
  "python.linting.pylintCategorySeverity.convention": "Information",

  // Severity of Pylint message type 'Error/E'.
  "python.linting.pylintCategorySeverity.error": "Error",

  // Severity of Pylint message type 'Error/F'.
  "python.linting.pylintCategorySeverity.fatal": "Error",

  // Severity of Pylint message type 'Refactor/R'.
  "python.linting.pylintCategorySeverity.refactor": "Hint",

  // Severity of Pylint message type 'Warning/W'.
  "python.linting.pylintCategorySeverity.warning": "Warning",

  // Whether to lint Python files using pylint.
  "python.linting.pylintEnabled": false,

  // Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
  "python.linting.pylintPath": "pylint",

  // The logging level the extension logs at, defaults to 'error'
  "python.logging.level": "error",

  // Path to the pipenv executable to use for activation.
  "python.pipenvPath": "pipenv",

  // Path to the poetry executable.
  "python.poetryPath": "poetry",

  // Determines if Pylance's experimental LSP notebooks support is used or not.
  "python.pylanceLspNotebooksEnabled": true,

  // Arguments passed in. Each argument is a separate item in the array.
  "python.sortImports.args": [],

  // Path to isort script, default using inner version
  "python.sortImports.path": "",

  // Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.
  "python.tensorBoard.logDirectory": "",

  // Activate Python Environment in the current Terminal on load of the Extension.
  "python.terminal.activateEnvInCurrentTerminal": false,

  // Activate Python Environment in Terminal created using the Extension.
  "python.terminal.activateEnvironment": true,

  // When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
  "python.terminal.executeInFileDir": false,

  // When launching a python process, whether to focus on the terminal.
  "python.terminal.focusAfterLaunch": false,

  // Python launch arguments to use when executing a file in the terminal.
  "python.terminal.launchArgs": [],

  // Enable auto run test discovery when saving a test file.
  "python.testing.autoTestDiscoverOnSaveEnabled": true,

  // Optional working directory for tests.
  "python.testing.cwd": null,

  // Port number used for debugging of tests.
  "python.testing.debugPort": 3000,

  // Prompt to configure a test framework if potential tests directories are discovered.
  "python.testing.promptToConfigure": true,

  // Arguments passed in. Each argument is a separate item in the array.
  "python.testing.pytestArgs": [],

  // Enable testing using pytest.
  "python.testing.pytestEnabled": false,

  // Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
  "python.testing.pytestPath": "pytest",

  // Arguments passed in. Each argument is a separate item in the array.
  "python.testing.unittestArgs": [
    "-v",
    "-s",
    ".",
    "-p",
    "*test*.py"
  ],

  // Enable testing using unittest.
  "python.testing.unittestEnabled": false,

  // Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
  "python.venvFolders": [],

  // Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
  "python.venvPath": ""

},
{
  // Offer auto-import completions.
  "python.analysis.autoImportCompletions": true,

  // Automatically add common search paths like 'src'.
  "python.analysis.autoSearchPaths": true,

  // Add parentheses to function completions.
  "python.analysis.completeFunctionParens": false,

  // Analysis mode for diagnostics.
  //  - openFilesOnly: Analyzes and reports errors on only open files.
  //  - workspace: Analyzes and reports errors on all files in the workspace.
  "python.analysis.diagnosticMode": "openFilesOnly",

  // Allows a user to override the severity levels for individual diagnostics.
  "python.analysis.diagnosticSeverityOverrides": {},

  // Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories.
  "python.analysis.exclude": [],

  // Allow using '.', '(' as commit characters when applicable.
  "python.analysis.extraCommitChars": true,

  // Additional import search resolution paths
  "python.analysis.extraPaths": [],

  // Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no value is provided, the value of python.linting.ignorePatterns (if set) will be used.
  "python.analysis.ignore": [],

  // Defines the default format for import module.
  //  - absolute: Use absolute import format when creating new import statement.
  //  - relative: Use relative import format when creating new import statement.
  "python.analysis.importFormat": "absolute",

  // Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).
  "python.analysis.include": [],

  // Index installed third party libraries and user files for language features such as auto-import, add import, workspace symbols and etc.
  "python.analysis.indexing": true,

  // Enable/disable inlay hints for function return types:
  // ```python
  // def foo(x:int) ' -> int ':
  // 	return x
  // ```
  //
  "python.analysis.inlayHints.functionReturnTypes": false,

  // Enable/disable inlay hints for variable types:
  // ```python
  // foo ' :list[str] ' = ["a"]
  //
  // ```
  //
  "python.analysis.inlayHints.variableTypes": false,

  // Specifies the level of logging for the Output panel
  "python.analysis.logLevel": "Information",

  // Path to directory containing custom type stub files.
  "python.analysis.stubPath": "typings",

  // Defines the default rule set for type checking.
  //  - off: Surfaces diagnostics for invalid syntax, unresolved imports, undefined variables.
  //  - basic: All "off" rules + basic type checking rules.
  //  - strict: All "off" rules + all type checking rules.
  "python.analysis.typeCheckingMode": "off",

  // Paths to look for typeshed modules.
  "python.analysis.typeshedPaths": [],

  // Use library implementations to extract type information when type stub is not present.
  "python.analysis.useLibraryCodeForTypes": true

},
{
  // After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.
  "jupyter.addGotoCodeLenses": true,

  // This setting is deprecated and will be removed in the next release.
  // Allows a user to import a jupyter notebook into a python file anytime one is opened.
  "jupyter.allowImportFromNotebook": true,

  // This setting is deprecated and will be removed in the next release.
  // Allow the inputting of python code directly into the Interactive window
  "jupyter.allowInput": true,

  // This setting is deprecated as Live Share support for the interactive window no longer exists in the Jupyter Extension.
  // Allow the Interactive window to be shared during a Live Share session
  "jupyter.allowLiveShare": true,

  // Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.
  "jupyter.allowUnauthorizedRemoteConnection": false,

  // This setting is obsolete. Use the 'interactiveWindow.alwaysScrollOnNewCell' setting instead.
  // Automatically scroll the interactive window to show the output of the last statement executed. If false, the interactive window will only automatically scroll if the bottom of the prior cell is visible.
  "jupyter.alwaysScrollOnNewCell": false,

  // Warn the user before restarting a kernel.
  "jupyter.askForKernelRestart": true,

  // Warn the user before trying to open really large data frames.
  "jupyter.askForLargeDataFrames": true,

  // Set of commands to put as code lens above a cell.
  "jupyter.codeLenses": "jupyter.runcell, jupyter.runallcellsabove, jupyter.debugcell",

  // Regular expression used to identify code cells. All code until the next match is considered part of this cell.
  "jupyter.codeRegularExpression": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",

  // This setting has been deprecated, please use `interactiveWindow.collapseCellInputCode` instead.
  // Collapse cell input code by default.
  "jupyter.collapseCellInputCodeByDefault": true,

  // This setting is deprecated and will be removed in an upcoming release.
  // Whether or not to use the theme's peek color as the background for the input box.
  "jupyter.colorizeInputBox": true,

  // Set of debug commands to put as code lens above a cell while debugging.
  "jupyter.debugCodeLenses": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",

  // When debugging, debug just my code.
  "jupyter.debugJustMyCode": true,

  // Path to debugpy bits for debugging cells.
  "jupyter.debugpyDistPath": "",

  // Draw a highlight behind the currently active cell.
  "jupyter.decorateCells": true,

  // Cell marker used for delineating a cell in a python file.
  "jupyter.defaultCellMarker": "# %%",

  // When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.
  "jupyter.disableJupyterAutoStart": false,

  // Enables moving to the next cell when clicking on a 'Run Cell' code lens.
  "jupyter.enableAutoMoveToNextCell": true,

  // Enables code lens for 'cells' in a python file.
  "jupyter.enableCellCodeLens": true,

  // Enables Jedi support for extended IntelliSense completions in running Jupyter kernels (see this [setting](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi)). This can greatly impact notebook cell execution performance. Use with caution.
  "jupyter.enableExtendedKernelCompletions": false,

  // This setting has been deprecated as Jupyter keyboard shortcuts have been moved into the ms-toolsai.jupyter-keymap extension. If you would like to disable Jupyter keyboard shortcuts, please uninstall or disable that extension instead.
  // Enables Jupyter style keyboard shortcuts for Notebooks.
  "jupyter.enableKeyboardShortcuts": true,

  // This setting is deprecated and will be removed in the next release.
  // Enables scrolling for large cell outputs in the Notebook Editor. This setting does not apply to the Interactive Window.
  "jupyter.enableScrollingForCellOutputs": true,

  // Add PYTHONNOUSERSITE to kernels before starting. This prevents global/user site-packages from being used in the PYTHONPATH of the kernel.
  "jupyter.excludeUserSitePackages": false,

  // Enables/disables A/B tests.
  "jupyter.experiments.enabled": true,

  // List of experiment to opt into. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
  "jupyter.experiments.optInto": [],

  // List of experiment to opt out of. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
  "jupyter.experiments.optOutFrom": [],

  // Enable exporting a python file into a jupyter notebook and run all cells when doing so.
  "jupyter.exportWithOutputEnabled": false,

  // Generate SVG output for notebook plots. This allows for better display in the plot viewer at the cost of generation speed and file size.
  "jupyter.generateSVGPlots": false,

  // This setting is deprecated and will be removed in the next release.
  // Don't use the VS Code theme in the Interactive window (requires reload of VS Code). This forces the Interactive window to use 'Light +(default light)' and disables matplotlib defaults.
  "jupyter.ignoreVscodeTheme": false,

  // Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.
  "jupyter.interactiveWindowMode": "multiple",

  // When a Notebook Editor or Interactive Window Jupyter server is started, these arguments will be passed to it. By default this list is generated by the Jupyter Extension.
  "jupyter.jupyterCommandLineArguments": [],

  // Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
  "jupyter.jupyterInterruptTimeout": 10000,

  // Number of times to attempt to connect to the Jupyter Notebook
  "jupyter.jupyterLaunchRetries": 3,

  // Amount of time (in ms) to wait for the Jupyter Notebook server to start.
  "jupyter.jupyterLaunchTimeout": 60000,

  // List of Jupyter Kernels and/or Python environments that are to be excluded from the Kernel picker.
  "jupyter.kernels.filter": [],

  // This setting is deprecated and will be removed in the next release.
  // Amount of time to wait for guest connections to verify they have the Python Extension installed.
  "jupyter.liveShareConnectionTimeout": 1000,

  // The logging level the extension logs at.
  "jupyter.logging.level": "debug",

  // Creates separate output panels for kernels/jupyter server console output
  "jupyter.logKernelOutputSeparately": false,

  // Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.
  "jupyter.magicCommandsAsComments": false,

  // Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown.
  "jupyter.markdownRegularExpression": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",

  // This setting is deprecated and will be removed in the next release.
  // Maximum size (in pixels) of text output in the Notebook Editor before a scrollbar appears. First enable scrolling for cell outputs in settings.
  "jupyter.maxOutputSize": 400,

  // Append a new empty cell to an interactive window file on running the currently last cell.
  "jupyter.newCellOnRunLast": true,

  // Set the root directory for running notebooks and the Interactive window.
  "jupyter.notebookFileRoot": "${fileDirname}",

  // Determines if Pylance manages notebook concat doc creation.
  "jupyter.pylanceHandlesNotebooks": true,

  // Characters which trigger auto completion on a python jupyter kernel.
  "jupyter.pythonCompletionTriggerCharacters": ".%'\"",

  // The method to use when exporting a notebook to a Python file. 'direct' will copy over the code directly as is. 'commentMagics' will comment out lines starting with line magics (%), cell magics (%%), and shell commands(!). 'nbconvert' will install nbconvert and use that for the conversion which can translate iPython syntax into Python syntax.
  "jupyter.pythonExportMethod": "direct",

  // When debugging a cell, open this port on the remote box. If -1 is specified, a random port between 8889 and 9000 will be attempted.
  "jupyter.remoteDebuggerPort": -1,

  // A series of Python instructions or iPython magic commands. Can be either an array of strings or a single string with commands separated by '\n'. Commands will be silently executed whenever the interactive window loads. For instance, set this to '%load_ext autoreload\n%autoreload 2' to automatically reload changes made to imported files without having to restart the interactive session.
  "jupyter.runStartupCommands": "",

  // This setting is deprecated and will be removed in the next release.
  // Search all installed Python interpreters for a Jupyter installation when starting the Interactive window
  "jupyter.searchForJupyter": true,

  // When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.
  "jupyter.sendSelectionToInteractiveWindow": false,

  // This setting is deprecated and will be removed in the next release.
  // Show cell input code.
  "jupyter.showCellInputCode": true,

  // Show only one type of kernel in the kernel picker. This prevents local kernels and remote kernels from being shown at the same time in the kernel picker.
  "jupyter.showOnlyOneTypeOfKernel": "true",

  // Show the Outline button in the Jupyter notebook toolbar.
  "jupyter.showOutlineButtonInNotebookToolbar": true,

  // Bring up the Variable View when starting a Run by Line session.
  "jupyter.showVariableViewWhenDebugging": true,

  // Stop running cells if a cell throws an exception.
  "jupyter.stopOnError": true,

  // When debugging a cell, stop on the first line.
  "jupyter.stopOnFirstLineWhileDebugging": true,

  // This setting is deprecated in favor of `notebook.output.textLineLimit`. This setting will be removed in an upcoming release.
  // Limit the amount of text in Interactive cell text output to this value. 0 to allow any amount of characters.
  "jupyter.textOutputLimit": 20000,

  // In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.
  "jupyter.themeMatplotlibPlots": false,

  // When running Jupyter locally, create a default empty Jupyter config for the Interactive window
  "jupyter.useDefaultConfigForJupyter": true,

  // Types to exclude from showing in the Interactive variable explorer
  "jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type",

  // Language to query mapping for returning the list of active variables in a Jupyter kernel. Used by the Variable Explorer in both the Interactive Window and Notebooks. Example:
  // ```
  // [
  //   {
  //     "language": "python",
  //     "query": "%who_ls",
  //     "parseExpr": "'(\\w+)'"
  //   }
  // ]
  // ```
  "jupyter.variableQueries": [],

  // Defines the location and order of the sources where scripts files for Widgets are downloaded from (e.g. ipywidgest, bqplot, beakerx, ipyleaflet, etc). Not selecting any of these could result in widgets not rendering or function correctly. See [here](https://aka.ms/PVSCIPyWidgets) for more information. Once updated you will need to restart the Kernel.
  //  - jsdelivr.com: Loads widget (javascript) scripts from https://www.jsdelivr.com/
  //  - unpkg.com: Loads widget (javascript) scripts from https://unpkg.com/
  "jupyter.widgetScriptSources": []

},
{
  // Enables various accessibility features, such as audio cues about what is happening in the session.
  "liveshare.accessibility.accessibilityFeaturesEnabled": false,

  // Output device to play audio in accessibility mode.
  "liveshare.accessibility.outputDevice": "Default",

  // Enables sound effects about activity.
  "liveshare.accessibility.soundsEnabled": true,

  // Controls the volume of sound audio in accessibility mode (between 0 and 100).
  "liveshare.accessibility.soundVolume": 100,

  // Controls the rate of speech in accessibility mode.
  "liveshare.accessibility.speechRate": 2,

  // The voice used for speech in accessibility mode.
  "liveshare.accessibility.voice": "en-US-Jenny",

  // Enables spoken announcements about activity.
  "liveshare.accessibility.voiceEnabled": true,

  // Controls the volume of voice audio in accessibility mode (between 0 and 100).
  "liveshare.accessibility.voiceVolume": 100,

  // Allow guests to start and stop debugging sessions.
  "liveshare.allowGuestDebugControl": false,

  // Allow guests to run and terminate workspace tasks.
  "liveshare.allowGuestTaskControl": false,

  // Specifies who to allow session invitations from.
  "liveshare.allowInvites": "contacts",

  // Ensures that the session's host is always followed.
  "liveshare.alwaysFollowHost": false,

  // Controls how to handle join requests from anonymous guests.
  "liveshare.anonymousGuestApproval": "prompt",

  // Controls whether web servers are automatically shared, when started from the integrated terminal or well-known extensions.
  "liveshare.autoShareServers": true,

  // Controls whether terminals are automatically shared with guests (read-only).
  "liveshare.autoShareTerminals": true,

  // Controls whether to show the CodeLens for starting a collaboration session.
  "liveshare.codeLens": true,

  // Controls whether to allow comments in collaboration sessions
  "liveshare.comments": true,

  // Type of connection used for collaboration; the default (auto) mode prefers a direct connection, but may fallback to a cloud relay if the direct connection failed.
  "liveshare.connectionMode": "auto",

  // Enables the Visual Studio Live Share output channel.
  "liveshare.diagnosticLogging": false,

  // Specifies the level of logging output from Visual Studio Live Share Extension
  "liveshare.diagnosticLoggingLevel": "Warning",

  // Enables diagnostic notifications and logs.
  "liveshare.diagnosticMode": false,

  // Controls set of active features. By selecting `insiders`, you agree to the [Pre-Release Software License Terms](https://aka.ms/vsls-license-preview) and [Privacy Statement](https://aka.ms/vsls-privacy).
  "liveshare.featureSet": "stable",

  // Specifies how to respond to focus requests from other participants.
  "liveshare.focusBehavior": "accept",

  // Controls whether the host needs to explicitly approve guest requests to join collaboration sessions.
  "liveshare.guestApprovalRequired": false,

  // Increases the guest limit from 5 to 30.
  "liveshare.increasedGuestLimit": true,

  // Controls how the participant will join incoming shared debug sessions.
  "liveshare.joinDebugSessionOption": "Automatic",

  // Sets the number of seconds to wait before sending keep-alive messages in an idle session, used to detect abnormal network disconnection. Set to -1 to disable sending keep-alive messages.
  "liveshare.keepAliveInterval": 20,

  // Allow guests to run arbitrary commands via Code Actions (“Quick Fixes”) and CodeLens
  "liveshare.languages.allowGuestCommandControl": false,

  // Specifies the client to launch when clicking on a Live Share URL.
  "liveshare.launcherClient": "web",

  // Controls when to display a participant's name tag instead of just their cursor.
  "liveshare.nameTagVisibility": "Activity",

  // Allow guests to run notebook cells
  "liveshare.notebooks.allowGuestExecuteCells": false,

  // Controls whether to automatically open shared servers in your default browser.
  "liveshare.openSharedServers": true,

  // Specifies when to automatically populate your Git commit message with guest attribution (using the Git-co-author trailer).
  "liveshare.populateGitCoAuthors": "always",

  // Controls whether to publish your presence to other users, and allow in-tool invites for collaboration sessions
  "liveshare.presence": false,

  // Controls whether to publish your current workspace folder to other users
  "liveshare.publishWorkspaceInfo": false,

  // Height of shared terminal window, characters.
  "liveshare.sharedTerminalHeight": 50,

  // Width of shared terminal window, characters.
  "liveshare.sharedTerminalWidth": 120,

  // Automatically share external files opened by the host during a collaboration session.
  "liveshare.shareExternalFiles": true,

  // Show or hide the Live Share status bar items.
  "liveshare.showInStatusBar": "always",

  // Controls visibility of the cursor and highlights for read-only users.
  "liveshare.showReadOnlyUsersInEditor": "whileFollowing",

  // Controls whether to show verbose notifications, such as when a guest joins and leaves a session.
  "liveshare.showVerboseNotifications": true

},
{
  // Controls how to respond when an audio call is started.
  "liveshare.audio.joinCallBehavior": "prompt",

  // Controls whether to automatically start an audio call whenever you share.
  "liveshare.audio.startCallOnShare": false

},
{
  // Name(s) of the connection(s) to auto connect on start.
  "sqltools.autoConnectTo": [],

  // Auto open session file when connecting.
  "sqltools.autoOpenSessionFiles": true,

  // Languages that SQLTools will add CodeLenses to.
  //
  // You can use any language identifier, including those listed at https://code.visualstudio.com/docs/languages/identifiers.
  //
  // More info about codelens, see https://vscode-sqltools.mteixeira.dev/features/codelens
  "sqltools.codelensLanguages": [
    "sql"
  ],

  // Languages with SQL completion enabled.
  //
  // You can use any language identifier, including those listed at https://code.visualstudio.com/docs/languages/identifiers.
  "sqltools.completionLanguages": [
    "sql"
  ],

  // Display connections in two groups, 'Connected' and 'Not Connected'.
  "sqltools.connectionExplorer.groupConnected": false,

  // Connections list.
  "sqltools.connections": [],

  // Default mode for results Export command.
  "sqltools.defaultExportType": "prompt",

  // Default mode for results Open command.
  "sqltools.defaultOpenType": "prompt",

  // Dependency Manager settings.
  "sqltools.dependencyManager": {
    "packageManager": "npm",
    "installArgs": [
      "install"
    ],
    "runScriptArgs": [
      "run"
    ],
    "autoAccept": false
  },

  // SQLTools' default chord keybindings begin with `Ctrl/Cmd+E` and therefore mask the default keybinding of VS Code's `Go to File...` command. When this setting is disabled (the default) you can instead invoke that command with the chord `Ctrl/Cmd+E Ctrl/Cmd+E`. Enable this setting if you don't require SQLTools' chord keybindings.
  "sqltools.disableChordKeybindings": false,

  // Disable new release notifications.
  "sqltools.disableReleaseNotifications": false,

  // Flatten groups that have only one child.
  "sqltools.flattenGroupsIfOne": false,

  //
  "sqltools.format": {},

  // Languages with SQL formatting enabled.
  //
  // You can use any language identifier, including those listed at https://code.visualstudio.com/docs/languages/identifiers.
  "sqltools.formatLanguages": [
    "sql"
  ],

  // Highlight the query at the cursor position.
  "sqltools.highlightQuery": true,

  // Number of queries to keep in History.
  "sqltools.historySize": 100,

  // Set environment variables to be passed to language server. For example `ORACLE_HOME`, `PATH`...
  "sqltools.languageServerEnv": {},

  // Enables query parameter checking.
  "sqltools.queryParams.enableReplace": false,

  // RegEx used to identify query parameters.
  "sqltools.queryParams.regex": "\\$[\\d]+|\\$\\[[\\d\\w]+\\]",

  // Properties that customize the appearance of results tables.
  "sqltools.results.customization": {},

  // Maximum number of records to return in results.
  "sqltools.results.limit": 50,

  // Define which edit group the results tab should appear in. Empty groups are never created. For example, if setting is 4 but only one group currently exists then the first set of results will create a new group 2, the second a group 3 and the third and subsequent sets of results will appear in group 4.
  //  - next: New group if nothing open. Second group if currently active text editor is in first group. Otherwise third group.
  //  - current: Current active group.
  //  - end: The third group.
  //  - 1: First group.
  //  - 2: Second group.
  //  - 3: Third group.
  //  - 4: Fourth group.
  //  - 5: Fifth group.
  //  - 6: Sixth group.
  //  - 7: Seventh group.
  //  - 8: Eighth group.
  //  - 9: Ninth group.
  "sqltools.results.location": "next",

  // How requests reuse results tabs.
  //  - never: Every request creates a new tab.
  //  - connection: There is a single tab for each connection.
  "sqltools.results.reuseTabs": "never",

  // Folder for session files to be saved in.
  "sqltools.sessionFilesFolder": "",

  // Toggle statusbar visibility.
  "sqltools.showStatusbar": true,

  // Sort columns criteria.
  "sqltools.sortColumns": "name",

  // Table columns should be expanded on load?
  "sqltools.tableTreeItemsExpanded": false,

  // Enable node runtime usage.
  "sqltools.useNodeRuntime": false

},
{
  // If enabled, other files in the workspace are searched when estimating types for a parameter. Disabling this will increase performance, but may reduce estimation accuracy.
  "workspace.searchEnabled": true,

  // The maximum number of files searched in a workspace search. Has no effect if workspace searching is disabled.
  "workspace.searchLimit": 10

},
{
  // If error color is disabled, indent colors will be rendered until the length of rendered characters (white spaces, tabs, and other ones) is divisible by tabsize. Turn on this option to render white spaces and tabs only.
  "indentRainbow.colorOnWhiteSpaceOnly": false,

  // An array with color (hex, rgba, rgb) strings which are used as colors, can be any length.
  "indentRainbow.colors": [
    "rgba(255,255,64,0.07)",
    "rgba(127,255,127,0.07)",
    "rgba(255,127,255,0.07)",
    "rgba(79,236,236,0.07)"
  ],

  // Indent color for when there is an error in the indentation, for example if you have your tabs set to 2 spaces but the indent is 3 spaces. Can be any type of web based color format (hex, rgba, rgb).
  "indentRainbow.errorColor": "rgba(128,32,32,0.6)",

  // For which languages indent-rainbow should be deactivated. When left empty will ignore.
  "indentRainbow.excludedLanguages": [
    "plaintext"
  ],

  // For which languages indent-rainbow should skip indent error detection (use '*' to deactivate errors for all languages).
  "indentRainbow.ignoreErrorLanguages": [
    "markdown"
  ],

  // Skip error highlighting for RegEx patterns. Defaults to c/cpp decorated block and full line comments.
  "indentRainbow.ignoreLinePatterns": [
    "/[ \t]* [*]/g",
    "/[ \t]+[/]{2}/g"
  ],

  // For which languages indent-rainbow should be activated. When empty will use for all languages.
  "indentRainbow.includedLanguages": [],

  // Automatically change indent settings for languages (see README.md for details).
  "indentRainbow.indentSetter": {},

  // Classic mode uses a full colored tab to indicate the indendation. Light mode will only display a colored border similar to the default indent guide lines. You can disable the default indicators with `editor.guides.indentation`.
  "indentRainbow.indicatorStyle": "classic",

  // This property defines the indent indicator lineWidth when using light mode.
  "indentRainbow.lightIndicatorStyleLineWidth": 1,

  // Indent color for when there is a mix between spaces and tabs in the indentation. Can be any type of web based color format (hex, rgba, rgb) or a empty string(to be disabled this coloring).
  "indentRainbow.tabmixColor": "rgba(128,32,96,0.6)",

  // The delay in ms until the editor gets updated.
  "indentRainbow.updateDelay": 100

},
{
  // When docthis.includeAuthorTag is enabled, will add @author tag with this value.
  "docthis.authorName": "(Set the text for this tag by adding docthis.authorName to your settings file.)",

  // Select date format. Defaults to dd-mm-yyyy
  "docthis.dateTagFormat": "dd/mm/yyyy",

  // When enabled, hungarian notation will be used as a type hint.
  "docthis.enableHungarianNotationEvaluation": false,

  // When enabled, will add the @author tag.
  "docthis.includeAuthorTag": false,

  // When enabled, will add the @date tag in dd-mm-yyyy
  "docthis.includeDateTag": false,

  // When enabled, JSDoc comments for functions and methods will include @description.
  "docthis.includeDescriptionTag": false,

  // When enabled, memberOf information is added to comment tags on class members.
  "docthis.includeMemberOfOnClassMembers": true,

  // When enabled, memberOf information is added to comment tags on interface members.
  "docthis.includeMemberOfOnInterfaceMembers": true,

  // When enabled, type information is added to comment tags.
  "docthis.includeTypes": true,

  // When enabled, will use names of params & methods as type hints.
  "docthis.inferTypesFromNames": false,

  // When enabled, comments that only have one line, will be displayed in one line instead of three.
  "docthis.inlineOneLiners": true,

  // Put @returns in place of @returns
  "docthis.returnsTag": false

},
{
  // Set paths to .scss files. Imports are automatically handled. When no paths are set, all .scss files in the workspace will be included.
  "htmlScss.globalStyles": null,

  // When set to true, the extension looks for .scss file relative to the currently opened html file with the same name.
  "htmlScss.isAngularProject": true

},
{
  // List of @babel/parser plugins to use, see: https://babeljs.io/docs/en/babel-parser#plugins
  "vscodeReactRefactor.babelPlugins": "objectRestSpread, classProperties, typescript, jsx",

  // Display parser error messages
  "vscodeReactRefactor.enableDebug": false,

  // The created React Functional Component will be
  "vscodeReactRefactor.functionType": "function"

},
{
  // Controls the enablement.
  "cssPeek.enable": true,

  // A list of vscode language names where the extension should be used.
  "cssPeek.peekFromLanguages": [
    "html",
    "django-html",
    "laravel-blade",
    "razor",
    "vue",
    "blade",
    "pug",
    "jade",
    "handlebars",
    "php",
    "twig",
    "md",
    "nunjucks",
    "javascript",
    "javascriptreact",
    "erb",
    "typescript",
    "typescriptreact",
    "HTML (Eex)",
    "html-eex",
    "ejs"
  ],

  // A list of file globs that filters out peekable files
  "cssPeek.peekToExclude": [
    "**/node_modules/**",
    "**/bower_components/**"
  ],

  // Enable Peeking from HTML tags in addition to classnames and IDs. React components are ignored, but it's a good idea to disable this feature when using Angular
  "cssPeek.supportTags": true,

  // Traces the communication between VSCode and the language server.
  "cssPeek.trace.server": "off"

},
{
  // Creates .geojson data file for topojson, kml, gpx, fgb and shapefiles
  "geo.data.viewer.create.geojson": true,

  // Default Map Style
  "geo.data.viewer.map.style": "dark",

  // Map View UI Controls Theme
  "geo.data.viewer.theme": "dark"

},
{
  // Automatically add vendor prefixes to unsupported CSS properties (e. g. transform -> -ms-transform). Specify what browsers to target with an array of strings (uses [Browserslist](https://github.com/ai/browserslist)). Pass `null` to turn off.
  // Default is `null`
  "liveSassCompile.settings.autoprefix": [
    "> 1%",
    "last 2 versions"
  ],

  // All Sass/Scss files inside the folders will be excluded.
  //
  // Examples:
  // '**/node_modules/**',
  // '.vscode/**',
  // '.history/**'
  //
  // Glob Patterns are accepted.
  "liveSassCompile.settings.excludeList": [
    "**/node_modules/**",
    ".vscode/**"
  ],

  // Set your exported CSS Styles, Formats & save location.
  "liveSassCompile.settings.formats": [
    {
      "format": "expanded",
      "extensionName": ".css",
      "savePath": null
    }
  ],

  // Set it as `false` if you don't want `.map` file for compiled CSS.
  // Default is `true`
  "liveSassCompile.settings.generateMap": true,

  // This setting is useful when you deals with only few of sass files. Only mentioned Sass files will be included.
  // NOTE: No need to include partial sass files.
  "liveSassCompile.settings.includeItems": null,

  // Set this to `false` if you do not want the output window to show.
  // Note: You can use the command palette to open the Live Sass output window.
  // Default is `true`
  "liveSassCompile.settings.showOutputWindow": true

},
{
  // Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
  //
  //  Examples :
  // chrome --incognito --headless --remote-debugging-port=9222
  //  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
  "liveServer.settings.AdvanceCustomBrowserCmdLine": null,

  // Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
  //  NOTE: You have to install 'Debugger for Chrome'
  // If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging.
  //
  //  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
  "liveServer.settings.ChromeDebuggingAttachment": false,

  // Specify custom browser settings for Live Server.
  // By Default it will open your default favorite browser.
  "liveServer.settings.CustomBrowser": null,

  // To disable information pop up messages.
  "liveServer.settings.donotShowInfoMsg": false,

  // To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
  "liveServer.settings.donotVerifyTags": false,

  // When set, serve this file (server root relative) for every 404 (useful for single-page applications)
  "liveServer.settings.file": "",

  // By Default Live Server inject CSS changes without full reloading of browser. You can change this behavior by making this setting as `true`
  "liveServer.settings.fullReload": false,

  // To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
  "liveServer.settings.host": "127.0.0.1",

  // Setup https configuration
  "liveServer.settings.https": {
    "enable": false,
    "cert": "",
    "key": "",
    "passphrase": ""
  },

  // To ignore specific file changes
  "liveServer.settings.ignoreFiles": [
    ".vscode/**",
    "**/*.scss",
    "**/*.sass",
    "**/*.ts"
  ],

  // Mount a directory to a route. Such as [['/components', './node_modules']]
  "liveServer.settings.mount": [],

  // This the entry point of server when you're in multiroot workspace
  "liveServer.settings.multiRootWorkspaceName": null,

  // If it is true live server will start without browser opened.
  "liveServer.settings.NoBrowser": false,

  // Set Custom Port Number of Live Server. Set 0 if you want random port.
  "liveServer.settings.port": 5500,

  // To Setup Proxy
  "liveServer.settings.proxy": {
    "enable": false,
    "baseUri": "/",
    "proxyUri": "http://127.0.0.1:80"
  },

  // Set Custom root of Live Server.
  // To change root the the server to sub folder of workspace, use '/' and relative path from workspace.
  // Example: /subfolder1/subfolder2
  "liveServer.settings.root": "/",

  // Change this to false if you don't want the button to show in the statusbar
  "liveServer.settings.showOnStatusbar": true,

  // Use local IP as host
  "liveServer.settings.useLocalIp": false,

  // You have to install a browser extension. That will be works for your dynamic pages (like PHP).
  "liveServer.settings.useWebExt": false,

  // Delay before live reloading. Value in milliseconds. Default is 100
  "liveServer.settings.wait": 100

},
{
  // Enable debug messages
  "djangointellisense.debugMessages": false,

  // Django project root directory
  "djangointellisense.projectRoot": "",

  // settings module path (Example: `projectname.settings`)
  "djangointellisense.settingsModule": ""

},
{
  // Defines scopes for extension to work with.
  // multi-root: all selectors found within all root folders will be visible to all stylesheets.
  // workspace: all selectors found within particular workspace folder/project will be visible to stylesheets within that workspace folder.
  // linked files: selectors will be provided only for linked stylesheets.
  // Default: "multi-root"
  "html-to-css-autocompletion.autocompletionFilesScope": "multi-root",

  // Set custom glob pattern to exclude search on pattern matches. E.g.: **/{folderName1,folderName2,...}/**
  "html-to-css-autocompletion.excludePattern": "",

  // Defines folder names to be excluded from being searched. Default: ["node_modules"]
  "html-to-css-autocompletion.folderNamesToBeExcluded": [
    "node_modules"
  ],

  // Defines only specific folder names to be searched. Default: [""]
  "html-to-css-autocompletion.folderNamesToBeIncluded": [
    ""
  ],

  // Defines file types to be searched for classes/ids.
  // Defaults: ["html", "php"]
  "html-to-css-autocompletion.getSelectorsFromFileTypes": [
    "html",
    "php"
  ],

  // Set custom glob pattern to get classes/ids from matched files. E.g.: **/{folderName1,folderName2,...}/*.{fileType1,fileType2,...}
  "html-to-css-autocompletion.includePattern": "",

  // Set true to populate Intellisense with selectors only when '#' or '.' characters are typed. Default: false
  "html-to-css-autocompletion.triggerCharacters": false

},
{
  // Defines what characters will be used as comment line limiters for special languages. It also overrides the default preset.
  "comment-divider.languagesMap": {},

  // Set line length for all dividers.
  "comment-divider.length": 80,

  // Set symbol for solid line filling.
  "comment-divider.lineFiller": "-",

  // Set main header text align.
  "comment-divider.mainHeaderAlign": "center",

  // Set symbol for main header line filling (only one).
  "comment-divider.mainHeaderFiller": "-",

  // Set main header vertical style.
  "comment-divider.mainHeaderHeight": "block",

  // Set main header text transform style.
  "comment-divider.mainHeaderTransform": "none",

  // Set whether the divider will be shrink consider indent size, or will be always fixed length.
  "comment-divider.shouldLengthIncludeIndent": false,

  // Set subheader text align.
  "comment-divider.subheaderAlign": "center",

  // Set symbol for subheader line filling (only one).
  "comment-divider.subheaderFiller": "-",

  // Set subheader vertical style.
  "comment-divider.subheaderHeight": "line",

  // Set subheader text transform style.
  "comment-divider.subheaderTransform": "none"

},
{
  // Glob of files to scan and watch. Defaults to [**/*.ts,**/*.tsx]
  "movets.filesToScan": [
    "**/*.ts",
    "**/*.tsx"
  ],

  // Make edits in vscode instead of saving the changes to disk.
  "movets.openEditors": false,

  // Create relative paths relative to the tsconfig.json
  "movets.relativeToTsconfig": false,

  // Removes index filename from imports
  "movets.removeIndexSuffix": true,

  // Skip the warning when using the move typescript command
  "movets.skipWarning": false

},
{
  // Options for the disable lint rule action in the quick fix menu.
  "stylelint.codeAction.disableRuleComment": {
    "location": "separateLine"
  },

  // A Stylelint configuration object.
  "stylelint.config": null,

  // A path to the directory that relative paths defining "extends" and "plugins" are relative to.
  "stylelint.configBasedir": "",

  // Path to a JSON, YAML, or JS file that contains your configuration object. Use this option if you don't want Stylelint to search for a configuration file.
  "stylelint.configFile": "",

  // An absolute path to a custom PostCSS-compatible syntax module.
  "stylelint.customSyntax": "",

  // Control whether Stylelint is enabled or not.
  "stylelint.enable": true,

  // Ignore `stylelint-disable` (e.g. `/* stylelint-disable block-no-empty */`) comments
  "stylelint.ignoreDisables": false,

  // The package manager you use to install node modules.
  "stylelint.packageManager": "npm",

  // Also report errors for `stylelint-disable` comments that used for rules that don't exist within the configuration object.
  "stylelint.reportInvalidScopeDisables": false,

  // Also report errors for `stylelint-disable` comments that are not blocking a lint warning.
  "stylelint.reportNeedlessDisables": false,

  // An array of language ids which snippets are provided by Stylelint.
  "stylelint.snippet": [
    "css",
    "less",
    "postcss"
  ],

  // Supply a custom path to the Stylelint module.
  "stylelint.stylelintPath": "",

  // An array of language ids which should be validated by Stylelint.
  "stylelint.validate": [
    "css",
    "less",
    "postcss"
  ]

},
{
  // Include parentheses around a sole arrow function parameter.
  //  - always: Always include parens. Example: (x) => x
  //  - avoid: Omit parens when possible. Example: x => x
  "prettier.arrowParens": "always",

  // List of languages IDs to ignore. Restart required.
  "prettier.disableLanguages": [],

  // Specify the end of line used by Prettier.
  //  - lf: Line Feed only (\n), common on Linux and macOS as well as inside git repos
  //  - crlf: Carriage Return + Line Feed characters (\r\n), common on Windows
  //  - cr: Carriage Return character only (\r), used very rarely
  //  - auto: Maintain existing line endings (mixed values within one file are normalised by looking at what's used after the first line)
  "prettier.endOfLine": "auto",

  // Specify the global whitespace sensitivity for HTML files.
  //  - css: Respect the default value of CSS 'display' property.
  //  - strict: Whitespaces are considered sensitive.
  //  - ignore: Whitespaces are considered insensitive.
  "prettier.htmlWhitespaceSensitivity": "css",

  // Path to a '.prettierignore' or similar file such as '.gitignore'. Files which match will not be formatted. Set to 'null' to not read ignore files. Restart required.
  "prettier.ignorePath": ".prettierignore",

  // Use single quotes instead of double quotes in JSX.
  "prettier.jsxSingleQuote": false,

  // By default, Prettier will wrap markdown text as-is since some services use a linebreak-sensitive renderer, e.g. GitHub comment and BitBucket. In some cases you may want to rely on editor/viewer soft wrapping instead, so this option allows you to opt out with 'never'.
  //  - preserve: Wrap prose as-is. First available in v1.9.0
  //  - always: Wrap prose if it exceeds the print width.
  //  - never: Do not wrap prose.
  "prettier.proseWrap": "preserve",

  // Change when properties in objects are quoted.
  //  - as-needed: Only add quotes around object properties where required.
  //  - consistent: If at least one property in an object requires quotes, quote all properties.
  //  - preserve: Respect the input use of quotes in object properties.
  "prettier.quoteProps": "as-needed",

  // Require a config file to format code.
  "prettier.requireConfig": false,

  // Use 'prettier-stylelint' to format CSS, SCSS and Less.
  "prettier.stylelintIntegration": false,

  // Use 'prettier-tslint' to format TypeScript.
  "prettier.tslintIntegration": false,

  // Whether or not to indent the code inside <script> and <style> tags in Vue files. Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.
  "prettier.vueIndentScriptAndStyle": false

},
{
  // Disable Tabnine when the file path contains a match of any of the provided regexes. For example, add "[.]js$" to disable Tabnine in JavaScript files.
  "tabnine.disableFileRegex": [],

  // Disable Tabnine when the current line contains a match of any of the provided regexes. For example, add "require" to disable Tabnine when the current line contains the word 'require'.
  "tabnine.disableLineRegex": [],

  // Experimental: Enable modules auto-import following applying Tabnine suggestions
  "tabnine.experimentalAutoImports": null,

  // Tabnine's log file (Visual Studio Code must be restarted for this setting to take effect)
  "tabnine.logFilePath": "",

  // Tabnine's log level (Visual Studio Code must be restarted for this setting to take effect)
  "tabnine.logLevel": "",

  // Receive Tabnine VSCode extention beta updates
  "tabnine.receiveBetaChannelUpdates": false

},
{
  // The linter to use
  "python.linter": "pyLint",

  // Controls the maximum number of problems produced by the server.
  "python.maxNumberOfProblems": 100

},
{
  // Path to rules file, relative to workspace or absolute. The name of the file needs to be .htmlvalidate.json. If not set the plugin will search form the current file to the root to find a .htmlvalidate.json file.
  "html-validate.rulesPath": null,

  // Run html-valide while you are editing a document. If set to false html-validate will only when a document is opened or saved.
  "html-validate.runOnEdit": true

},
{
  // Outdent lines even if one of them reached column 0 (gutter).
  "indentOneSpace.cramReversed": true,

  // Indent only when range is on either side has only whitespace characters and further - line boundaries.
  "indentOneSpace.onlyCompleteRange": false,

  // Command will execute even when only 1 line is selected.
  "indentOneSpace.workOnSingleLine": true

},
{
  // Whether execute beautify command before saving
  "importBeautify.beautifyOnSave": true,

  // Define sort order case first of destructed imports
  "importBeautify.destructedOrderCaseFirst": "lower",

  // Define sort order direction of destructed imports
  "importBeautify.destructedOrderDirection": "asc",

  // Define number of empty lines after group
  "importBeautify.emptyLines": 1,

  // Define rules of group
  "importBeautify.groups": [
    {
      "names": "^$",
      "orderBy": "none"
    },
    {
      "path": "^[^.@]|@[^/]",
      "groups": [
        {
          "names": "^\\*",
          "path": "^react|vue|@"
        },
        {
          "names": "^\\*"
        },
        {
          "names": "^[^,{]+$"
        },
        {
          "names": "^[^{]"
        }
      ]
    },
    {
      "path": "^@/",
      "groups": [
        {
          "names": "^\\*"
        },
        {
          "names": "^[^,{]+$"
        },
        {
          "names": "^[^{]"
        }
      ]
    },
    {
      "groups": [
        {
          "names": "^\\*"
        },
        {
          "names": "^[^,{]+$"
        },
        {
          "names": "^[^{]"
        }
      ]
    }
  ],

  // Define number of empty lines after last group
  "importBeautify.lastEmptyLines": 1,

  // Define number of named import per line
  "importBeautify.maxLineCount": 10,

  // Define charater count per line
  "importBeautify.maxLineLength": 120,

  // Define default sort order of groups
  "importBeautify.orderBy": "path",

  // Define default sort order case first of groups
  "importBeautify.orderCaseFirst": "lower",

  // Define default sort order direction of groups
  "importBeautify.orderDirection": "asc",

  // Define rules of path rewriting
  "importBeautify.pathRewrites": {},

  // Define type of quotes
  "importBeautify.quotemark": "single",

  // Add semicolon or not
  "importBeautify.semicolon": false,

  // Define the size of tab
  "importBeautify.tabSize": 2,

  // Define the character of tab
  "importBeautify.tabType": "space",

  // Add trailing comma or not
  "importBeautify.trailingComma": "multiLine"

},
{
  // Logging level for console
  "intellicodeApiExamples.loggingLevel": "INFO",

  // Enable API Usage Examples for Python files
  "intellicodeApiExamples.python.enabled": true,

  // Enable API Usage Examples for Typescript/Javascript files
  "intellicodeApiExamples.typescript.enabled": true

},
{
  //
  "vsintellicode.features.python.deepLearning": "default",

  // Enable Visual Studio IntelliCode completions for Java
  "vsintellicode.java.completionsEnabled": true,

  // Specifies the folder path where downloaded model files are stored. Defaults to the extension install directory if not specified.
  "vsintellicode.modelDownloadPath": null,

  // Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.
  //  - enabled: Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.
  //  - disabled: You've explicitly opted out of having this configuration controlled by IntelliCode.
  //  - automaticallyOverrodeDefaultValue: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.
  //  - choseToUpdateConfiguration: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set.
  "vsintellicode.modify.editor.suggestSelection": "enabled",

  // Enable Visual Studio IntelliCode completions for Python
  "vsintellicode.python.completionsEnabled": true,

  // Enable Visual Studio IntelliCode completions for MSSQL
  "vsintellicode.sql.completionsEnabled": true,

  // Enable Visual Studio IntelliCode completions for TypeScript and JavaScript
  "vsintellicode.typescript.completionsEnabled": true

},
{
  // Determines if the highting is supported only in XML-typed languages or in all documents with all languages. Allowing this might lead to unforseen circumstances with anything resembling XML/HTML tag structures, eg: TS types, eg: "const stuff: <CustomType>"
  "rainbowTags.allowEverywhere": false,

  // An array of HEX color codes for the tag highlighting. Unlimited possibilities.
  "rainbowTags.colors": [
    "#e6b422",
    "#c70067",
    "#00a960",
    "#fc7482"
  ],

  // Excluded tags.
  "rainbowTags.denylistTags": [
    "!DOCTYPE",
    "html",
    "head",
    "meta",
    "body",
    "title",
    "link",
    "script",
    "base",
    "style",
    "area",
    "br",
    "col",
    "embed",
    "hr",
    "img",
    "input",
    "param",
    "source",
    "track",
    "wbr"
  ],

  // Highlighting graphical style of choice. Default "color"
  "rainbowTags.hightlightType": "color",

  // Supported language IDs.
  "rainbowTags.supportedLanguages": [
    "html",
    "php",
    "twig",
    "blade",
    "smarty",
    "xml",
    "vue"
  ]

},
{
  // This setting will let you change the default file icon for dark themes.
  "vsicons.associations.fileDefault.file": null,

  // This setting will let you change the default file icon for light themes.
  "vsicons.associations.fileDefault.file_light": null,

  // These custom associations will override the file icon associations defined by default.
  "vsicons.associations.files": [],

  // This setting will let you change the default folder icon for dark themes.
  "vsicons.associations.folderDefault.folder": null,

  // This setting will let you change the default folder icon for light themes.
  "vsicons.associations.folderDefault.folder_light": null,

  // This setting will let you change the default root folder icon for dark themes.
  "vsicons.associations.folderDefault.root_folder": null,

  // This setting will let you change the default root folder icon for light themes.
  "vsicons.associations.folderDefault.root_folder_light": null,

  // These custom associations will override the folder icon associations defined by default.
  "vsicons.associations.folders": [],

  // The physical path to the parent folder where the custom icons folder resides on your local machine.
  "vsicons.customIconFolderPath": "",

  // If set to 'true', when manually changing the configurations, the 'restart' message won't be shown.
  "vsicons.dontShowConfigManuallyChangedMessage": false,

  // If set to 'true', the new version message won't be shown anymore.
  "vsicons.dontShowNewVersionMessage": false,

  // If set to 'true', the extension will match some of the common Angular patterns.
  "vsicons.presets.angular": false,

  // If set to 'true', all folders will have the default folder icon.
  "vsicons.presets.foldersAllDefaultIcon": false,

  // If set to 'true', the extension will hide the folder arrows in the 'Explorer'.
  "vsicons.presets.hideExplorerArrows": false,

  // If set to 'true', all folders will be hidden.
  "vsicons.presets.hideFolders": false,

  // If set to 'true', the extension will use the official JS icon.
  "vsicons.presets.jsOfficial": false,

  // If set to 'true', the extension will use the official JSON icon.
  "vsicons.presets.jsonOfficial": false,

  // If set to 'true', the extension will match some of the common NestJS patterns.
  "vsicons.presets.nestjs": false,

  // If set to 'true', the extension will use the official TS icon.
  "vsicons.presets.tsOfficial": false,

  // If set to 'true', the extension will restart automatically on project detection.
  "vsicons.projectDetection.autoReload": false,

  // If set to 'true', the extension will disable the project detection.
  "vsicons.projectDetection.disableDetect": false

},
{
  // Save absolute path in local-history.path
  "local-history.absolute": false,

  // Specify locale to use when displaying date
  "local-history.dateLocale": "",

  // A day number to purge local history. (0: no purge)
  "local-history.daysLimit": 30,

  // Is save in local history enabled (Never=0, Always=1, Limited to workspaceFolder=2)
  "local-history.enabled": 1,

  // Files or folder to not save
  "local-history.exclude": [
    "**/.history/**",
    "**/.vscode/**",
    "**/node_modules/**",
    "**/typings/**",
    "**/out/**",
    "**/Code/User/**"
  ],

  // A max files to display
  "local-history.maxDisplay": 10,

  // Specify a location for .history folder (null: use workspaceFolder)
  "local-history.path": "",

  // Controls the delay in seconds after which local-history is saved. To avoid too many history files.
  "local-history.saveDelay": 0,

  // Specify a location for tree view: explorer or localHistory
  "local-history.treeLocation": "explorer"

},
{
  // Open a specific browser instead of the default one. `string[]`
  "fiveServer.browser": [],

  // Set the server host. `string`
  "fiveServer.host": "0.0.0.0",

  // Files/Folders to ignore from watching. `Array<string | RegExp | Glob>`
  //
*dotfiles, node_modules, bower_components and jspm_packages are excluded by default*
  "fiveServer.ignore": [],

  // Navigates your browser automatically to the current working file. `boolean`
  "fiveServer.navigate": false,

  //
  "fiveServer.openTerminal": true,

  // Absolute path to PHP executable. `string`
  "fiveServer.php.executable": "",

  // Absolute path to php.ini file. `string`
  "fiveServer.php.ini": "",

  // Set the server port. `number`
  //
*usually between 3000 and 9999*
  "fiveServer.port": 5555

},
{
  // Toggle bold on some scopes
  "oneDarkPro.bold": false,

  // Code highlight color, read more [docs](https://binaryify.github.io/OneDark-Pro/#/?id=highlight-color-custom)
  "oneDarkPro.color": {
    "chalky": "",
    "coral": "",
    "dark": "",
    "error": "",
    "fountainBlue": "",
    "green": "",
    "invalid": "",
    "lightDark": "",
    "lightWhite": "",
    "malibu": "",
    "purple": "",
    "whiskey": "",
    "deepRed": ""
  },

  // Switch to different editor theme
  "oneDarkPro.editorTheme": "One Dark Pro",

  // Toggle italics on some scopes
  "oneDarkPro.italic": true,

  // Toggle Markdown style
  "oneDarkPro.markdownStyle": true,

  // Toggle vivid colors
  "oneDarkPro.vivid": false

},
{
  // A list of CSS based languages where suggestions are enabled.
  "html-css-class-completion.CSSLanguages": [
    "css",
    "sass",
    "scss"
  ],

  // Enables completion when you're writing Emmet abbreviations.
  "html-css-class-completion.enableEmmetSupport": false,

  // A glob pattern that defines files and folders to exclude. The glob pattern will be matched against the file paths of resulting matches relative to their workspace.
  "html-css-class-completion.excludeGlobPattern": "",

  // A list of HTML based languages where suggestions are enabled.
  "html-css-class-completion.HTMLLanguages": [
    "html",
    "vue",
    "razor",
    "blade",
    "handlebars",
    "twig",
    "django-html",
    "php",
    "markdown",
    "erb",
    "ejs",
    "svelte"
  ],

  // A glob pattern that defines files and folders to search for. The glob pattern will be matched against the paths of resulting matches relative to their workspace.
  "html-css-class-completion.includeGlobPattern": "**/*.{css,html}",

  // A list of JavaScript based languages where suggestions are enabled.
  "html-css-class-completion.JavaScriptLanguages": [
    "javascript",
    "javascriptreact",
    "typescriptreact"
  ]

}]